
Plytka_modelowanie_obiektu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800d4c0  0800d4c0  0000e4c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dae0  0800dae0  0000f1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dae0  0800dae0  0000eae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dae8  0800dae8  0000f1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dae8  0800dae8  0000eae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800daec  0800daec  0000eaec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800daf0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  200001f4  0800dce4  0000f1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ab0  0800dce4  0000fab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5ec  00000000  00000000  0000f224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cca  00000000  00000000  0002a810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d8  00000000  00000000  0002e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ba  00000000  00000000  0002fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c1c  00000000  00000000  00030d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f589  00000000  00000000  0005a98e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb66a  00000000  00000000  00079f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00175581  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007580  00000000  00000000  001755c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b8  00000000  00000000  0017cb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d4a4 	.word	0x0800d4a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	0800d4a4 	.word	0x0800d4a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b9a0 	b.w	8000f80 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f83c 	bl	8000cc4 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2lz>:
 8000c58:	b538      	push	{r3, r4, r5, lr}
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	4604      	mov	r4, r0
 8000c60:	460d      	mov	r5, r1
 8000c62:	f7ff ff5b 	bl	8000b1c <__aeabi_dcmplt>
 8000c66:	b928      	cbnz	r0, 8000c74 <__aeabi_d2lz+0x1c>
 8000c68:	4620      	mov	r0, r4
 8000c6a:	4629      	mov	r1, r5
 8000c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c70:	f000 b80a 	b.w	8000c88 <__aeabi_d2ulz>
 8000c74:	4620      	mov	r0, r4
 8000c76:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c7a:	f000 f805 	bl	8000c88 <__aeabi_d2ulz>
 8000c7e:	4240      	negs	r0, r0
 8000c80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c84:	bd38      	pop	{r3, r4, r5, pc}
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2ulz>:
 8000c88:	b5d0      	push	{r4, r6, r7, lr}
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <__aeabi_d2ulz+0x34>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4606      	mov	r6, r0
 8000c90:	460f      	mov	r7, r1
 8000c92:	f7ff fcd1 	bl	8000638 <__aeabi_dmul>
 8000c96:	f7ff ffa7 	bl	8000be8 <__aeabi_d2uiz>
 8000c9a:	4604      	mov	r4, r0
 8000c9c:	f7ff fc52 	bl	8000544 <__aeabi_ui2d>
 8000ca0:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <__aeabi_d2ulz+0x38>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f7ff fcc8 	bl	8000638 <__aeabi_dmul>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4630      	mov	r0, r6
 8000cae:	4639      	mov	r1, r7
 8000cb0:	f7ff fb0a 	bl	80002c8 <__aeabi_dsub>
 8000cb4:	f7ff ff98 	bl	8000be8 <__aeabi_d2uiz>
 8000cb8:	4621      	mov	r1, r4
 8000cba:	bdd0      	pop	{r4, r6, r7, pc}
 8000cbc:	3df00000 	.word	0x3df00000
 8000cc0:	41f00000 	.word	0x41f00000

08000cc4 <__udivmoddi4>:
 8000cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc8:	9d08      	ldr	r5, [sp, #32]
 8000cca:	460c      	mov	r4, r1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d14e      	bne.n	8000d6e <__udivmoddi4+0xaa>
 8000cd0:	4694      	mov	ip, r2
 8000cd2:	458c      	cmp	ip, r1
 8000cd4:	4686      	mov	lr, r0
 8000cd6:	fab2 f282 	clz	r2, r2
 8000cda:	d962      	bls.n	8000da2 <__udivmoddi4+0xde>
 8000cdc:	b14a      	cbz	r2, 8000cf2 <__udivmoddi4+0x2e>
 8000cde:	f1c2 0320 	rsb	r3, r2, #32
 8000ce2:	4091      	lsls	r1, r2
 8000ce4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	4319      	orrs	r1, r3
 8000cee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f f68c 	uxth.w	r6, ip
 8000cfa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb07 1114 	mls	r1, r7, r4, r1
 8000d06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0a:	fb04 f106 	mul.w	r1, r4, r6
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	d90a      	bls.n	8000d28 <__udivmoddi4+0x64>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1a:	f080 8112 	bcs.w	8000f42 <__udivmoddi4+0x27e>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 810f 	bls.w	8000f42 <__udivmoddi4+0x27e>
 8000d24:	3c02      	subs	r4, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a59      	subs	r1, r3, r1
 8000d2a:	fa1f f38e 	uxth.w	r3, lr
 8000d2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d32:	fb07 1110 	mls	r1, r7, r0, r1
 8000d36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3a:	fb00 f606 	mul.w	r6, r0, r6
 8000d3e:	429e      	cmp	r6, r3
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x94>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4a:	f080 80fc 	bcs.w	8000f46 <__udivmoddi4+0x282>
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	f240 80f9 	bls.w	8000f46 <__udivmoddi4+0x282>
 8000d54:	4463      	add	r3, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	1b9b      	subs	r3, r3, r6
 8000d5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11d      	cbz	r5, 8000d6a <__udivmoddi4+0xa6>
 8000d62:	40d3      	lsrs	r3, r2
 8000d64:	2200      	movs	r2, #0
 8000d66:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d905      	bls.n	8000d7e <__udivmoddi4+0xba>
 8000d72:	b10d      	cbz	r5, 8000d78 <__udivmoddi4+0xb4>
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	e7f5      	b.n	8000d6a <__udivmoddi4+0xa6>
 8000d7e:	fab3 f183 	clz	r1, r3
 8000d82:	2900      	cmp	r1, #0
 8000d84:	d146      	bne.n	8000e14 <__udivmoddi4+0x150>
 8000d86:	42a3      	cmp	r3, r4
 8000d88:	d302      	bcc.n	8000d90 <__udivmoddi4+0xcc>
 8000d8a:	4290      	cmp	r0, r2
 8000d8c:	f0c0 80f0 	bcc.w	8000f70 <__udivmoddi4+0x2ac>
 8000d90:	1a86      	subs	r6, r0, r2
 8000d92:	eb64 0303 	sbc.w	r3, r4, r3
 8000d96:	2001      	movs	r0, #1
 8000d98:	2d00      	cmp	r5, #0
 8000d9a:	d0e6      	beq.n	8000d6a <__udivmoddi4+0xa6>
 8000d9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000da0:	e7e3      	b.n	8000d6a <__udivmoddi4+0xa6>
 8000da2:	2a00      	cmp	r2, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x204>
 8000da8:	eba1 040c 	sub.w	r4, r1, ip
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa1f f78c 	uxth.w	r7, ip
 8000db4:	2101      	movs	r1, #1
 8000db6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dbe:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb07 f006 	mul.w	r0, r7, r6
 8000dca:	4298      	cmp	r0, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x11c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x11a>
 8000dd8:	4298      	cmp	r0, r3
 8000dda:	f200 80cd 	bhi.w	8000f78 <__udivmoddi4+0x2b4>
 8000dde:	4626      	mov	r6, r4
 8000de0:	1a1c      	subs	r4, r3, r0
 8000de2:	fa1f f38e 	uxth.w	r3, lr
 8000de6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dea:	fb08 4410 	mls	r4, r8, r0, r4
 8000dee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df2:	fb00 f707 	mul.w	r7, r0, r7
 8000df6:	429f      	cmp	r7, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x148>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x146>
 8000e04:	429f      	cmp	r7, r3
 8000e06:	f200 80b0 	bhi.w	8000f6a <__udivmoddi4+0x2a6>
 8000e0a:	4620      	mov	r0, r4
 8000e0c:	1bdb      	subs	r3, r3, r7
 8000e0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e12:	e7a5      	b.n	8000d60 <__udivmoddi4+0x9c>
 8000e14:	f1c1 0620 	rsb	r6, r1, #32
 8000e18:	408b      	lsls	r3, r1
 8000e1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e24:	fa04 f301 	lsl.w	r3, r4, r1
 8000e28:	ea43 030c 	orr.w	r3, r3, ip
 8000e2c:	40f4      	lsrs	r4, r6
 8000e2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e32:	0c38      	lsrs	r0, r7, #16
 8000e34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e38:	fbb4 fef0 	udiv	lr, r4, r0
 8000e3c:	fa1f fc87 	uxth.w	ip, r7
 8000e40:	fb00 441e 	mls	r4, r0, lr, r4
 8000e44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e48:	fb0e f90c 	mul.w	r9, lr, ip
 8000e4c:	45a1      	cmp	r9, r4
 8000e4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e52:	d90a      	bls.n	8000e6a <__udivmoddi4+0x1a6>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5a:	f080 8084 	bcs.w	8000f66 <__udivmoddi4+0x2a2>
 8000e5e:	45a1      	cmp	r9, r4
 8000e60:	f240 8081 	bls.w	8000f66 <__udivmoddi4+0x2a2>
 8000e64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	eba4 0409 	sub.w	r4, r4, r9
 8000e6e:	fa1f f983 	uxth.w	r9, r3
 8000e72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e76:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x1d2>
 8000e86:	193c      	adds	r4, r7, r4
 8000e88:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e8c:	d267      	bcs.n	8000f5e <__udivmoddi4+0x29a>
 8000e8e:	45a4      	cmp	ip, r4
 8000e90:	d965      	bls.n	8000f5e <__udivmoddi4+0x29a>
 8000e92:	3b02      	subs	r3, #2
 8000e94:	443c      	add	r4, r7
 8000e96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ea2:	429c      	cmp	r4, r3
 8000ea4:	46ce      	mov	lr, r9
 8000ea6:	469c      	mov	ip, r3
 8000ea8:	d351      	bcc.n	8000f4e <__udivmoddi4+0x28a>
 8000eaa:	d04e      	beq.n	8000f4a <__udivmoddi4+0x286>
 8000eac:	b155      	cbz	r5, 8000ec4 <__udivmoddi4+0x200>
 8000eae:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000eb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eba:	40cb      	lsrs	r3, r1
 8000ebc:	431e      	orrs	r6, r3
 8000ebe:	40cc      	lsrs	r4, r1
 8000ec0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	e750      	b.n	8000d6a <__udivmoddi4+0xa6>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ed8:	4094      	lsls	r4, r2
 8000eda:	430c      	orrs	r4, r1
 8000edc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee4:	fa1f f78c 	uxth.w	r7, ip
 8000ee8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eec:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef0:	0c23      	lsrs	r3, r4, #16
 8000ef2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef6:	fb00 f107 	mul.w	r1, r0, r7
 8000efa:	4299      	cmp	r1, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x24c>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f06:	d22c      	bcs.n	8000f62 <__udivmoddi4+0x29e>
 8000f08:	4299      	cmp	r1, r3
 8000f0a:	d92a      	bls.n	8000f62 <__udivmoddi4+0x29e>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4463      	add	r3, ip
 8000f10:	1a5b      	subs	r3, r3, r1
 8000f12:	b2a4      	uxth	r4, r4
 8000f14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f18:	fb08 3311 	mls	r3, r8, r1, r3
 8000f1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f20:	fb01 f307 	mul.w	r3, r1, r7
 8000f24:	42a3      	cmp	r3, r4
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x276>
 8000f28:	eb1c 0404 	adds.w	r4, ip, r4
 8000f2c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f30:	d213      	bcs.n	8000f5a <__udivmoddi4+0x296>
 8000f32:	42a3      	cmp	r3, r4
 8000f34:	d911      	bls.n	8000f5a <__udivmoddi4+0x296>
 8000f36:	3902      	subs	r1, #2
 8000f38:	4464      	add	r4, ip
 8000f3a:	1ae4      	subs	r4, r4, r3
 8000f3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f40:	e739      	b.n	8000db6 <__udivmoddi4+0xf2>
 8000f42:	4604      	mov	r4, r0
 8000f44:	e6f0      	b.n	8000d28 <__udivmoddi4+0x64>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e706      	b.n	8000d58 <__udivmoddi4+0x94>
 8000f4a:	45c8      	cmp	r8, r9
 8000f4c:	d2ae      	bcs.n	8000eac <__udivmoddi4+0x1e8>
 8000f4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f56:	3801      	subs	r0, #1
 8000f58:	e7a8      	b.n	8000eac <__udivmoddi4+0x1e8>
 8000f5a:	4631      	mov	r1, r6
 8000f5c:	e7ed      	b.n	8000f3a <__udivmoddi4+0x276>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	e799      	b.n	8000e96 <__udivmoddi4+0x1d2>
 8000f62:	4630      	mov	r0, r6
 8000f64:	e7d4      	b.n	8000f10 <__udivmoddi4+0x24c>
 8000f66:	46d6      	mov	lr, sl
 8000f68:	e77f      	b.n	8000e6a <__udivmoddi4+0x1a6>
 8000f6a:	4463      	add	r3, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e74d      	b.n	8000e0c <__udivmoddi4+0x148>
 8000f70:	4606      	mov	r6, r0
 8000f72:	4623      	mov	r3, r4
 8000f74:	4608      	mov	r0, r1
 8000f76:	e70f      	b.n	8000d98 <__udivmoddi4+0xd4>
 8000f78:	3e02      	subs	r6, #2
 8000f7a:	4463      	add	r3, ip
 8000f7c:	e730      	b.n	8000de0 <__udivmoddi4+0x11c>
 8000f7e:	bf00      	nop

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f96:	4b21      	ldr	r3, [pc, #132]	@ (800101c <MX_ADC1_Init+0x98>)
 8000f98:	4a21      	ldr	r2, [pc, #132]	@ (8001020 <MX_ADC1_Init+0x9c>)
 8000f9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <MX_ADC1_Init+0x98>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <MX_ADC1_Init+0x98>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fae:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb4:	4b19      	ldr	r3, [pc, #100]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fc4:	4a17      	ldr	r2, [pc, #92]	@ (8001024 <MX_ADC1_Init+0xa0>)
 8000fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fce:	4b13      	ldr	r3, [pc, #76]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe2:	480e      	ldr	r0, [pc, #56]	@ (800101c <MX_ADC1_Init+0x98>)
 8000fe4:	f002 f8ce 	bl	8003184 <HAL_ADC_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000fee:	f001 fbc7 	bl	8002780 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	@ (800101c <MX_ADC1_Init+0x98>)
 8001004:	f002 fa68 	bl	80034d8 <HAL_ADC_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800100e:	f001 fbb7 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000210 	.word	0x20000210
 8001020:	40012000 	.word	0x40012000
 8001024:	0f000001 	.word	0x0f000001

08001028 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800102e:	463b      	mov	r3, r7
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800103a:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <MX_ADC2_Init+0x98>)
 800103c:	4a21      	ldr	r2, [pc, #132]	@ (80010c4 <MX_ADC2_Init+0x9c>)
 800103e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001040:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <MX_ADC2_Init+0x98>)
 8001042:	2200      	movs	r2, #0
 8001044:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001046:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <MX_ADC2_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800104c:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <MX_ADC2_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001052:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <MX_ADC2_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001058:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <MX_ADC2_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001060:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <MX_ADC2_Init+0x98>)
 8001062:	2200      	movs	r2, #0
 8001064:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001066:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <MX_ADC2_Init+0x98>)
 8001068:	4a17      	ldr	r2, [pc, #92]	@ (80010c8 <MX_ADC2_Init+0xa0>)
 800106a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <MX_ADC2_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001072:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <MX_ADC2_Init+0x98>)
 8001074:	2201      	movs	r2, #1
 8001076:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <MX_ADC2_Init+0x98>)
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001080:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <MX_ADC2_Init+0x98>)
 8001082:	2201      	movs	r2, #1
 8001084:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001086:	480e      	ldr	r0, [pc, #56]	@ (80010c0 <MX_ADC2_Init+0x98>)
 8001088:	f002 f87c 	bl	8003184 <HAL_ADC_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001092:	f001 fb75 	bl	8002780 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001096:	2309      	movs	r3, #9
 8001098:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800109a:	2301      	movs	r3, #1
 800109c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <MX_ADC2_Init+0x98>)
 80010a8:	f002 fa16 	bl	80034d8 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80010b2:	f001 fb65 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000258 	.word	0x20000258
 80010c4:	40012100 	.word	0x40012100
 80010c8:	0f000001 	.word	0x0f000001

080010cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	@ 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001194 <HAL_ADC_MspInit+0xc8>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d124      	bne.n	8001138 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001198 <HAL_ADC_MspInit+0xcc>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f2:	4a29      	ldr	r2, [pc, #164]	@ (8001198 <HAL_ADC_MspInit+0xcc>)
 80010f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010fa:	4b27      	ldr	r3, [pc, #156]	@ (8001198 <HAL_ADC_MspInit+0xcc>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <HAL_ADC_MspInit+0xcc>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a23      	ldr	r2, [pc, #140]	@ (8001198 <HAL_ADC_MspInit+0xcc>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <HAL_ADC_MspInit+0xcc>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800111e:	2301      	movs	r3, #1
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001122:	2303      	movs	r3, #3
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	481a      	ldr	r0, [pc, #104]	@ (800119c <HAL_ADC_MspInit+0xd0>)
 8001132:	f002 fdc5 	bl	8003cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001136:	e028      	b.n	800118a <HAL_ADC_MspInit+0xbe>
  else if(adcHandle->Instance==ADC2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a18      	ldr	r2, [pc, #96]	@ (80011a0 <HAL_ADC_MspInit+0xd4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d123      	bne.n	800118a <HAL_ADC_MspInit+0xbe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <HAL_ADC_MspInit+0xcc>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	4a14      	ldr	r2, [pc, #80]	@ (8001198 <HAL_ADC_MspInit+0xcc>)
 8001148:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800114c:	6453      	str	r3, [r2, #68]	@ 0x44
 800114e:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <HAL_ADC_MspInit+0xcc>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <HAL_ADC_MspInit+0xcc>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a0e      	ldr	r2, [pc, #56]	@ (8001198 <HAL_ADC_MspInit+0xcc>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <HAL_ADC_MspInit+0xcc>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001172:	2302      	movs	r3, #2
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001176:	2303      	movs	r3, #3
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	4807      	ldr	r0, [pc, #28]	@ (80011a4 <HAL_ADC_MspInit+0xd8>)
 8001186:	f002 fd9b 	bl	8003cc0 <HAL_GPIO_Init>
}
 800118a:	bf00      	nop
 800118c:	3730      	adds	r7, #48	@ 0x30
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40012000 	.word	0x40012000
 8001198:	40023800 	.word	0x40023800
 800119c:	40020800 	.word	0x40020800
 80011a0:	40012100 	.word	0x40012100
 80011a4:	40020400 	.word	0x40020400

080011a8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	@ 0x30
 80011ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b7e      	ldr	r3, [pc, #504]	@ (80013b8 <MX_GPIO_Init+0x210>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a7d      	ldr	r2, [pc, #500]	@ (80013b8 <MX_GPIO_Init+0x210>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b7b      	ldr	r3, [pc, #492]	@ (80013b8 <MX_GPIO_Init+0x210>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	61bb      	str	r3, [r7, #24]
 80011d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d6:	4b78      	ldr	r3, [pc, #480]	@ (80013b8 <MX_GPIO_Init+0x210>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a77      	ldr	r2, [pc, #476]	@ (80013b8 <MX_GPIO_Init+0x210>)
 80011dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b75      	ldr	r3, [pc, #468]	@ (80013b8 <MX_GPIO_Init+0x210>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b72      	ldr	r3, [pc, #456]	@ (80013b8 <MX_GPIO_Init+0x210>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a71      	ldr	r2, [pc, #452]	@ (80013b8 <MX_GPIO_Init+0x210>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b6f      	ldr	r3, [pc, #444]	@ (80013b8 <MX_GPIO_Init+0x210>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	4b6c      	ldr	r3, [pc, #432]	@ (80013b8 <MX_GPIO_Init+0x210>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a6b      	ldr	r2, [pc, #428]	@ (80013b8 <MX_GPIO_Init+0x210>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b69      	ldr	r3, [pc, #420]	@ (80013b8 <MX_GPIO_Init+0x210>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121e:	4b66      	ldr	r3, [pc, #408]	@ (80013b8 <MX_GPIO_Init+0x210>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a65      	ldr	r2, [pc, #404]	@ (80013b8 <MX_GPIO_Init+0x210>)
 8001224:	f043 0310 	orr.w	r3, r3, #16
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b63      	ldr	r3, [pc, #396]	@ (80013b8 <MX_GPIO_Init+0x210>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	4b60      	ldr	r3, [pc, #384]	@ (80013b8 <MX_GPIO_Init+0x210>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a5f      	ldr	r2, [pc, #380]	@ (80013b8 <MX_GPIO_Init+0x210>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b5d      	ldr	r3, [pc, #372]	@ (80013b8 <MX_GPIO_Init+0x210>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800124e:	4b5a      	ldr	r3, [pc, #360]	@ (80013b8 <MX_GPIO_Init+0x210>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a59      	ldr	r2, [pc, #356]	@ (80013b8 <MX_GPIO_Init+0x210>)
 8001254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b57      	ldr	r3, [pc, #348]	@ (80013b8 <MX_GPIO_Init+0x210>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f244 0181 	movw	r1, #16513	@ 0x4081
 800126c:	4853      	ldr	r0, [pc, #332]	@ (80013bc <MX_GPIO_Init+0x214>)
 800126e:	f002 feeb 	bl	8004048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2140      	movs	r1, #64	@ 0x40
 8001276:	4852      	ldr	r0, [pc, #328]	@ (80013c0 <MX_GPIO_Init+0x218>)
 8001278:	f002 fee6 	bl	8004048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800127c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001282:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	484c      	ldr	r0, [pc, #304]	@ (80013c4 <MX_GPIO_Init+0x21c>)
 8001294:	f002 fd14 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001298:	2332      	movs	r3, #50	@ 0x32
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a8:	230b      	movs	r3, #11
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4844      	ldr	r0, [pc, #272]	@ (80013c4 <MX_GPIO_Init+0x21c>)
 80012b4:	f002 fd04 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012b8:	2386      	movs	r3, #134	@ 0x86
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c8:	230b      	movs	r3, #11
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	483d      	ldr	r0, [pc, #244]	@ (80013c8 <MX_GPIO_Init+0x220>)
 80012d4:	f002 fcf4 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80012d8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4832      	ldr	r0, [pc, #200]	@ (80013bc <MX_GPIO_Init+0x214>)
 80012f2:	f002 fce5 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAUSE_Pin */
  GPIO_InitStruct.Pin = PAUSE_Pin;
 80012f6:	2304      	movs	r3, #4
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PAUSE_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	482c      	ldr	r0, [pc, #176]	@ (80013bc <MX_GPIO_Init+0x214>)
 800130c:	f002 fcd8 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001310:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001322:	230b      	movs	r3, #11
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	4619      	mov	r1, r3
 800132c:	4823      	ldr	r0, [pc, #140]	@ (80013bc <MX_GPIO_Init+0x214>)
 800132e:	f002 fcc7 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001332:	2340      	movs	r3, #64	@ 0x40
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	481d      	ldr	r0, [pc, #116]	@ (80013c0 <MX_GPIO_Init+0x218>)
 800134a:	f002 fcb9 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800134e:	2380      	movs	r3, #128	@ 0x80
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	4817      	ldr	r0, [pc, #92]	@ (80013c0 <MX_GPIO_Init+0x218>)
 8001362:	f002 fcad 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001366:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001378:	230b      	movs	r3, #11
 800137a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	480f      	ldr	r0, [pc, #60]	@ (80013c0 <MX_GPIO_Init+0x218>)
 8001384:	f002 fc9c 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SELECT_Pin */
  GPIO_InitStruct.Pin = SELECT_Pin;
 8001388:	2310      	movs	r3, #16
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SELECT_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4808      	ldr	r0, [pc, #32]	@ (80013bc <MX_GPIO_Init+0x214>)
 800139c:	f002 fc90 	bl	8003cc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2101      	movs	r1, #1
 80013a4:	2008      	movs	r0, #8
 80013a6:	f002 fbc2 	bl	8003b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013aa:	2008      	movs	r0, #8
 80013ac:	f002 fbdb 	bl	8003b66 <HAL_NVIC_EnableIRQ>

}
 80013b0:	bf00      	nop
 80013b2:	3730      	adds	r7, #48	@ 0x30
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40021800 	.word	0x40021800
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40020000 	.word	0x40020000

080013cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001444 <MX_I2C1_Init+0x78>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001448 <MX_I2C1_Init+0x7c>)
 80013da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013dc:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e2:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013ee:	4b14      	ldr	r3, [pc, #80]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013f4:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fa:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <MX_I2C1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001400:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <MX_I2C1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001406:	480e      	ldr	r0, [pc, #56]	@ (8001440 <MX_I2C1_Init+0x74>)
 8001408:	f002 fe6a 	bl	80040e0 <HAL_I2C_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001412:	f001 f9b5 	bl	8002780 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001416:	2100      	movs	r1, #0
 8001418:	4809      	ldr	r0, [pc, #36]	@ (8001440 <MX_I2C1_Init+0x74>)
 800141a:	f003 fb1b 	bl	8004a54 <HAL_I2CEx_ConfigAnalogFilter>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001424:	f001 f9ac 	bl	8002780 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001428:	2100      	movs	r1, #0
 800142a:	4805      	ldr	r0, [pc, #20]	@ (8001440 <MX_I2C1_Init+0x74>)
 800142c:	f003 fb5d 	bl	8004aea <HAL_I2CEx_ConfigDigitalFilter>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001436:	f001 f9a3 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200002a0 	.word	0x200002a0
 8001444:	40005400 	.word	0x40005400
 8001448:	00808cd2 	.word	0x00808cd2

0800144c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b0aa      	sub	sp, #168	@ 0xa8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	2284      	movs	r2, #132	@ 0x84
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f009 facd 	bl	800aa0c <memset>
  if(i2cHandle->Instance==I2C1)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a22      	ldr	r2, [pc, #136]	@ (8001500 <HAL_I2C_MspInit+0xb4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d13c      	bne.n	80014f6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800147c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001480:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001482:	2300      	movs	r3, #0
 8001484:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4618      	mov	r0, r3
 800148c:	f004 f98e 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001496:	f001 f973 	bl	8002780 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <HAL_I2C_MspInit+0xb8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a19      	ldr	r2, [pc, #100]	@ (8001504 <HAL_I2C_MspInit+0xb8>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <HAL_I2C_MspInit+0xb8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80014b2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80014b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ba:	2312      	movs	r3, #18
 80014bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014cc:	2304      	movs	r3, #4
 80014ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014d6:	4619      	mov	r1, r3
 80014d8:	480b      	ldr	r0, [pc, #44]	@ (8001508 <HAL_I2C_MspInit+0xbc>)
 80014da:	f002 fbf1 	bl	8003cc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_I2C_MspInit+0xb8>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	4a08      	ldr	r2, [pc, #32]	@ (8001504 <HAL_I2C_MspInit+0xb8>)
 80014e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_I2C_MspInit+0xb8>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014f6:	bf00      	nop
 80014f8:	37a8      	adds	r7, #168	@ 0xa8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40005400 	.word	0x40005400
 8001504:	40023800 	.word	0x40023800
 8001508:	40020400 	.word	0x40020400

0800150c <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af02      	add	r7, sp, #8
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	011b      	lsls	r3, r3, #4
 800151a:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	f023 030f 	bic.w	r3, r3, #15
 8001522:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8001524:	7bbb      	ldrb	r3, [r7, #14]
 8001526:	f043 030c 	orr.w	r3, r3, #12
 800152a:	b2db      	uxtb	r3, r3
 800152c:	723b      	strb	r3, [r7, #8]
 800152e:	7bbb      	ldrb	r3, [r7, #14]
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	b2db      	uxtb	r3, r3
 8001536:	727b      	strb	r3, [r7, #9]
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	f043 030c 	orr.w	r3, r3, #12
 800153e:	b2db      	uxtb	r3, r3
 8001540:	72bb      	strb	r3, [r7, #10]
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	b2db      	uxtb	r3, r3
 800154a:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <lcd16x2_i2c_sendCommand+0x60>)
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	4b07      	ldr	r3, [pc, #28]	@ (8001570 <lcd16x2_i2c_sendCommand+0x64>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	f107 0208 	add.w	r2, r7, #8
 800155a:	23c8      	movs	r3, #200	@ 0xc8
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2304      	movs	r3, #4
 8001560:	f002 fe5a 	bl	8004218 <HAL_I2C_Master_Transmit>
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200002f4 	.word	0x200002f4
 8001570:	200002f8 	.word	0x200002f8

08001574 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af02      	add	r7, sp, #8
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	f023 030f 	bic.w	r3, r3, #15
 800158a:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	f043 030d 	orr.w	r3, r3, #13
 8001592:	b2db      	uxtb	r3, r3
 8001594:	723b      	strb	r3, [r7, #8]
 8001596:	7bbb      	ldrb	r3, [r7, #14]
 8001598:	f043 0309 	orr.w	r3, r3, #9
 800159c:	b2db      	uxtb	r3, r3
 800159e:	727b      	strb	r3, [r7, #9]
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	f043 030d 	orr.w	r3, r3, #13
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	72bb      	strb	r3, [r7, #10]
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	f043 0309 	orr.w	r3, r3, #9
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 80015b4:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <lcd16x2_i2c_sendData+0x60>)
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <lcd16x2_i2c_sendData+0x64>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f107 0208 	add.w	r2, r7, #8
 80015c2:	23c8      	movs	r3, #200	@ 0xc8
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2304      	movs	r3, #4
 80015c8:	f002 fe26 	bl	8004218 <HAL_I2C_Master_Transmit>
}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200002f4 	.word	0x200002f4
 80015d8:	200002f8 	.word	0x200002f8

080015dc <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 80015e4:	2032      	movs	r0, #50	@ 0x32
 80015e6:	f001 fda9 	bl	800313c <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 80015ea:	4a30      	ldr	r2, [pc, #192]	@ (80016ac <lcd16x2_i2c_init+0xd0>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 80015f0:	4b2e      	ldr	r3, [pc, #184]	@ (80016ac <lcd16x2_i2c_init+0xd0>)
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80015f8:	2205      	movs	r2, #5
 80015fa:	214e      	movs	r1, #78	@ 0x4e
 80015fc:	f002 ff24 	bl	8004448 <HAL_I2C_IsDeviceReady>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d010      	beq.n	8001628 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8001606:	4b29      	ldr	r3, [pc, #164]	@ (80016ac <lcd16x2_i2c_init+0xd0>)
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800160e:	2205      	movs	r2, #5
 8001610:	217e      	movs	r1, #126	@ 0x7e
 8001612:	f002 ff19 	bl	8004448 <HAL_I2C_IsDeviceReady>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <lcd16x2_i2c_init+0x44>
    {
      return false;
 800161c:	2300      	movs	r3, #0
 800161e:	e040      	b.n	80016a2 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8001620:	4b23      	ldr	r3, [pc, #140]	@ (80016b0 <lcd16x2_i2c_init+0xd4>)
 8001622:	227e      	movs	r2, #126	@ 0x7e
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	e002      	b.n	800162e <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8001628:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <lcd16x2_i2c_init+0xd4>)
 800162a:	224e      	movs	r2, #78	@ 0x4e
 800162c:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 800162e:	202d      	movs	r0, #45	@ 0x2d
 8001630:	f001 fd84 	bl	800313c <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8001634:	2030      	movs	r0, #48	@ 0x30
 8001636:	f7ff ff69 	bl	800150c <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 800163a:	2005      	movs	r0, #5
 800163c:	f001 fd7e 	bl	800313c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8001640:	2030      	movs	r0, #48	@ 0x30
 8001642:	f7ff ff63 	bl	800150c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001646:	2001      	movs	r0, #1
 8001648:	f001 fd78 	bl	800313c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 800164c:	2030      	movs	r0, #48	@ 0x30
 800164e:	f7ff ff5d 	bl	800150c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8001652:	2008      	movs	r0, #8
 8001654:	f001 fd72 	bl	800313c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8001658:	2020      	movs	r0, #32
 800165a:	f7ff ff57 	bl	800150c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 800165e:	2008      	movs	r0, #8
 8001660:	f001 fd6c 	bl	800313c <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8001664:	2028      	movs	r0, #40	@ 0x28
 8001666:	f7ff ff51 	bl	800150c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800166a:	2001      	movs	r0, #1
 800166c:	f001 fd66 	bl	800313c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8001670:	2008      	movs	r0, #8
 8001672:	f7ff ff4b 	bl	800150c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8001676:	2001      	movs	r0, #1
 8001678:	f001 fd60 	bl	800313c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 800167c:	2001      	movs	r0, #1
 800167e:	f7ff ff45 	bl	800150c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8001682:	2003      	movs	r0, #3
 8001684:	f001 fd5a 	bl	800313c <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8001688:	2006      	movs	r0, #6
 800168a:	f7ff ff3f 	bl	800150c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 800168e:	2001      	movs	r0, #1
 8001690:	f001 fd54 	bl	800313c <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8001694:	200c      	movs	r0, #12
 8001696:	f7ff ff39 	bl	800150c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 800169a:	2003      	movs	r0, #3
 800169c:	f001 fd4e 	bl	800313c <HAL_Delay>

  return true;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200002f4 	.word	0x200002f4
 80016b0:	200002f8 	.word	0x200002f8

080016b4 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	460a      	mov	r2, r1
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	4613      	mov	r3, r2
 80016c2:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d108      	bne.n	80016e4 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016d8:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff15 	bl	800150c <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 80016e2:	e007      	b.n	80016f4 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80016ea:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff0c 	bl	800150c <lcd16x2_i2c_sendCommand>
}
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <lcd16x2_i2c_1stLine>:

/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_i2c_1stLine(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(0,0);
 8001700:	2100      	movs	r1, #0
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff ffd6 	bl	80016b4 <lcd16x2_i2c_setCursor>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}

0800170c <lcd16x2_i2c_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(1,0);
 8001710:	2100      	movs	r1, #0
 8001712:	2001      	movs	r0, #1
 8001714:	f7ff ffce 	bl	80016b4 <lcd16x2_i2c_setCursor>
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <lcd16x2_i2c_cursorShow>:

/**
 * @brief Cursor ON/OFF
 */
void lcd16x2_i2c_cursorShow(bool state)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  if(state)
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <lcd16x2_i2c_cursorShow+0x18>
  {
    lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 800172c:	200f      	movs	r0, #15
 800172e:	f7ff feed 	bl	800150c <lcd16x2_i2c_sendCommand>
  }
  else
  {
    lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
  }
}
 8001732:	e002      	b.n	800173a <lcd16x2_i2c_cursorShow+0x1e>
    lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8001734:	200c      	movs	r0, #12
 8001736:	f7ff fee9 	bl	800150c <lcd16x2_i2c_sendCommand>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8001742:	b40f      	push	{r0, r1, r2, r3}
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b089      	sub	sp, #36	@ 0x24
 8001748:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 800174a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800174e:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001758:	4618      	mov	r0, r3
 800175a:	f009 f94d 	bl	800a9f8 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 800175e:	2300      	movs	r3, #0
 8001760:	77fb      	strb	r3, [r7, #31]
 8001762:	e00a      	b.n	800177a <lcd16x2_i2c_printf+0x38>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 8001764:	7ffb      	ldrb	r3, [r7, #31]
 8001766:	3320      	adds	r3, #32
 8001768:	443b      	add	r3, r7
 800176a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff00 	bl	8001574 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001774:	7ffb      	ldrb	r3, [r7, #31]
 8001776:	3301      	adds	r3, #1
 8001778:	77fb      	strb	r3, [r7, #31]
 800177a:	7ffc      	ldrb	r4, [r7, #31]
 800177c:	f107 0308 	add.w	r3, r7, #8
 8001780:	4618      	mov	r0, r3
 8001782:	f7fe fd95 	bl	80002b0 <strlen>
 8001786:	4603      	mov	r3, r0
 8001788:	429c      	cmp	r4, r3
 800178a:	d202      	bcs.n	8001792 <lcd16x2_i2c_printf+0x50>
 800178c:	7ffb      	ldrb	r3, [r7, #31]
 800178e:	2b0f      	cmp	r3, #15
 8001790:	d9e8      	bls.n	8001764 <lcd16x2_i2c_printf+0x22>
  }
}
 8001792:	bf00      	nop
 8001794:	3724      	adds	r7, #36	@ 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800179c:	b004      	add	sp, #16
 800179e:	4770      	bx	lr

080017a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a6:	f001 fc6c 	bl	8003082 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017aa:	f000 fa75 	bl	8001c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ae:	f7ff fcfb 	bl	80011a8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80017b2:	f001 fafd 	bl	8002db0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80017b6:	f001 fb93 	bl	8002ee0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80017ba:	f001 f991 	bl	8002ae0 <MX_TIM2_Init>
  MX_TIM7_Init();
 80017be:	f001 fa05 	bl	8002bcc <MX_TIM7_Init>
  MX_I2C1_Init();
 80017c2:	f7ff fe03 	bl	80013cc <MX_I2C1_Init>
  MX_TIM1_Init();
 80017c6:	f001 f931 	bl	8002a2c <MX_TIM1_Init>
  MX_ADC1_Init();
 80017ca:	f7ff fbdb 	bl	8000f84 <MX_ADC1_Init>
  MX_ADC2_Init();
 80017ce:	f7ff fc2b 	bl	8001028 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  lcd16x2_i2c_init(&hi2c1); // Inicjalizacja wyświetlacza
 80017d2:	48b0      	ldr	r0, [pc, #704]	@ (8001a94 <main+0x2f4>)
 80017d4:	f7ff ff02 	bl	80015dc <lcd16x2_i2c_init>
  lcd16x2_i2c_cursorShow(true); // Włączenie kursora
 80017d8:	2001      	movs	r0, #1
 80017da:	f7ff ff9f 	bl	800171c <lcd16x2_i2c_cursorShow>
  HAL_TIM_PWM_Start (&htim2, TIM_CHANNEL_4); // Inicjalizacja PWM
 80017de:	210c      	movs	r1, #12
 80017e0:	48ad      	ldr	r0, [pc, #692]	@ (8001a98 <main+0x2f8>)
 80017e2:	f004 fd05 	bl	80061f0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim7); // Inicjalizacja zegara głównego
 80017e6:	48ad      	ldr	r0, [pc, #692]	@ (8001a9c <main+0x2fc>)
 80017e8:	f004 fc28 	bl	800603c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL); // Inicjalizacja enkodera
 80017ec:	213c      	movs	r1, #60	@ 0x3c
 80017ee:	48ac      	ldr	r0, [pc, #688]	@ (8001aa0 <main+0x300>)
 80017f0:	f004 fe9e 	bl	8006530 <HAL_TIM_Encoder_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rxBuffer[rxIndex], 1); // Inicjalizacja odbierania komend przez UART
 80017f4:	4bab      	ldr	r3, [pc, #684]	@ (8001aa4 <main+0x304>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4bab      	ldr	r3, [pc, #684]	@ (8001aa8 <main+0x308>)
 80017fc:	4413      	add	r3, r2
 80017fe:	2201      	movs	r2, #1
 8001800:	4619      	mov	r1, r3
 8001802:	48aa      	ldr	r0, [pc, #680]	@ (8001aac <main+0x30c>)
 8001804:	f005 ff93 	bl	800772e <HAL_UART_Receive_IT>

  // Ustawienie wstępne trybu na zadanie PWM
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	2180      	movs	r1, #128	@ 0x80
 800180c:	48a8      	ldr	r0, [pc, #672]	@ (8001ab0 <main+0x310>)
 800180e:	f002 fc1b 	bl	8004048 <HAL_GPIO_WritePin>

  bool raise = true;
 8001812:	2301      	movs	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
  uint16_t adcValue = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	81bb      	strh	r3, [r7, #12]
  uint16_t setPWM = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	817b      	strh	r3, [r7, #10]
  float setTemperature = minSetTemperature;
 800181e:	4ba5      	ldr	r3, [pc, #660]	@ (8001ab4 <main+0x314>)
 8001820:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Po naciśnięciu enkodera:
	  if (HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin) == GPIO_PIN_SET && raise == GPIO_PIN_RESET)
 8001822:	2110      	movs	r1, #16
 8001824:	48a2      	ldr	r0, [pc, #648]	@ (8001ab0 <main+0x310>)
 8001826:	f002 fbf7 	bl	8004018 <HAL_GPIO_ReadPin>
 800182a:	4603      	mov	r3, r0
 800182c:	2b01      	cmp	r3, #1
 800182e:	f040 80ea 	bne.w	8001a06 <main+0x266>
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	f083 0301 	eor.w	r3, r3, #1
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80e3 	beq.w	8001a06 <main+0x266>
	  {
		  switch(impulse)
 8001840:	4b9d      	ldr	r3, [pc, #628]	@ (8001ab8 <main+0x318>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b0d      	cmp	r3, #13
 8001846:	f200 80de 	bhi.w	8001a06 <main+0x266>
 800184a:	a201      	add	r2, pc, #4	@ (adr r2, 8001850 <main+0xb0>)
 800184c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001850:	08001891 	.word	0x08001891
 8001854:	08001a07 	.word	0x08001a07
 8001858:	08001889 	.word	0x08001889
 800185c:	08001a07 	.word	0x08001a07
 8001860:	08001891 	.word	0x08001891
 8001864:	08001a07 	.word	0x08001a07
 8001868:	08001891 	.word	0x08001891
 800186c:	08001a07 	.word	0x08001a07
 8001870:	08001a07 	.word	0x08001a07
 8001874:	08001a07 	.word	0x08001a07
 8001878:	08001899 	.word	0x08001899
 800187c:	080018c5 	.word	0x080018c5
 8001880:	0800191f 	.word	0x0800191f
 8001884:	0800198b 	.word	0x0800198b
		  {
			  case 2:
				  // Wejście w wybór wartości zadanej
				  impulse = 10;
 8001888:	4b8b      	ldr	r3, [pc, #556]	@ (8001ab8 <main+0x318>)
 800188a:	220a      	movs	r2, #10
 800188c:	701a      	strb	r2, [r3, #0]
				  break;
 800188e:	e0ba      	b.n	8001a06 <main+0x266>

			  case 0:
			  case 4:
			  case 6:
				  // Wejście w wybór wartości zadanej
				  impulse = 12;
 8001890:	4b89      	ldr	r3, [pc, #548]	@ (8001ab8 <main+0x318>)
 8001892:	220c      	movs	r2, #12
 8001894:	701a      	strb	r2, [r3, #0]
				  break;
 8001896:	e0b6      	b.n	8001a06 <main+0x266>

			  case 10:
				  // Powrót do wyświetlania wartości
				  __HAL_TIM_SET_COUNTER(&htim1, 2);
 8001898:	4b81      	ldr	r3, [pc, #516]	@ (8001aa0 <main+0x300>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2202      	movs	r2, #2
 800189e:	625a      	str	r2, [r3, #36]	@ 0x24
				  impulse = 2;
 80018a0:	4b85      	ldr	r3, [pc, #532]	@ (8001ab8 <main+0x318>)
 80018a2:	2202      	movs	r2, #2
 80018a4:	701a      	strb	r2, [r3, #0]

				  // Obsługa wyświetlacza
				  lcd16x2_i2c_1stLine();
 80018a6:	f7ff ff29 	bl	80016fc <lcd16x2_i2c_1stLine>
				  lcd16x2_i2c_printf("Wypelnienie PWM ");
 80018aa:	4884      	ldr	r0, [pc, #528]	@ (8001abc <main+0x31c>)
 80018ac:	f7ff ff49 	bl	8001742 <lcd16x2_i2c_printf>
				  lcd16x2_i2c_2ndLine();
 80018b0:	f7ff ff2c 	bl	800170c <lcd16x2_i2c_2ndLine>
				  lcd16x2_i2c_printf("wynosi: %4d%%.  ", pwmValue);
 80018b4:	4b82      	ldr	r3, [pc, #520]	@ (8001ac0 <main+0x320>)
 80018b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ba:	4619      	mov	r1, r3
 80018bc:	4881      	ldr	r0, [pc, #516]	@ (8001ac4 <main+0x324>)
 80018be:	f7ff ff40 	bl	8001742 <lcd16x2_i2c_printf>
				  break;
 80018c2:	e0a0      	b.n	8001a06 <main+0x266>

			  case 11:
				  // Powrót do wyświetlania wartości
				  __HAL_TIM_SET_COUNTER(&htim1, 2);
 80018c4:	4b76      	ldr	r3, [pc, #472]	@ (8001aa0 <main+0x300>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2202      	movs	r2, #2
 80018ca:	625a      	str	r2, [r3, #36]	@ 0x24
				  impulse = 2;
 80018cc:	4b7a      	ldr	r3, [pc, #488]	@ (8001ab8 <main+0x318>)
 80018ce:	2202      	movs	r2, #2
 80018d0:	701a      	strb	r2, [r3, #0]

				  // Zadanie wartości PWM
				  pwmValue = setPWM;
 80018d2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80018d6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ac0 <main+0x320>)
 80018d8:	801a      	strh	r2, [r3, #0]
				  if (HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin) == GPIO_PIN_RESET)
 80018da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018de:	4874      	ldr	r0, [pc, #464]	@ (8001ab0 <main+0x310>)
 80018e0:	f002 fb9a 	bl	8004018 <HAL_GPIO_ReadPin>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d105      	bne.n	80018f6 <main+0x156>
				  {
					  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmValue);
 80018ea:	4b75      	ldr	r3, [pc, #468]	@ (8001ac0 <main+0x320>)
 80018ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018f0:	4b69      	ldr	r3, [pc, #420]	@ (8001a98 <main+0x2f8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	641a      	str	r2, [r3, #64]	@ 0x40
				  }

				  // Zmiana trybu na zadanie PWM
				  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80018f6:	2201      	movs	r2, #1
 80018f8:	2180      	movs	r1, #128	@ 0x80
 80018fa:	486d      	ldr	r0, [pc, #436]	@ (8001ab0 <main+0x310>)
 80018fc:	f002 fba4 	bl	8004048 <HAL_GPIO_WritePin>

				  // Obsługa wyświetlacza
				  lcd16x2_i2c_1stLine();
 8001900:	f7ff fefc 	bl	80016fc <lcd16x2_i2c_1stLine>
				  lcd16x2_i2c_printf("Wypelnienie PWM ");
 8001904:	486d      	ldr	r0, [pc, #436]	@ (8001abc <main+0x31c>)
 8001906:	f7ff ff1c 	bl	8001742 <lcd16x2_i2c_printf>
				  lcd16x2_i2c_2ndLine();
 800190a:	f7ff feff 	bl	800170c <lcd16x2_i2c_2ndLine>
				  lcd16x2_i2c_printf("wynosi: %4d%%.  ", pwmValue);
 800190e:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac0 <main+0x320>)
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	4619      	mov	r1, r3
 8001916:	486b      	ldr	r0, [pc, #428]	@ (8001ac4 <main+0x324>)
 8001918:	f7ff ff13 	bl	8001742 <lcd16x2_i2c_printf>
				  break;
 800191c:	e073      	b.n	8001a06 <main+0x266>

			  case 12:
				  // Powrót do wyświetlania wartości
				  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800191e:	4b60      	ldr	r3, [pc, #384]	@ (8001aa0 <main+0x300>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24
				  impulse = 0;
 8001926:	4b64      	ldr	r3, [pc, #400]	@ (8001ab8 <main+0x318>)
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]

				  if (temperature >= 0.0f && temperature <= 100.0f )
 800192c:	4b66      	ldr	r3, [pc, #408]	@ (8001ac8 <main+0x328>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193a:	db1b      	blt.n	8001974 <main+0x1d4>
 800193c:	4b62      	ldr	r3, [pc, #392]	@ (8001ac8 <main+0x328>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8001acc <main+0x32c>
 8001946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194e:	d811      	bhi.n	8001974 <main+0x1d4>
				  {
					  // Obsługa wyświetlacza
					  lcd16x2_i2c_1stLine();
 8001950:	f7ff fed4 	bl	80016fc <lcd16x2_i2c_1stLine>
					  lcd16x2_i2c_printf("Temp. wynosi:   ");
 8001954:	485e      	ldr	r0, [pc, #376]	@ (8001ad0 <main+0x330>)
 8001956:	f7ff fef4 	bl	8001742 <lcd16x2_i2c_printf>
					  lcd16x2_i2c_2ndLine();
 800195a:	f7ff fed7 	bl	800170c <lcd16x2_i2c_2ndLine>
					  lcd16x2_i2c_printf("%6.2f stopni C.", temperature);
 800195e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ac8 <main+0x328>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fe10 	bl	8000588 <__aeabi_f2d>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4859      	ldr	r0, [pc, #356]	@ (8001ad4 <main+0x334>)
 800196e:	f7ff fee8 	bl	8001742 <lcd16x2_i2c_printf>
					  lcd16x2_i2c_1stLine();
					  lcd16x2_i2c_printf("Temperatura poza");
					  lcd16x2_i2c_2ndLine();
					  lcd16x2_i2c_printf("zakresem        ");
				  }
				  break;
 8001972:	e048      	b.n	8001a06 <main+0x266>
					  lcd16x2_i2c_1stLine();
 8001974:	f7ff fec2 	bl	80016fc <lcd16x2_i2c_1stLine>
					  lcd16x2_i2c_printf("Temperatura poza");
 8001978:	4857      	ldr	r0, [pc, #348]	@ (8001ad8 <main+0x338>)
 800197a:	f7ff fee2 	bl	8001742 <lcd16x2_i2c_printf>
					  lcd16x2_i2c_2ndLine();
 800197e:	f7ff fec5 	bl	800170c <lcd16x2_i2c_2ndLine>
					  lcd16x2_i2c_printf("zakresem        ");
 8001982:	4856      	ldr	r0, [pc, #344]	@ (8001adc <main+0x33c>)
 8001984:	f7ff fedd 	bl	8001742 <lcd16x2_i2c_printf>
				  break;
 8001988:	e03d      	b.n	8001a06 <main+0x266>

			  case 13:
				  // Powrót do wyświetlania wartości
				  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800198a:	4b45      	ldr	r3, [pc, #276]	@ (8001aa0 <main+0x300>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	@ 0x24
				  impulse = 0;
 8001992:	4b49      	ldr	r3, [pc, #292]	@ (8001ab8 <main+0x318>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]

				  // Zadanie wartości temperatury
				  set_point = setTemperature;
 8001998:	4a51      	ldr	r2, [pc, #324]	@ (8001ae0 <main+0x340>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6013      	str	r3, [r2, #0]

				  // Zmiana trybu na zadanie temperatury
				  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2180      	movs	r1, #128	@ 0x80
 80019a2:	4843      	ldr	r0, [pc, #268]	@ (8001ab0 <main+0x310>)
 80019a4:	f002 fb50 	bl	8004048 <HAL_GPIO_WritePin>

				  if (temperature >= 0.0f && temperature <= 100.0f )
 80019a8:	4b47      	ldr	r3, [pc, #284]	@ (8001ac8 <main+0x328>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b6:	db1b      	blt.n	80019f0 <main+0x250>
 80019b8:	4b43      	ldr	r3, [pc, #268]	@ (8001ac8 <main+0x328>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001acc <main+0x32c>
 80019c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	d811      	bhi.n	80019f0 <main+0x250>
				  {
					  // Obsługa wyświetlacza
					  lcd16x2_i2c_1stLine();
 80019cc:	f7ff fe96 	bl	80016fc <lcd16x2_i2c_1stLine>
					  lcd16x2_i2c_printf("Temp. wynosi:   ");
 80019d0:	483f      	ldr	r0, [pc, #252]	@ (8001ad0 <main+0x330>)
 80019d2:	f7ff feb6 	bl	8001742 <lcd16x2_i2c_printf>
					  lcd16x2_i2c_2ndLine();
 80019d6:	f7ff fe99 	bl	800170c <lcd16x2_i2c_2ndLine>
					  lcd16x2_i2c_printf("%6.2f stopni C.", temperature);
 80019da:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac8 <main+0x328>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fdd2 	bl	8000588 <__aeabi_f2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	483a      	ldr	r0, [pc, #232]	@ (8001ad4 <main+0x334>)
 80019ea:	f7ff feaa 	bl	8001742 <lcd16x2_i2c_printf>
					  lcd16x2_i2c_1stLine();
					  lcd16x2_i2c_printf("Temperatura poza");
					  lcd16x2_i2c_2ndLine();
					  lcd16x2_i2c_printf("zakresem        ");
				  }
				  break;
 80019ee:	e009      	b.n	8001a04 <main+0x264>
					  lcd16x2_i2c_1stLine();
 80019f0:	f7ff fe84 	bl	80016fc <lcd16x2_i2c_1stLine>
					  lcd16x2_i2c_printf("Temperatura poza");
 80019f4:	4838      	ldr	r0, [pc, #224]	@ (8001ad8 <main+0x338>)
 80019f6:	f7ff fea4 	bl	8001742 <lcd16x2_i2c_printf>
					  lcd16x2_i2c_2ndLine();
 80019fa:	f7ff fe87 	bl	800170c <lcd16x2_i2c_2ndLine>
					  lcd16x2_i2c_printf("zakresem        ");
 80019fe:	4837      	ldr	r0, [pc, #220]	@ (8001adc <main+0x33c>)
 8001a00:	f7ff fe9f 	bl	8001742 <lcd16x2_i2c_printf>
				  break;
 8001a04:	bf00      	nop
		  }
	  }

	  switch(impulse)
 8001a06:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab8 <main+0x318>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	3b0a      	subs	r3, #10
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	f200 8125 	bhi.w	8001c5c <main+0x4bc>
 8001a12:	a201      	add	r2, pc, #4	@ (adr r2, 8001a18 <main+0x278>)
 8001a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a18:	08001a29 	.word	0x08001a29
 8001a1c:	08001af5 	.word	0x08001af5
 8001a20:	08001b61 	.word	0x08001b61
 8001a24:	08001bdf 	.word	0x08001bdf
	  {
	  	  case 10:
	  		  // Sczytanie wartości z potencjometru
	  		  HAL_ADC_Start(&hadc1);
 8001a28:	482e      	ldr	r0, [pc, #184]	@ (8001ae4 <main+0x344>)
 8001a2a:	f001 fbef 	bl	800320c <HAL_ADC_Start>
	  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001a32:	482c      	ldr	r0, [pc, #176]	@ (8001ae4 <main+0x344>)
 8001a34:	f001 fcb8 	bl	80033a8 <HAL_ADC_PollForConversion>
	  		  if (abs(adcValue - HAL_ADC_GetValue(&hadc1)) > 8)
 8001a38:	89bc      	ldrh	r4, [r7, #12]
 8001a3a:	482a      	ldr	r0, [pc, #168]	@ (8001ae4 <main+0x344>)
 8001a3c:	f001 fd3f 	bl	80034be <HAL_ADC_GetValue>
 8001a40:	4603      	mov	r3, r0
 8001a42:	1ae3      	subs	r3, r4, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bfb8      	it	lt
 8001a48:	425b      	neglt	r3, r3
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	dd11      	ble.n	8001a72 <main+0x2d2>
	  		  {
	  			  adcValue = HAL_ADC_GetValue(&hadc1);
 8001a4e:	4825      	ldr	r0, [pc, #148]	@ (8001ae4 <main+0x344>)
 8001a50:	f001 fd35 	bl	80034be <HAL_ADC_GetValue>
 8001a54:	4603      	mov	r3, r0
 8001a56:	81bb      	strh	r3, [r7, #12]
	  			  setPWM = adcValue*1000/4095;
 8001a58:	89bb      	ldrh	r3, [r7, #12]
 8001a5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	4a21      	ldr	r2, [pc, #132]	@ (8001ae8 <main+0x348>)
 8001a64:	fb82 1203 	smull	r1, r2, r2, r3
 8001a68:	441a      	add	r2, r3
 8001a6a:	12d2      	asrs	r2, r2, #11
 8001a6c:	17db      	asrs	r3, r3, #31
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	817b      	strh	r3, [r7, #10]
	  		  }

	  		  // Obsługa wyświetlacza
	  		  lcd16x2_i2c_1stLine();
 8001a72:	f7ff fe43 	bl	80016fc <lcd16x2_i2c_1stLine>
	  		  lcd16x2_i2c_printf("Zadac PWM %4d?:", setPWM);
 8001a76:	897b      	ldrh	r3, [r7, #10]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	481c      	ldr	r0, [pc, #112]	@ (8001aec <main+0x34c>)
 8001a7c:	f7ff fe61 	bl	8001742 <lcd16x2_i2c_printf>
	  		  lcd16x2_i2c_2ndLine();
 8001a80:	f7ff fe44 	bl	800170c <lcd16x2_i2c_2ndLine>
	  		  lcd16x2_i2c_printf(" Tak  Nie       ");
 8001a84:	481a      	ldr	r0, [pc, #104]	@ (8001af0 <main+0x350>)
 8001a86:	f7ff fe5c 	bl	8001742 <lcd16x2_i2c_printf>
	  		  lcd16x2_i2c_setCursor(1, 5);
 8001a8a:	2105      	movs	r1, #5
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f7ff fe11 	bl	80016b4 <lcd16x2_i2c_setCursor>
		  	  break;
 8001a92:	e0e3      	b.n	8001c5c <main+0x4bc>
 8001a94:	200002a0 	.word	0x200002a0
 8001a98:	20000360 	.word	0x20000360
 8001a9c:	200003ac 	.word	0x200003ac
 8001aa0:	20000314 	.word	0x20000314
 8001aa4:	2000030a 	.word	0x2000030a
 8001aa8:	200002fc 	.word	0x200002fc
 8001aac:	200003f8 	.word	0x200003f8
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	41a00000 	.word	0x41a00000
 8001ab8:	2000030b 	.word	0x2000030b
 8001abc:	0800d4c0 	.word	0x0800d4c0
 8001ac0:	20000308 	.word	0x20000308
 8001ac4:	0800d4d4 	.word	0x0800d4d4
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	42c80000 	.word	0x42c80000
 8001ad0:	0800d4e8 	.word	0x0800d4e8
 8001ad4:	0800d4fc 	.word	0x0800d4fc
 8001ad8:	0800d50c 	.word	0x0800d50c
 8001adc:	0800d520 	.word	0x0800d520
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	20000210 	.word	0x20000210
 8001ae8:	80080081 	.word	0x80080081
 8001aec:	0800d534 	.word	0x0800d534
 8001af0:	0800d544 	.word	0x0800d544

	  	  case 11:
	  		  // Sczytanie wartości z potencjometru
	  		  HAL_ADC_Start(&hadc1);
 8001af4:	4860      	ldr	r0, [pc, #384]	@ (8001c78 <main+0x4d8>)
 8001af6:	f001 fb89 	bl	800320c <HAL_ADC_Start>
	  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001afa:	f04f 31ff 	mov.w	r1, #4294967295
 8001afe:	485e      	ldr	r0, [pc, #376]	@ (8001c78 <main+0x4d8>)
 8001b00:	f001 fc52 	bl	80033a8 <HAL_ADC_PollForConversion>
	  		  if (abs(adcValue - HAL_ADC_GetValue(&hadc1)) > 8)
 8001b04:	89bc      	ldrh	r4, [r7, #12]
 8001b06:	485c      	ldr	r0, [pc, #368]	@ (8001c78 <main+0x4d8>)
 8001b08:	f001 fcd9 	bl	80034be <HAL_ADC_GetValue>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	1ae3      	subs	r3, r4, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	bfb8      	it	lt
 8001b14:	425b      	neglt	r3, r3
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	dd11      	ble.n	8001b3e <main+0x39e>
	  		  {
	  			  adcValue = HAL_ADC_GetValue(&hadc1);
 8001b1a:	4857      	ldr	r0, [pc, #348]	@ (8001c78 <main+0x4d8>)
 8001b1c:	f001 fccf 	bl	80034be <HAL_ADC_GetValue>
 8001b20:	4603      	mov	r3, r0
 8001b22:	81bb      	strh	r3, [r7, #12]
	  			  setPWM = adcValue*1000/4095;
 8001b24:	89bb      	ldrh	r3, [r7, #12]
 8001b26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	4a53      	ldr	r2, [pc, #332]	@ (8001c7c <main+0x4dc>)
 8001b30:	fb82 1203 	smull	r1, r2, r2, r3
 8001b34:	441a      	add	r2, r3
 8001b36:	12d2      	asrs	r2, r2, #11
 8001b38:	17db      	asrs	r3, r3, #31
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	817b      	strh	r3, [r7, #10]
	  		  }

	  		  // Obsługa wyświetlacza
	  		  lcd16x2_i2c_1stLine();
 8001b3e:	f7ff fddd 	bl	80016fc <lcd16x2_i2c_1stLine>
	  		  lcd16x2_i2c_printf("Zadac PWM %4d?:", setPWM);
 8001b42:	897b      	ldrh	r3, [r7, #10]
 8001b44:	4619      	mov	r1, r3
 8001b46:	484e      	ldr	r0, [pc, #312]	@ (8001c80 <main+0x4e0>)
 8001b48:	f7ff fdfb 	bl	8001742 <lcd16x2_i2c_printf>
	  		  lcd16x2_i2c_2ndLine();
 8001b4c:	f7ff fdde 	bl	800170c <lcd16x2_i2c_2ndLine>
	  		  lcd16x2_i2c_printf(" Tak  Nie       ");
 8001b50:	484c      	ldr	r0, [pc, #304]	@ (8001c84 <main+0x4e4>)
 8001b52:	f7ff fdf6 	bl	8001742 <lcd16x2_i2c_printf>
	  		  lcd16x2_i2c_setCursor(1, 0);
 8001b56:	2100      	movs	r1, #0
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f7ff fdab 	bl	80016b4 <lcd16x2_i2c_setCursor>
	  		  break;
 8001b5e:	e07d      	b.n	8001c5c <main+0x4bc>

	  	  case 12:
	  		// Sczytanie wartości z potencjometru
	  		  HAL_ADC_Start(&hadc1);
 8001b60:	4845      	ldr	r0, [pc, #276]	@ (8001c78 <main+0x4d8>)
 8001b62:	f001 fb53 	bl	800320c <HAL_ADC_Start>
	  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001b66:	f04f 31ff 	mov.w	r1, #4294967295
 8001b6a:	4843      	ldr	r0, [pc, #268]	@ (8001c78 <main+0x4d8>)
 8001b6c:	f001 fc1c 	bl	80033a8 <HAL_ADC_PollForConversion>
	  		  if (abs(adcValue - HAL_ADC_GetValue(&hadc1)) > 8)
 8001b70:	89bc      	ldrh	r4, [r7, #12]
 8001b72:	4841      	ldr	r0, [pc, #260]	@ (8001c78 <main+0x4d8>)
 8001b74:	f001 fca3 	bl	80034be <HAL_ADC_GetValue>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	1ae3      	subs	r3, r4, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bfb8      	it	lt
 8001b80:	425b      	neglt	r3, r3
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	dd17      	ble.n	8001bb6 <main+0x416>
	  		  {
	  			  adcValue = HAL_ADC_GetValue(&hadc1);
 8001b86:	483c      	ldr	r0, [pc, #240]	@ (8001c78 <main+0x4d8>)
 8001b88:	f001 fc99 	bl	80034be <HAL_ADC_GetValue>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	81bb      	strh	r3, [r7, #12]
	  			  setTemperature = (float)adcValue*(maxSetTemperature - minSetTemperature)/4095.0f + minSetTemperature;
 8001b90:	89bb      	ldrh	r3, [r7, #12]
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b9a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001b9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ba2:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8001c88 <main+0x4e8>
 8001ba6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001baa:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001bae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bb2:	edc7 7a01 	vstr	s15, [r7, #4]
	  		  }

	  		  // Obsługa wyświetlacza
	  		  lcd16x2_i2c_1stLine();
 8001bb6:	f7ff fda1 	bl	80016fc <lcd16x2_i2c_1stLine>
	  		  lcd16x2_i2c_printf("Zadac temp.  Tak");
 8001bba:	4834      	ldr	r0, [pc, #208]	@ (8001c8c <main+0x4ec>)
 8001bbc:	f7ff fdc1 	bl	8001742 <lcd16x2_i2c_printf>
	  		  lcd16x2_i2c_2ndLine();
 8001bc0:	f7ff fda4 	bl	800170c <lcd16x2_i2c_2ndLine>
	  		  lcd16x2_i2c_printf("%6.2f?:     Nie", setTemperature);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7fe fcdf 	bl	8000588 <__aeabi_f2d>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4830      	ldr	r0, [pc, #192]	@ (8001c90 <main+0x4f0>)
 8001bd0:	f7ff fdb7 	bl	8001742 <lcd16x2_i2c_printf>
	  		  lcd16x2_i2c_setCursor(1, 12);
 8001bd4:	210c      	movs	r1, #12
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f7ff fd6c 	bl	80016b4 <lcd16x2_i2c_setCursor>
		  	  break;
 8001bdc:	e03e      	b.n	8001c5c <main+0x4bc>

	  	  case 13:
	  		// Sczytanie wartości z potencjometru
	  		  HAL_ADC_Start(&hadc1);
 8001bde:	4826      	ldr	r0, [pc, #152]	@ (8001c78 <main+0x4d8>)
 8001be0:	f001 fb14 	bl	800320c <HAL_ADC_Start>
	  		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	4823      	ldr	r0, [pc, #140]	@ (8001c78 <main+0x4d8>)
 8001bea:	f001 fbdd 	bl	80033a8 <HAL_ADC_PollForConversion>
	  		  if (abs(adcValue - HAL_ADC_GetValue(&hadc1)) > 8)
 8001bee:	89bc      	ldrh	r4, [r7, #12]
 8001bf0:	4821      	ldr	r0, [pc, #132]	@ (8001c78 <main+0x4d8>)
 8001bf2:	f001 fc64 	bl	80034be <HAL_ADC_GetValue>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	1ae3      	subs	r3, r4, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	bfb8      	it	lt
 8001bfe:	425b      	neglt	r3, r3
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	dd17      	ble.n	8001c34 <main+0x494>
	  		  {
	  			  adcValue = HAL_ADC_GetValue(&hadc1);
 8001c04:	481c      	ldr	r0, [pc, #112]	@ (8001c78 <main+0x4d8>)
 8001c06:	f001 fc5a 	bl	80034be <HAL_ADC_GetValue>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	81bb      	strh	r3, [r7, #12]
	  			  setTemperature = (float)adcValue*(maxSetTemperature - minSetTemperature)/4095.0f + minSetTemperature;
 8001c0e:	89bb      	ldrh	r3, [r7, #12]
 8001c10:	ee07 3a90 	vmov	s15, r3
 8001c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c18:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001c1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c20:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001c88 <main+0x4e8>
 8001c24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c28:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001c2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c30:	edc7 7a01 	vstr	s15, [r7, #4]
	  		  }

	  		  // Obsługa wyświetlacza
	  		  lcd16x2_i2c_1stLine();
 8001c34:	f7ff fd62 	bl	80016fc <lcd16x2_i2c_1stLine>
	  		  lcd16x2_i2c_printf("Zadac temp.  Tak");
 8001c38:	4814      	ldr	r0, [pc, #80]	@ (8001c8c <main+0x4ec>)
 8001c3a:	f7ff fd82 	bl	8001742 <lcd16x2_i2c_printf>
	  		  lcd16x2_i2c_2ndLine();
 8001c3e:	f7ff fd65 	bl	800170c <lcd16x2_i2c_2ndLine>
	  		  lcd16x2_i2c_printf("%6.2f?:     Nie", setTemperature);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7fe fca0 	bl	8000588 <__aeabi_f2d>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4810      	ldr	r0, [pc, #64]	@ (8001c90 <main+0x4f0>)
 8001c4e:	f7ff fd78 	bl	8001742 <lcd16x2_i2c_printf>
	  		  lcd16x2_i2c_setCursor(0, 12);
 8001c52:	210c      	movs	r1, #12
 8001c54:	2000      	movs	r0, #0
 8001c56:	f7ff fd2d 	bl	80016b4 <lcd16x2_i2c_setCursor>
		  	  break;
 8001c5a:	bf00      	nop
	  }

	  raise = HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin);
 8001c5c:	2110      	movs	r1, #16
 8001c5e:	480d      	ldr	r0, [pc, #52]	@ (8001c94 <main+0x4f4>)
 8001c60:	f002 f9da 	bl	8004018 <HAL_GPIO_ReadPin>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bf14      	ite	ne
 8001c6a:	2301      	movne	r3, #1
 8001c6c:	2300      	moveq	r3, #0
 8001c6e:	73fb      	strb	r3, [r7, #15]

	  HAL_Delay(100);
 8001c70:	2064      	movs	r0, #100	@ 0x64
 8001c72:	f001 fa63 	bl	800313c <HAL_Delay>
	  if (HAL_GPIO_ReadPin(SELECT_GPIO_Port, SELECT_Pin) == GPIO_PIN_SET && raise == GPIO_PIN_RESET)
 8001c76:	e5d4      	b.n	8001822 <main+0x82>
 8001c78:	20000210 	.word	0x20000210
 8001c7c:	80080081 	.word	0x80080081
 8001c80:	0800d534 	.word	0x0800d534
 8001c84:	0800d544 	.word	0x0800d544
 8001c88:	457ff000 	.word	0x457ff000
 8001c8c:	0800d558 	.word	0x0800d558
 8001c90:	0800d56c 	.word	0x0800d56c
 8001c94:	40020400 	.word	0x40020400

08001c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b094      	sub	sp, #80	@ 0x50
 8001c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9e:	f107 0320 	add.w	r3, r7, #32
 8001ca2:	2230      	movs	r2, #48	@ 0x30
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f008 feb0 	bl	800aa0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001cbc:	f003 f89c 	bl	8004df8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc0:	4b27      	ldr	r3, [pc, #156]	@ (8001d60 <SystemClock_Config+0xc8>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc4:	4a26      	ldr	r2, [pc, #152]	@ (8001d60 <SystemClock_Config+0xc8>)
 8001cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cca:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ccc:	4b24      	ldr	r3, [pc, #144]	@ (8001d60 <SystemClock_Config+0xc8>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001cd8:	4b22      	ldr	r3, [pc, #136]	@ (8001d64 <SystemClock_Config+0xcc>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ce0:	4a20      	ldr	r2, [pc, #128]	@ (8001d64 <SystemClock_Config+0xcc>)
 8001ce2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d64 <SystemClock_Config+0xcc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cf8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001d0c:	2348      	movs	r3, #72	@ 0x48
 8001d0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d10:	2302      	movs	r3, #2
 8001d12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001d14:	2303      	movs	r3, #3
 8001d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d18:	f107 0320 	add.w	r3, r7, #32
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 f87b 	bl	8004e18 <HAL_RCC_OscConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d28:	f000 fd2a 	bl	8002780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2c:	230f      	movs	r3, #15
 8001d2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d30:	2302      	movs	r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	2102      	movs	r1, #2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fb09 	bl	8005360 <HAL_RCC_ClockConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d54:	f000 fd14 	bl	8002780 <Error_Handler>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3750      	adds	r7, #80	@ 0x50
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40007000 	.word	0x40007000

08001d68 <UART_SendData>:

/* USER CODE BEGIN 4 */
// Funkcja do wysyłania danych przez UART
void UART_SendData(float temp)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b092      	sub	sp, #72	@ 0x48
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	ed87 0a01 	vstr	s0, [r7, #4]
    char buffer[50];
    int len = snprintf(buffer, sizeof(buffer), "temp=%.2f\n", temp);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7fe fc08 	bl	8000588 <__aeabi_f2d>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	f107 0008 	add.w	r0, r7, #8
 8001d80:	e9cd 2300 	strd	r2, r3, [sp]
 8001d84:	4a08      	ldr	r2, [pc, #32]	@ (8001da8 <UART_SendData+0x40>)
 8001d86:	2132      	movs	r1, #50	@ 0x32
 8001d88:	f008 fd88 	bl	800a89c <sniprintf>
 8001d8c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, len, 50);
 8001d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	f107 0108 	add.w	r1, r7, #8
 8001d96:	2332      	movs	r3, #50	@ 0x32
 8001d98:	4804      	ldr	r0, [pc, #16]	@ (8001dac <UART_SendData+0x44>)
 8001d9a:	f005 fc3f 	bl	800761c <HAL_UART_Transmit>
}
 8001d9e:	bf00      	nop
 8001da0:	3740      	adds	r7, #64	@ 0x40
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	0800d57c 	.word	0x0800d57c
 8001dac:	200003f8 	.word	0x200003f8

08001db0 <calculate_discrete_pid>:
* @param [in] setpoint Input setpoint value
* @param [in] measured Input measured value
* @return PID output value
**/
// Algorytm regulatora
float32_t calculate_discrete_pid(pid_t* pid, float32_t setpoint, float32_t measured) {
 8001db0:	b480      	push	{r7}
 8001db2:	b08d      	sub	sp, #52	@ 0x34
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001dbc:	edc7 0a01 	vstr	s1, [r7, #4]
    float32_t u = 0.0f, P, I, D, error, integral, derivative;
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    error = setpoint - measured;
 8001dc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8001dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // proportional part
    P = pid->p.Kp * error;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	edd3 7a00 	vldr	s15, [r3]
 8001ddc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // integral part
    integral = pid->previous_integral + (error + pid->previous_error); // numerical integrator without anti-windup
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	ed93 7a05 	vldr	s14, [r3, #20]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	edd3 6a04 	vldr	s13, [r3, #16]
 8001df4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e00:	edc7 7a08 	vstr	s15, [r7, #32]
    pid->previous_integral = integral;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6a3a      	ldr	r2, [r7, #32]
 8001e08:	615a      	str	r2, [r3, #20]
    I = pid->p.Ki * integral * (pid->p.dt / 2.0f);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e10:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e1e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001e22:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2a:	edc7 7a07 	vstr	s15, [r7, #28]

    // derivative part
    derivative = (error - pid->previous_error) / pid->p.dt; // numerical derivative without filter
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e34:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001e38:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e46:	edc7 7a06 	vstr	s15, [r7, #24]
    pid->previous_error = error;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e4e:	611a      	str	r2, [r3, #16]
    D = pid->p.Kd * derivative;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e56:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5e:	edc7 7a05 	vstr	s15, [r7, #20]

    // sum of all parts
    u = P + I + D; // without saturation
 8001e62:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001e66:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e76:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    return u;
 8001e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e7c:	ee07 3a90 	vmov	s15, r3
}
 8001e80:	eeb0 0a67 	vmov.f32	s0, s15
 8001e84:	3734      	adds	r7, #52	@ 0x34
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_TIM_PeriodElapsedCallback>:

// Pomiar temperatury, aktualizowanie danych o pomiar, regulacja PWM
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b098      	sub	sp, #96	@ 0x60
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    // Odczyt temperatury
	HAL_ADC_Start(&hadc2);
 8001e98:	489b      	ldr	r0, [pc, #620]	@ (8002108 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001e9a:	f001 f9b7 	bl	800320c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea2:	4899      	ldr	r0, [pc, #612]	@ (8002108 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ea4:	f001 fa80 	bl	80033a8 <HAL_ADC_PollForConversion>
	uint16_t adcTemperature = HAL_ADC_GetValue(&hadc2);
 8001ea8:	4897      	ldr	r0, [pc, #604]	@ (8002108 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001eaa:	f001 fb08 	bl	80034be <HAL_ADC_GetValue>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    temperature = adcTemperature*3.3f/0.01f/4095.0f;
 8001eb4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8001eb8:	ee07 3a90 	vmov	s15, r3
 8001ebc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec0:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 800210c <HAL_TIM_PeriodElapsedCallback+0x27c>
 8001ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec8:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8002110 <HAL_TIM_PeriodElapsedCallback+0x280>
 8001ecc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ed0:	eddf 6a90 	vldr	s13, [pc, #576]	@ 8002114 <HAL_TIM_PeriodElapsedCallback+0x284>
 8001ed4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed8:	4b8f      	ldr	r3, [pc, #572]	@ (8002118 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001eda:	edc3 7a00 	vstr	s15, [r3]

    // Sprawdzanie poprawności odczytu
    if (temperature >= 0.0f && temperature <= 100.0f )
 8001ede:	4b8e      	ldr	r3, [pc, #568]	@ (8002118 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eec:	f2c0 80c3 	blt.w	8002076 <HAL_TIM_PeriodElapsedCallback+0x1e6>
 8001ef0:	4b89      	ldr	r3, [pc, #548]	@ (8002118 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001ef2:	edd3 7a00 	vldr	s15, [r3]
 8001ef6:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 800211c <HAL_TIM_PeriodElapsedCallback+0x28c>
 8001efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f02:	f200 80b8 	bhi.w	8002076 <HAL_TIM_PeriodElapsedCallback+0x1e6>
    {
        // Wysyłanie danych przez UART
        UART_SendData(temperature);
 8001f06:	4b84      	ldr	r3, [pc, #528]	@ (8002118 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f10:	f7ff ff2a 	bl	8001d68 <UART_SendData>

        switch (impulse)
 8001f14:	4b82      	ldr	r3, [pc, #520]	@ (8002120 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2b06      	cmp	r3, #6
 8001f1a:	d85d      	bhi.n	8001fd8 <HAL_TIM_PeriodElapsedCallback+0x148>
 8001f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f24 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f22:	bf00      	nop
 8001f24:	08001f41 	.word	0x08001f41
 8001f28:	08001fd9 	.word	0x08001fd9
 8001f2c:	08001f65 	.word	0x08001f65
 8001f30:	08001fd9 	.word	0x08001fd9
 8001f34:	08001f83 	.word	0x08001f83
 8001f38:	08001fd9 	.word	0x08001fd9
 8001f3c:	08001fb5 	.word	0x08001fb5
        {
        	case 0:
        		// Obsługa wyświetlacza
    	        lcd16x2_i2c_1stLine();
 8001f40:	f7ff fbdc 	bl	80016fc <lcd16x2_i2c_1stLine>
    	        lcd16x2_i2c_printf("Temp. wynosi:   ");
 8001f44:	4877      	ldr	r0, [pc, #476]	@ (8002124 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001f46:	f7ff fbfc 	bl	8001742 <lcd16x2_i2c_printf>
    	        lcd16x2_i2c_2ndLine();
 8001f4a:	f7ff fbdf 	bl	800170c <lcd16x2_i2c_2ndLine>
    	        lcd16x2_i2c_printf("%6.2f stopni C.", temperature);
 8001f4e:	4b72      	ldr	r3, [pc, #456]	@ (8002118 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fb18 	bl	8000588 <__aeabi_f2d>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4872      	ldr	r0, [pc, #456]	@ (8002128 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001f5e:	f7ff fbf0 	bl	8001742 <lcd16x2_i2c_printf>
        		break;
 8001f62:	e039      	b.n	8001fd8 <HAL_TIM_PeriodElapsedCallback+0x148>

        	case 2:
        		// Obsługa wyświetlacza
				lcd16x2_i2c_1stLine();
 8001f64:	f7ff fbca 	bl	80016fc <lcd16x2_i2c_1stLine>
				lcd16x2_i2c_printf("Wypelnienie PWM ");
 8001f68:	4870      	ldr	r0, [pc, #448]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001f6a:	f7ff fbea 	bl	8001742 <lcd16x2_i2c_printf>
				lcd16x2_i2c_2ndLine();
 8001f6e:	f7ff fbcd 	bl	800170c <lcd16x2_i2c_2ndLine>
				lcd16x2_i2c_printf("wynosi: %4d%%.  ", pwmValue);
 8001f72:	4b6f      	ldr	r3, [pc, #444]	@ (8002130 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	486e      	ldr	r0, [pc, #440]	@ (8002134 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001f7c:	f7ff fbe1 	bl	8001742 <lcd16x2_i2c_printf>
        		break;
 8001f80:	e02a      	b.n	8001fd8 <HAL_TIM_PeriodElapsedCallback+0x148>

        	case 4:
        		// Obsługa wyświetlacza
				lcd16x2_i2c_1stLine();
 8001f82:	f7ff fbbb 	bl	80016fc <lcd16x2_i2c_1stLine>
				lcd16x2_i2c_printf("Uchyb temp.:    ");
 8001f86:	486c      	ldr	r0, [pc, #432]	@ (8002138 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001f88:	f7ff fbdb 	bl	8001742 <lcd16x2_i2c_printf>
				lcd16x2_i2c_2ndLine();
 8001f8c:	f7ff fbbe 	bl	800170c <lcd16x2_i2c_2ndLine>
				lcd16x2_i2c_printf("%6.2f stopni C.", set_point - temperature);
 8001f90:	4b6a      	ldr	r3, [pc, #424]	@ (800213c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001f92:	ed93 7a00 	vldr	s14, [r3]
 8001f96:	4b60      	ldr	r3, [pc, #384]	@ (8002118 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa0:	ee17 0a90 	vmov	r0, s15
 8001fa4:	f7fe faf0 	bl	8000588 <__aeabi_f2d>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	485e      	ldr	r0, [pc, #376]	@ (8002128 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001fae:	f7ff fbc8 	bl	8001742 <lcd16x2_i2c_printf>
        		break;
 8001fb2:	e011      	b.n	8001fd8 <HAL_TIM_PeriodElapsedCallback+0x148>

        	case 6:
        		// Obsługa wyświetlacza
				lcd16x2_i2c_1stLine();
 8001fb4:	f7ff fba2 	bl	80016fc <lcd16x2_i2c_1stLine>
				lcd16x2_i2c_printf("Zadana temp.:   ");
 8001fb8:	4861      	ldr	r0, [pc, #388]	@ (8002140 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001fba:	f7ff fbc2 	bl	8001742 <lcd16x2_i2c_printf>
				lcd16x2_i2c_2ndLine();
 8001fbe:	f7ff fba5 	bl	800170c <lcd16x2_i2c_2ndLine>
				lcd16x2_i2c_printf("%6.2f stopni C.", set_point);
 8001fc2:	4b5e      	ldr	r3, [pc, #376]	@ (800213c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fade 	bl	8000588 <__aeabi_f2d>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4855      	ldr	r0, [pc, #340]	@ (8002128 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001fd2:	f7ff fbb6 	bl	8001742 <lcd16x2_i2c_printf>
        		break;
 8001fd6:	bf00      	nop
        }

        if(HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin) == GPIO_PIN_RESET)
 8001fd8:	2180      	movs	r1, #128	@ 0x80
 8001fda:	485a      	ldr	r0, [pc, #360]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001fdc:	f002 f81c 	bl	8004018 <HAL_GPIO_ReadPin>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 8086 	bne.w	80020f4 <HAL_TIM_PeriodElapsedCallback+0x264>
 8001fe8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001fec:	4855      	ldr	r0, [pc, #340]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001fee:	f002 f813 	bl	8004018 <HAL_GPIO_ReadPin>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d17d      	bne.n	80020f4 <HAL_TIM_PeriodElapsedCallback+0x264>
        {
			// Calculate controller output
			// Użycie algorytmu regulatora
			float pwm_duty_f = (1000.0f*calculate_discrete_pid(&pid1, set_point, temperature));
 8001ff8:	4b50      	ldr	r3, [pc, #320]	@ (800213c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001ffa:	edd3 7a00 	vldr	s15, [r3]
 8001ffe:	4b46      	ldr	r3, [pc, #280]	@ (8002118 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002000:	ed93 7a00 	vldr	s14, [r3]
 8002004:	eef0 0a47 	vmov.f32	s1, s14
 8002008:	eeb0 0a67 	vmov.f32	s0, s15
 800200c:	484e      	ldr	r0, [pc, #312]	@ (8002148 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800200e:	f7ff fecf 	bl	8001db0 <calculate_discrete_pid>
 8002012:	eef0 7a40 	vmov.f32	s15, s0
 8002016:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800214c <HAL_TIM_PeriodElapsedCallback+0x2bc>
 800201a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800201e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
			// Nasycenie ograniczające do przedziału <0; 1000>
			if(pwm_duty_f < 0)
 8002022:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002026:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800202a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202e:	d503      	bpl.n	8002038 <HAL_TIM_PeriodElapsedCallback+0x1a8>
			{
				pwmValue = 0;
 8002030:	4b3f      	ldr	r3, [pc, #252]	@ (8002130 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002032:	2200      	movs	r2, #0
 8002034:	801a      	strh	r2, [r3, #0]
 8002036:	e017      	b.n	8002068 <HAL_TIM_PeriodElapsedCallback+0x1d8>
			}
			else if(pwm_duty_f > 1000.0f)
 8002038:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800203c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800214c <HAL_TIM_PeriodElapsedCallback+0x2bc>
 8002040:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002048:	dd04      	ble.n	8002054 <HAL_TIM_PeriodElapsedCallback+0x1c4>
			{
				pwmValue = 1000;
 800204a:	4b39      	ldr	r3, [pc, #228]	@ (8002130 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800204c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002050:	801a      	strh	r2, [r3, #0]
 8002052:	e009      	b.n	8002068 <HAL_TIM_PeriodElapsedCallback+0x1d8>
			}
			else
			{
				pwmValue = (uint16_t)pwm_duty_f;
 8002054:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800205c:	ee17 3a90 	vmov	r3, s15
 8002060:	b29b      	uxth	r3, r3
 8002062:	b21a      	sxth	r2, r3
 8002064:	4b32      	ldr	r3, [pc, #200]	@ (8002130 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002066:	801a      	strh	r2, [r3, #0]
			}

			// Use control signal
			// użycie wyjścia regulatora, by zmienić impuls PWM (na użądzeniu wykonawczym)
			__HAL_TIM_SET_COMPARE (&htim2, TIM_CHANNEL_4, pwmValue); //PWM f = 1 kHz
 8002068:	4b31      	ldr	r3, [pc, #196]	@ (8002130 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800206a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800206e:	4b38      	ldr	r3, [pc, #224]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	641a      	str	r2, [r3, #64]	@ 0x40
        if(HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin) == GPIO_PIN_RESET)
 8002074:	e03e      	b.n	80020f4 <HAL_TIM_PeriodElapsedCallback+0x264>
        }
    }
    else
    {
        // Obsługa błędu (np. brak czujnika)
    	char error[] = "Temperatura poza zakresem – możliwe niepoprawne podłączenie czujnika.\n";
 8002076:	4a37      	ldr	r2, [pc, #220]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	4611      	mov	r1, r2
 800207e:	224c      	movs	r2, #76	@ 0x4c
 8002080:	4618      	mov	r0, r3
 8002082:	f008 fd54 	bl	800ab2e <memcpy>
    	HAL_UART_Transmit(&huart3, (uint8_t *)error, strlen(error), 50); // Wysłanie błędu
 8002086:	f107 030c 	add.w	r3, r7, #12
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe f910 	bl	80002b0 <strlen>
 8002090:	4603      	mov	r3, r0
 8002092:	b29a      	uxth	r2, r3
 8002094:	f107 010c 	add.w	r1, r7, #12
 8002098:	2332      	movs	r3, #50	@ 0x32
 800209a:	482f      	ldr	r0, [pc, #188]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800209c:	f005 fabe 	bl	800761c <HAL_UART_Transmit>

    	if (impulse == 0 || impulse == 4 || impulse == 6)
 80020a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002120 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d007      	beq.n	80020b8 <HAL_TIM_PeriodElapsedCallback+0x228>
 80020a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d003      	beq.n	80020b8 <HAL_TIM_PeriodElapsedCallback+0x228>
 80020b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002120 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b06      	cmp	r3, #6
 80020b6:	d10a      	bne.n	80020ce <HAL_TIM_PeriodElapsedCallback+0x23e>
		{
    		// Obsługa wyświetlacza
			lcd16x2_i2c_1stLine();
 80020b8:	f7ff fb20 	bl	80016fc <lcd16x2_i2c_1stLine>
			lcd16x2_i2c_printf("Temperatura poza");
 80020bc:	4827      	ldr	r0, [pc, #156]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80020be:	f7ff fb40 	bl	8001742 <lcd16x2_i2c_printf>
			lcd16x2_i2c_2ndLine();
 80020c2:	f7ff fb23 	bl	800170c <lcd16x2_i2c_2ndLine>
			lcd16x2_i2c_printf("zakresem        ");
 80020c6:	4826      	ldr	r0, [pc, #152]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80020c8:	f7ff fb3b 	bl	8001742 <lcd16x2_i2c_printf>
 80020cc:	e013      	b.n	80020f6 <HAL_TIM_PeriodElapsedCallback+0x266>
		}
    	else if(impulse == 2)
 80020ce:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d10f      	bne.n	80020f6 <HAL_TIM_PeriodElapsedCallback+0x266>
		{
    		// Obsługa wyświetlacza
			lcd16x2_i2c_1stLine();
 80020d6:	f7ff fb11 	bl	80016fc <lcd16x2_i2c_1stLine>
			lcd16x2_i2c_printf("Wypelnienie PWM ");
 80020da:	4814      	ldr	r0, [pc, #80]	@ (800212c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80020dc:	f7ff fb31 	bl	8001742 <lcd16x2_i2c_printf>
			lcd16x2_i2c_2ndLine();
 80020e0:	f7ff fb14 	bl	800170c <lcd16x2_i2c_2ndLine>
			lcd16x2_i2c_printf("wynosi: %4d%%.  ", pwmValue);
 80020e4:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80020e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ea:	4619      	mov	r1, r3
 80020ec:	4811      	ldr	r0, [pc, #68]	@ (8002134 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80020ee:	f7ff fb28 	bl	8001742 <lcd16x2_i2c_printf>
 80020f2:	e000      	b.n	80020f6 <HAL_TIM_PeriodElapsedCallback+0x266>
        if(HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == GPIO_PIN_RESET && HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin) == GPIO_PIN_RESET)
 80020f4:	bf00      	nop
		}
    }
    // 4 - Toggle LED1
    HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80020f6:	2101      	movs	r1, #1
 80020f8:	4812      	ldr	r0, [pc, #72]	@ (8002144 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80020fa:	f001 ffbe 	bl	800407a <HAL_GPIO_TogglePin>
}
 80020fe:	bf00      	nop
 8002100:	3760      	adds	r7, #96	@ 0x60
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000258 	.word	0x20000258
 800210c:	40533333 	.word	0x40533333
 8002110:	3c23d70a 	.word	0x3c23d70a
 8002114:	457ff000 	.word	0x457ff000
 8002118:	20000000 	.word	0x20000000
 800211c:	42c80000 	.word	0x42c80000
 8002120:	2000030b 	.word	0x2000030b
 8002124:	0800d4e8 	.word	0x0800d4e8
 8002128:	0800d4fc 	.word	0x0800d4fc
 800212c:	0800d4c0 	.word	0x0800d4c0
 8002130:	20000308 	.word	0x20000308
 8002134:	0800d4d4 	.word	0x0800d4d4
 8002138:	0800d588 	.word	0x0800d588
 800213c:	20000004 	.word	0x20000004
 8002140:	0800d59c 	.word	0x0800d59c
 8002144:	40020400 	.word	0x40020400
 8002148:	20000008 	.word	0x20000008
 800214c:	447a0000 	.word	0x447a0000
 8002150:	20000360 	.word	0x20000360
 8002154:	0800d5b0 	.word	0x0800d5b0
 8002158:	200003f8 	.word	0x200003f8
 800215c:	0800d50c 	.word	0x0800d50c
 8002160:	0800d520 	.word	0x0800d520

08002164 <HAL_TIM_IC_CaptureCallback>:

// Obsługa obrotów enkodera (poruszanie się po interfejsie)
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	if (__HAL_TIM_GET_COUNTER(&htim1)%2 == 0 && __HAL_TIM_GET_COUNTER(&htim1) != pimpulse)
 800216c:	4b84      	ldr	r3, [pc, #528]	@ (8002380 <HAL_TIM_IC_CaptureCallback+0x21c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 80f7 	bne.w	800236a <HAL_TIM_IC_CaptureCallback+0x206>
 800217c:	4b80      	ldr	r3, [pc, #512]	@ (8002380 <HAL_TIM_IC_CaptureCallback+0x21c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	4a80      	ldr	r2, [pc, #512]	@ (8002384 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002184:	7812      	ldrb	r2, [r2, #0]
 8002186:	4293      	cmp	r3, r2
 8002188:	f000 80ef 	beq.w	800236a <HAL_TIM_IC_CaptureCallback+0x206>
	{
		// Zmiana widocznej wartości
		if (impulse < 10)
 800218c:	4b7e      	ldr	r3, [pc, #504]	@ (8002388 <HAL_TIM_IC_CaptureCallback+0x224>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b09      	cmp	r3, #9
 8002192:	d813      	bhi.n	80021bc <HAL_TIM_IC_CaptureCallback+0x58>
		{
    		impulse = __HAL_TIM_GET_COUNTER(&htim1);
 8002194:	4b7a      	ldr	r3, [pc, #488]	@ (8002380 <HAL_TIM_IC_CaptureCallback+0x21c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219a:	b2da      	uxtb	r2, r3
 800219c:	4b7a      	ldr	r3, [pc, #488]	@ (8002388 <HAL_TIM_IC_CaptureCallback+0x224>)
 800219e:	701a      	strb	r2, [r3, #0]
    		if (HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin) == GPIO_PIN_SET)
 80021a0:	2180      	movs	r1, #128	@ 0x80
 80021a2:	487a      	ldr	r0, [pc, #488]	@ (800238c <HAL_TIM_IC_CaptureCallback+0x228>)
 80021a4:	f001 ff38 	bl	8004018 <HAL_GPIO_ReadPin>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d106      	bne.n	80021bc <HAL_TIM_IC_CaptureCallback+0x58>
    		{
        		impulse %= 4;
 80021ae:	4b76      	ldr	r3, [pc, #472]	@ (8002388 <HAL_TIM_IC_CaptureCallback+0x224>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b73      	ldr	r3, [pc, #460]	@ (8002388 <HAL_TIM_IC_CaptureCallback+0x224>)
 80021ba:	701a      	strb	r2, [r3, #0]
    		}
		}
	    switch(impulse)
 80021bc:	4b72      	ldr	r3, [pc, #456]	@ (8002388 <HAL_TIM_IC_CaptureCallback+0x224>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b0d      	cmp	r3, #13
 80021c2:	f200 80d2 	bhi.w	800236a <HAL_TIM_IC_CaptureCallback+0x206>
 80021c6:	a201      	add	r2, pc, #4	@ (adr r2, 80021cc <HAL_TIM_IC_CaptureCallback+0x68>)
 80021c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021cc:	08002205 	.word	0x08002205
 80021d0:	0800236b 	.word	0x0800236b
 80021d4:	08002263 	.word	0x08002263
 80021d8:	0800236b 	.word	0x0800236b
 80021dc:	08002281 	.word	0x08002281
 80021e0:	0800236b 	.word	0x0800236b
 80021e4:	080022ed 	.word	0x080022ed
 80021e8:	0800236b 	.word	0x0800236b
 80021ec:	0800236b 	.word	0x0800236b
 80021f0:	0800236b 	.word	0x0800236b
 80021f4:	0800234b 	.word	0x0800234b
 80021f8:	08002353 	.word	0x08002353
 80021fc:	0800235b 	.word	0x0800235b
 8002200:	08002363 	.word	0x08002363
	    {
	    	case 0:
	    		if (temperature >= 0.0f && temperature <= 100.0f )
 8002204:	4b62      	ldr	r3, [pc, #392]	@ (8002390 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800220e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002212:	db1b      	blt.n	800224c <HAL_TIM_IC_CaptureCallback+0xe8>
 8002214:	4b5e      	ldr	r3, [pc, #376]	@ (8002390 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8002394 <HAL_TIM_IC_CaptureCallback+0x230>
 800221e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002226:	d811      	bhi.n	800224c <HAL_TIM_IC_CaptureCallback+0xe8>
	    		    {
	    				// Obsługa wyświetlacza
	    		        lcd16x2_i2c_1stLine();
 8002228:	f7ff fa68 	bl	80016fc <lcd16x2_i2c_1stLine>
	    		        lcd16x2_i2c_printf("Temp. wynosi:   ");
 800222c:	485a      	ldr	r0, [pc, #360]	@ (8002398 <HAL_TIM_IC_CaptureCallback+0x234>)
 800222e:	f7ff fa88 	bl	8001742 <lcd16x2_i2c_printf>
	    		        lcd16x2_i2c_2ndLine();
 8002232:	f7ff fa6b 	bl	800170c <lcd16x2_i2c_2ndLine>
	    		        lcd16x2_i2c_printf("%6.2f stopni C.", temperature);
 8002236:	4b56      	ldr	r3, [pc, #344]	@ (8002390 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe f9a4 	bl	8000588 <__aeabi_f2d>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4855      	ldr	r0, [pc, #340]	@ (800239c <HAL_TIM_IC_CaptureCallback+0x238>)
 8002246:	f7ff fa7c 	bl	8001742 <lcd16x2_i2c_printf>
	    		        lcd16x2_i2c_1stLine();
	    		        lcd16x2_i2c_printf("Temperatura poza");
	    		        lcd16x2_i2c_2ndLine();
	    		        lcd16x2_i2c_printf("zakresem        ");
	    		    }
	    		break;
 800224a:	e08e      	b.n	800236a <HAL_TIM_IC_CaptureCallback+0x206>
	    		        lcd16x2_i2c_1stLine();
 800224c:	f7ff fa56 	bl	80016fc <lcd16x2_i2c_1stLine>
	    		        lcd16x2_i2c_printf("Temperatura poza");
 8002250:	4853      	ldr	r0, [pc, #332]	@ (80023a0 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8002252:	f7ff fa76 	bl	8001742 <lcd16x2_i2c_printf>
	    		        lcd16x2_i2c_2ndLine();
 8002256:	f7ff fa59 	bl	800170c <lcd16x2_i2c_2ndLine>
	    		        lcd16x2_i2c_printf("zakresem        ");
 800225a:	4852      	ldr	r0, [pc, #328]	@ (80023a4 <HAL_TIM_IC_CaptureCallback+0x240>)
 800225c:	f7ff fa71 	bl	8001742 <lcd16x2_i2c_printf>
	    		break;
 8002260:	e083      	b.n	800236a <HAL_TIM_IC_CaptureCallback+0x206>

	    	case 2:
	    			// Obsługa wyświetlacza
					lcd16x2_i2c_1stLine();
 8002262:	f7ff fa4b 	bl	80016fc <lcd16x2_i2c_1stLine>
					lcd16x2_i2c_printf("Wypelnienie PWM ");
 8002266:	4850      	ldr	r0, [pc, #320]	@ (80023a8 <HAL_TIM_IC_CaptureCallback+0x244>)
 8002268:	f7ff fa6b 	bl	8001742 <lcd16x2_i2c_printf>
					lcd16x2_i2c_2ndLine();
 800226c:	f7ff fa4e 	bl	800170c <lcd16x2_i2c_2ndLine>
					lcd16x2_i2c_printf("wynosi: %4d%%.  ", pwmValue);
 8002270:	4b4e      	ldr	r3, [pc, #312]	@ (80023ac <HAL_TIM_IC_CaptureCallback+0x248>)
 8002272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002276:	4619      	mov	r1, r3
 8002278:	484d      	ldr	r0, [pc, #308]	@ (80023b0 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800227a:	f7ff fa62 	bl	8001742 <lcd16x2_i2c_printf>
	    		break;
 800227e:	e074      	b.n	800236a <HAL_TIM_IC_CaptureCallback+0x206>

	    	case 4:
	    		if (temperature >= 0.0f && temperature <= 100.0f )
 8002280:	4b43      	ldr	r3, [pc, #268]	@ (8002390 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800228a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228e:	db22      	blt.n	80022d6 <HAL_TIM_IC_CaptureCallback+0x172>
 8002290:	4b3f      	ldr	r3, [pc, #252]	@ (8002390 <HAL_TIM_IC_CaptureCallback+0x22c>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8002394 <HAL_TIM_IC_CaptureCallback+0x230>
 800229a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	d818      	bhi.n	80022d6 <HAL_TIM_IC_CaptureCallback+0x172>
	    		{
	    			// Obsługa wyświetlacza
					lcd16x2_i2c_1stLine();
 80022a4:	f7ff fa2a 	bl	80016fc <lcd16x2_i2c_1stLine>
					lcd16x2_i2c_printf("Uchyb temp.:    ");
 80022a8:	4842      	ldr	r0, [pc, #264]	@ (80023b4 <HAL_TIM_IC_CaptureCallback+0x250>)
 80022aa:	f7ff fa4a 	bl	8001742 <lcd16x2_i2c_printf>
					lcd16x2_i2c_2ndLine();
 80022ae:	f7ff fa2d 	bl	800170c <lcd16x2_i2c_2ndLine>
					lcd16x2_i2c_printf("%6.2f stopni C.", set_point - temperature);
 80022b2:	4b41      	ldr	r3, [pc, #260]	@ (80023b8 <HAL_TIM_IC_CaptureCallback+0x254>)
 80022b4:	ed93 7a00 	vldr	s14, [r3]
 80022b8:	4b35      	ldr	r3, [pc, #212]	@ (8002390 <HAL_TIM_IC_CaptureCallback+0x22c>)
 80022ba:	edd3 7a00 	vldr	s15, [r3]
 80022be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c2:	ee17 0a90 	vmov	r0, s15
 80022c6:	f7fe f95f 	bl	8000588 <__aeabi_f2d>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4833      	ldr	r0, [pc, #204]	@ (800239c <HAL_TIM_IC_CaptureCallback+0x238>)
 80022d0:	f7ff fa37 	bl	8001742 <lcd16x2_i2c_printf>
					lcd16x2_i2c_1stLine();
					lcd16x2_i2c_printf("Temperatura poza");
					lcd16x2_i2c_2ndLine();
					lcd16x2_i2c_printf("zakresem        ");
				}
		        break;
 80022d4:	e049      	b.n	800236a <HAL_TIM_IC_CaptureCallback+0x206>
					lcd16x2_i2c_1stLine();
 80022d6:	f7ff fa11 	bl	80016fc <lcd16x2_i2c_1stLine>
					lcd16x2_i2c_printf("Temperatura poza");
 80022da:	4831      	ldr	r0, [pc, #196]	@ (80023a0 <HAL_TIM_IC_CaptureCallback+0x23c>)
 80022dc:	f7ff fa31 	bl	8001742 <lcd16x2_i2c_printf>
					lcd16x2_i2c_2ndLine();
 80022e0:	f7ff fa14 	bl	800170c <lcd16x2_i2c_2ndLine>
					lcd16x2_i2c_printf("zakresem        ");
 80022e4:	482f      	ldr	r0, [pc, #188]	@ (80023a4 <HAL_TIM_IC_CaptureCallback+0x240>)
 80022e6:	f7ff fa2c 	bl	8001742 <lcd16x2_i2c_printf>
		        break;
 80022ea:	e03e      	b.n	800236a <HAL_TIM_IC_CaptureCallback+0x206>

	    	case 6:
	    		if (temperature >= 0.0f && temperature <= 100.0f )
 80022ec:	4b28      	ldr	r3, [pc, #160]	@ (8002390 <HAL_TIM_IC_CaptureCallback+0x22c>)
 80022ee:	edd3 7a00 	vldr	s15, [r3]
 80022f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	db1b      	blt.n	8002334 <HAL_TIM_IC_CaptureCallback+0x1d0>
 80022fc:	4b24      	ldr	r3, [pc, #144]	@ (8002390 <HAL_TIM_IC_CaptureCallback+0x22c>)
 80022fe:	edd3 7a00 	vldr	s15, [r3]
 8002302:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002394 <HAL_TIM_IC_CaptureCallback+0x230>
 8002306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230e:	d811      	bhi.n	8002334 <HAL_TIM_IC_CaptureCallback+0x1d0>
	    		{
	    			// Obsługa wyświetlacza
					lcd16x2_i2c_1stLine();
 8002310:	f7ff f9f4 	bl	80016fc <lcd16x2_i2c_1stLine>
					lcd16x2_i2c_printf("Zadana temp.:   ");
 8002314:	4829      	ldr	r0, [pc, #164]	@ (80023bc <HAL_TIM_IC_CaptureCallback+0x258>)
 8002316:	f7ff fa14 	bl	8001742 <lcd16x2_i2c_printf>
					lcd16x2_i2c_2ndLine();
 800231a:	f7ff f9f7 	bl	800170c <lcd16x2_i2c_2ndLine>
					lcd16x2_i2c_printf("%6.2f stopni C.", set_point);
 800231e:	4b26      	ldr	r3, [pc, #152]	@ (80023b8 <HAL_TIM_IC_CaptureCallback+0x254>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f930 	bl	8000588 <__aeabi_f2d>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	481b      	ldr	r0, [pc, #108]	@ (800239c <HAL_TIM_IC_CaptureCallback+0x238>)
 800232e:	f7ff fa08 	bl	8001742 <lcd16x2_i2c_printf>
					lcd16x2_i2c_1stLine();
					lcd16x2_i2c_printf("Temperatura poza");
					lcd16x2_i2c_2ndLine();
					lcd16x2_i2c_printf("zakresem        ");
				}
	    		break;
 8002332:	e01a      	b.n	800236a <HAL_TIM_IC_CaptureCallback+0x206>
					lcd16x2_i2c_1stLine();
 8002334:	f7ff f9e2 	bl	80016fc <lcd16x2_i2c_1stLine>
					lcd16x2_i2c_printf("Temperatura poza");
 8002338:	4819      	ldr	r0, [pc, #100]	@ (80023a0 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800233a:	f7ff fa02 	bl	8001742 <lcd16x2_i2c_printf>
					lcd16x2_i2c_2ndLine();
 800233e:	f7ff f9e5 	bl	800170c <lcd16x2_i2c_2ndLine>
					lcd16x2_i2c_printf("zakresem        ");
 8002342:	4818      	ldr	r0, [pc, #96]	@ (80023a4 <HAL_TIM_IC_CaptureCallback+0x240>)
 8002344:	f7ff f9fd 	bl	8001742 <lcd16x2_i2c_printf>
	    		break;
 8002348:	e00f      	b.n	800236a <HAL_TIM_IC_CaptureCallback+0x206>

	    	// Dalsze case’y – zmiana Tak/Nie
	    	case 10:
	    		impulse = 11;
 800234a:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <HAL_TIM_IC_CaptureCallback+0x224>)
 800234c:	220b      	movs	r2, #11
 800234e:	701a      	strb	r2, [r3, #0]
	    		break;
 8002350:	e00b      	b.n	800236a <HAL_TIM_IC_CaptureCallback+0x206>

	    	case 11:
	    		impulse = 10;
 8002352:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <HAL_TIM_IC_CaptureCallback+0x224>)
 8002354:	220a      	movs	r2, #10
 8002356:	701a      	strb	r2, [r3, #0]
	    		break;
 8002358:	e007      	b.n	800236a <HAL_TIM_IC_CaptureCallback+0x206>

	    	case 12:
	    		impulse = 13;
 800235a:	4b0b      	ldr	r3, [pc, #44]	@ (8002388 <HAL_TIM_IC_CaptureCallback+0x224>)
 800235c:	220d      	movs	r2, #13
 800235e:	701a      	strb	r2, [r3, #0]
	    		break;
 8002360:	e003      	b.n	800236a <HAL_TIM_IC_CaptureCallback+0x206>

	    	case 13:
	    		impulse = 12;
 8002362:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <HAL_TIM_IC_CaptureCallback+0x224>)
 8002364:	220c      	movs	r2, #12
 8002366:	701a      	strb	r2, [r3, #0]
	    		break;
 8002368:	bf00      	nop
	    }
	}
	pimpulse = __HAL_TIM_GET_COUNTER(&htim1);
 800236a:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <HAL_TIM_IC_CaptureCallback+0x21c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4b04      	ldr	r3, [pc, #16]	@ (8002384 <HAL_TIM_IC_CaptureCallback+0x220>)
 8002374:	701a      	strb	r2, [r3, #0]
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000314 	.word	0x20000314
 8002384:	2000030c 	.word	0x2000030c
 8002388:	2000030b 	.word	0x2000030b
 800238c:	40020400 	.word	0x40020400
 8002390:	20000000 	.word	0x20000000
 8002394:	42c80000 	.word	0x42c80000
 8002398:	0800d4e8 	.word	0x0800d4e8
 800239c:	0800d4fc 	.word	0x0800d4fc
 80023a0:	0800d50c 	.word	0x0800d50c
 80023a4:	0800d520 	.word	0x0800d520
 80023a8:	0800d4c0 	.word	0x0800d4c0
 80023ac:	20000308 	.word	0x20000308
 80023b0:	0800d4d4 	.word	0x0800d4d4
 80023b4:	0800d588 	.word	0x0800d588
 80023b8:	20000004 	.word	0x20000004
 80023bc:	0800d59c 	.word	0x0800d59c

080023c0 <HAL_UART_RxCpltCallback>:

// Odbieranie wartości zadanych z UART-a
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023c0:	b5b0      	push	{r4, r5, r7, lr}
 80023c2:	b0a0      	sub	sp, #128	@ 0x80
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	6078      	str	r0, [r7, #4]
	// Sprawdzenie, czy odebrany znak to '\n'
	if (rxBuffer[rxIndex] == ';') {
 80023c8:	4bad      	ldr	r3, [pc, #692]	@ (8002680 <HAL_UART_RxCpltCallback+0x2c0>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4bad      	ldr	r3, [pc, #692]	@ (8002684 <HAL_UART_RxCpltCallback+0x2c4>)
 80023d0:	5c9b      	ldrb	r3, [r3, r2]
 80023d2:	2b3b      	cmp	r3, #59	@ 0x3b
 80023d4:	f040 818a 	bne.w	80026ec <HAL_UART_RxCpltCallback+0x32c>
		rxBuffer[rxIndex] = '\0'; // Zakończenie stringa
 80023d8:	4ba9      	ldr	r3, [pc, #676]	@ (8002680 <HAL_UART_RxCpltCallback+0x2c0>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	4ba9      	ldr	r3, [pc, #676]	@ (8002684 <HAL_UART_RxCpltCallback+0x2c4>)
 80023e0:	2100      	movs	r1, #0
 80023e2:	5499      	strb	r1, [r3, r2]

		// Sprawdzenie, czy komenda zaczyna się od "PWM1="
		if (strncmp(rxBuffer, "PWM1=", 5u) == 0) {
 80023e4:	2205      	movs	r2, #5
 80023e6:	49a8      	ldr	r1, [pc, #672]	@ (8002688 <HAL_UART_RxCpltCallback+0x2c8>)
 80023e8:	48a6      	ldr	r0, [pc, #664]	@ (8002684 <HAL_UART_RxCpltCallback+0x2c4>)
 80023ea:	f008 fb17 	bl	800aa1c <strncmp>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d162      	bne.n	80024ba <HAL_UART_RxCpltCallback+0xfa>
			int tpwmValue = atoi(&rxBuffer[5]); // Konwersja na liczbę
 80023f4:	48a5      	ldr	r0, [pc, #660]	@ (800268c <HAL_UART_RxCpltCallback+0x2cc>)
 80023f6:	f006 fe9f 	bl	8009138 <atoi>
 80023fa:	6738      	str	r0, [r7, #112]	@ 0x70

			if (tpwmValue >= 0 && tpwmValue <= 1000) { // Zakres 0-1000%o
 80023fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db3d      	blt.n	800247e <HAL_UART_RxCpltCallback+0xbe>
 8002402:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002404:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002408:	dc39      	bgt.n	800247e <HAL_UART_RxCpltCallback+0xbe>
				// Ustawienie wypełnienia PWM (TIM2, kanał 4)
				pwmValue = tpwmValue;
 800240a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800240c:	b21a      	sxth	r2, r3
 800240e:	4ba0      	ldr	r3, [pc, #640]	@ (8002690 <HAL_UART_RxCpltCallback+0x2d0>)
 8002410:	801a      	strh	r2, [r3, #0]
				if (HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin) == GPIO_PIN_RESET)
 8002412:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002416:	489f      	ldr	r0, [pc, #636]	@ (8002694 <HAL_UART_RxCpltCallback+0x2d4>)
 8002418:	f001 fdfe 	bl	8004018 <HAL_GPIO_ReadPin>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d105      	bne.n	800242e <HAL_UART_RxCpltCallback+0x6e>
				{
					__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmValue);
 8002422:	4b9b      	ldr	r3, [pc, #620]	@ (8002690 <HAL_UART_RxCpltCallback+0x2d0>)
 8002424:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002428:	4b9b      	ldr	r3, [pc, #620]	@ (8002698 <HAL_UART_RxCpltCallback+0x2d8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	641a      	str	r2, [r3, #64]	@ 0x40
				}

				// Zmiana trybu na zadanie PWM
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800242e:	2201      	movs	r2, #1
 8002430:	2180      	movs	r1, #128	@ 0x80
 8002432:	4898      	ldr	r0, [pc, #608]	@ (8002694 <HAL_UART_RxCpltCallback+0x2d4>)
 8002434:	f001 fe08 	bl	8004048 <HAL_GPIO_WritePin>

				// Wyświetlanie PWM, jeśli wyświetlało uchyb lub temperaturę zadaną
				if(impulse == 4 || impulse == 6)
 8002438:	4b98      	ldr	r3, [pc, #608]	@ (800269c <HAL_UART_RxCpltCallback+0x2dc>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b04      	cmp	r3, #4
 800243e:	d003      	beq.n	8002448 <HAL_UART_RxCpltCallback+0x88>
 8002440:	4b96      	ldr	r3, [pc, #600]	@ (800269c <HAL_UART_RxCpltCallback+0x2dc>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b06      	cmp	r3, #6
 8002446:	d106      	bne.n	8002456 <HAL_UART_RxCpltCallback+0x96>
				{
					  __HAL_TIM_SET_COUNTER(&htim1, 2);
 8002448:	4b95      	ldr	r3, [pc, #596]	@ (80026a0 <HAL_UART_RxCpltCallback+0x2e0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2202      	movs	r2, #2
 800244e:	625a      	str	r2, [r3, #36]	@ 0x24
					  impulse = 2;
 8002450:	4b92      	ldr	r3, [pc, #584]	@ (800269c <HAL_UART_RxCpltCallback+0x2dc>)
 8002452:	2202      	movs	r2, #2
 8002454:	701a      	strb	r2, [r3, #0]
				}

				if (impulse == 2)
 8002456:	4b91      	ldr	r3, [pc, #580]	@ (800269c <HAL_UART_RxCpltCallback+0x2dc>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b02      	cmp	r3, #2
 800245c:	f040 810c 	bne.w	8002678 <HAL_UART_RxCpltCallback+0x2b8>
				{
					// Obsługa wyświetlacza
					lcd16x2_i2c_1stLine();
 8002460:	f7ff f94c 	bl	80016fc <lcd16x2_i2c_1stLine>
					lcd16x2_i2c_printf("Wypelnienie PWM ");
 8002464:	488f      	ldr	r0, [pc, #572]	@ (80026a4 <HAL_UART_RxCpltCallback+0x2e4>)
 8002466:	f7ff f96c 	bl	8001742 <lcd16x2_i2c_printf>
					lcd16x2_i2c_2ndLine();
 800246a:	f7ff f94f 	bl	800170c <lcd16x2_i2c_2ndLine>
					lcd16x2_i2c_printf("wynosi: %4d%%.  ", pwmValue);
 800246e:	4b88      	ldr	r3, [pc, #544]	@ (8002690 <HAL_UART_RxCpltCallback+0x2d0>)
 8002470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002474:	4619      	mov	r1, r3
 8002476:	488c      	ldr	r0, [pc, #560]	@ (80026a8 <HAL_UART_RxCpltCallback+0x2e8>)
 8002478:	f7ff f963 	bl	8001742 <lcd16x2_i2c_printf>
				if (impulse == 2)
 800247c:	e0fc      	b.n	8002678 <HAL_UART_RxCpltCallback+0x2b8>
				}
			}
			else
			{
				char error[] = "Brak efektu. PWM1 musi wynosić między 0 a 1000.\n";
 800247e:	4b8b      	ldr	r3, [pc, #556]	@ (80026ac <HAL_UART_RxCpltCallback+0x2ec>)
 8002480:	f107 040c 	add.w	r4, r7, #12
 8002484:	461d      	mov	r5, r3
 8002486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800248a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800248c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800248e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002492:	682b      	ldr	r3, [r5, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	8022      	strh	r2, [r4, #0]
 8002498:	3402      	adds	r4, #2
 800249a:	0c1b      	lsrs	r3, r3, #16
 800249c:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart3, (uint8_t *)error, strlen(error), 50);
 800249e:	f107 030c 	add.w	r3, r7, #12
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fd ff04 	bl	80002b0 <strlen>
 80024a8:	4603      	mov	r3, r0
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	f107 010c 	add.w	r1, r7, #12
 80024b0:	2332      	movs	r3, #50	@ 0x32
 80024b2:	487f      	ldr	r0, [pc, #508]	@ (80026b0 <HAL_UART_RxCpltCallback+0x2f0>)
 80024b4:	f005 f8b2 	bl	800761c <HAL_UART_Transmit>
 80024b8:	e0de      	b.n	8002678 <HAL_UART_RxCpltCallback+0x2b8>
			}
		}

		// Sprawdzenie, czy komenda zaczyna się od "PID1="
		else if(strncmp(rxBuffer, "PID1=", 5u) == 0)
 80024ba:	2205      	movs	r2, #5
 80024bc:	497d      	ldr	r1, [pc, #500]	@ (80026b4 <HAL_UART_RxCpltCallback+0x2f4>)
 80024be:	4871      	ldr	r0, [pc, #452]	@ (8002684 <HAL_UART_RxCpltCallback+0x2c4>)
 80024c0:	f008 faac 	bl	800aa1c <strncmp>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 80b9 	bne.w	800263e <HAL_UART_RxCpltCallback+0x27e>
		{
			int tset_point = atof(&rxBuffer[5]); // Konwersja na liczbę
 80024cc:	486f      	ldr	r0, [pc, #444]	@ (800268c <HAL_UART_RxCpltCallback+0x2cc>)
 80024ce:	f006 fe30 	bl	8009132 <atof>
 80024d2:	ec53 2b10 	vmov	r2, r3, d0
 80024d6:	4610      	mov	r0, r2
 80024d8:	4619      	mov	r1, r3
 80024da:	f7fe fb5d 	bl	8000b98 <__aeabi_d2iz>
 80024de:	4603      	mov	r3, r0
 80024e0:	677b      	str	r3, [r7, #116]	@ 0x74

			if (tset_point >= minSetTemperature && tset_point <= maxSetTemperature) { // Zakres minSetTemperature-maxSetTemperature
 80024e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ec:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80024f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f8:	f2c0 8086 	blt.w	8002608 <HAL_UART_RxCpltCallback+0x248>
 80024fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002506:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 80026b8 <HAL_UART_RxCpltCallback+0x2f8>
 800250a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	d879      	bhi.n	8002608 <HAL_UART_RxCpltCallback+0x248>
				// Ustawienie wypełnienia PWM (TIM2, kanał 4)
				set_point = tset_point;
 8002514:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800251e:	4b67      	ldr	r3, [pc, #412]	@ (80026bc <HAL_UART_RxCpltCallback+0x2fc>)
 8002520:	edc3 7a00 	vstr	s15, [r3]

				// Zmiana trybu na zadanie temperatury
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002524:	2200      	movs	r2, #0
 8002526:	2180      	movs	r1, #128	@ 0x80
 8002528:	485a      	ldr	r0, [pc, #360]	@ (8002694 <HAL_UART_RxCpltCallback+0x2d4>)
 800252a:	f001 fd8d 	bl	8004048 <HAL_GPIO_WritePin>

				switch (impulse)
 800252e:	4b5b      	ldr	r3, [pc, #364]	@ (800269c <HAL_UART_RxCpltCallback+0x2dc>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b04      	cmp	r3, #4
 8002534:	d002      	beq.n	800253c <HAL_UART_RxCpltCallback+0x17c>
 8002536:	2b06      	cmp	r3, #6
 8002538:	d036      	beq.n	80025a8 <HAL_UART_RxCpltCallback+0x1e8>
 800253a:	e09d      	b.n	8002678 <HAL_UART_RxCpltCallback+0x2b8>
				{
					case 4:
			    		if (temperature >= 0.0f && temperature <= 100.0f )
 800253c:	4b60      	ldr	r3, [pc, #384]	@ (80026c0 <HAL_UART_RxCpltCallback+0x300>)
 800253e:	edd3 7a00 	vldr	s15, [r3]
 8002542:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254a:	db22      	blt.n	8002592 <HAL_UART_RxCpltCallback+0x1d2>
 800254c:	4b5c      	ldr	r3, [pc, #368]	@ (80026c0 <HAL_UART_RxCpltCallback+0x300>)
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80026c4 <HAL_UART_RxCpltCallback+0x304>
 8002556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255e:	d818      	bhi.n	8002592 <HAL_UART_RxCpltCallback+0x1d2>
			    		{
			    			// Obsługa wyświetlacza
							lcd16x2_i2c_1stLine();
 8002560:	f7ff f8cc 	bl	80016fc <lcd16x2_i2c_1stLine>
							lcd16x2_i2c_printf("Uchyb temp.:    ");
 8002564:	4858      	ldr	r0, [pc, #352]	@ (80026c8 <HAL_UART_RxCpltCallback+0x308>)
 8002566:	f7ff f8ec 	bl	8001742 <lcd16x2_i2c_printf>
							lcd16x2_i2c_2ndLine();
 800256a:	f7ff f8cf 	bl	800170c <lcd16x2_i2c_2ndLine>
							lcd16x2_i2c_printf("%6.2f stopni C.", set_point - temperature);
 800256e:	4b53      	ldr	r3, [pc, #332]	@ (80026bc <HAL_UART_RxCpltCallback+0x2fc>)
 8002570:	ed93 7a00 	vldr	s14, [r3]
 8002574:	4b52      	ldr	r3, [pc, #328]	@ (80026c0 <HAL_UART_RxCpltCallback+0x300>)
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257e:	ee17 0a90 	vmov	r0, s15
 8002582:	f7fe f801 	bl	8000588 <__aeabi_f2d>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4850      	ldr	r0, [pc, #320]	@ (80026cc <HAL_UART_RxCpltCallback+0x30c>)
 800258c:	f7ff f8d9 	bl	8001742 <lcd16x2_i2c_printf>
							lcd16x2_i2c_1stLine();
							lcd16x2_i2c_printf("Temperatura poza");
							lcd16x2_i2c_2ndLine();
							lcd16x2_i2c_printf("zakresem        ");
						}
						break;
 8002590:	e039      	b.n	8002606 <HAL_UART_RxCpltCallback+0x246>
							lcd16x2_i2c_1stLine();
 8002592:	f7ff f8b3 	bl	80016fc <lcd16x2_i2c_1stLine>
							lcd16x2_i2c_printf("Temperatura poza");
 8002596:	484e      	ldr	r0, [pc, #312]	@ (80026d0 <HAL_UART_RxCpltCallback+0x310>)
 8002598:	f7ff f8d3 	bl	8001742 <lcd16x2_i2c_printf>
							lcd16x2_i2c_2ndLine();
 800259c:	f7ff f8b6 	bl	800170c <lcd16x2_i2c_2ndLine>
							lcd16x2_i2c_printf("zakresem        ");
 80025a0:	484c      	ldr	r0, [pc, #304]	@ (80026d4 <HAL_UART_RxCpltCallback+0x314>)
 80025a2:	f7ff f8ce 	bl	8001742 <lcd16x2_i2c_printf>
						break;
 80025a6:	e02e      	b.n	8002606 <HAL_UART_RxCpltCallback+0x246>

					case 6:
			    		if (temperature >= 0.0f && temperature <= 100.0f )
 80025a8:	4b45      	ldr	r3, [pc, #276]	@ (80026c0 <HAL_UART_RxCpltCallback+0x300>)
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b6:	db1b      	blt.n	80025f0 <HAL_UART_RxCpltCallback+0x230>
 80025b8:	4b41      	ldr	r3, [pc, #260]	@ (80026c0 <HAL_UART_RxCpltCallback+0x300>)
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80026c4 <HAL_UART_RxCpltCallback+0x304>
 80025c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ca:	d811      	bhi.n	80025f0 <HAL_UART_RxCpltCallback+0x230>
			    		{
			    			// Obsługa wyświetlacza
							lcd16x2_i2c_1stLine();
 80025cc:	f7ff f896 	bl	80016fc <lcd16x2_i2c_1stLine>
							lcd16x2_i2c_printf("Zadana temp.:   ");
 80025d0:	4841      	ldr	r0, [pc, #260]	@ (80026d8 <HAL_UART_RxCpltCallback+0x318>)
 80025d2:	f7ff f8b6 	bl	8001742 <lcd16x2_i2c_printf>
							lcd16x2_i2c_2ndLine();
 80025d6:	f7ff f899 	bl	800170c <lcd16x2_i2c_2ndLine>
							lcd16x2_i2c_printf("%6.2f stopni C.", set_point);
 80025da:	4b38      	ldr	r3, [pc, #224]	@ (80026bc <HAL_UART_RxCpltCallback+0x2fc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fd ffd2 	bl	8000588 <__aeabi_f2d>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4838      	ldr	r0, [pc, #224]	@ (80026cc <HAL_UART_RxCpltCallback+0x30c>)
 80025ea:	f7ff f8aa 	bl	8001742 <lcd16x2_i2c_printf>
							lcd16x2_i2c_1stLine();
							lcd16x2_i2c_printf("Temperatura poza");
							lcd16x2_i2c_2ndLine();
							lcd16x2_i2c_printf("zakresem        ");
						}
						break;
 80025ee:	e009      	b.n	8002604 <HAL_UART_RxCpltCallback+0x244>
							lcd16x2_i2c_1stLine();
 80025f0:	f7ff f884 	bl	80016fc <lcd16x2_i2c_1stLine>
							lcd16x2_i2c_printf("Temperatura poza");
 80025f4:	4836      	ldr	r0, [pc, #216]	@ (80026d0 <HAL_UART_RxCpltCallback+0x310>)
 80025f6:	f7ff f8a4 	bl	8001742 <lcd16x2_i2c_printf>
							lcd16x2_i2c_2ndLine();
 80025fa:	f7ff f887 	bl	800170c <lcd16x2_i2c_2ndLine>
							lcd16x2_i2c_printf("zakresem        ");
 80025fe:	4835      	ldr	r0, [pc, #212]	@ (80026d4 <HAL_UART_RxCpltCallback+0x314>)
 8002600:	f7ff f89f 	bl	8001742 <lcd16x2_i2c_printf>
						break;
 8002604:	bf00      	nop
				switch (impulse)
 8002606:	e037      	b.n	8002678 <HAL_UART_RxCpltCallback+0x2b8>
				}
			}
			else
			{
				char error[100];
				sprintf(error, "Brak efektu. PID1 musi wynosić między %.2f a %.2f.\n", minSetTemperature, maxSetTemperature);
 8002608:	f107 000c 	add.w	r0, r7, #12
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	4b32      	ldr	r3, [pc, #200]	@ (80026dc <HAL_UART_RxCpltCallback+0x31c>)
 8002612:	e9cd 2300 	strd	r2, r3, [sp]
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	4b31      	ldr	r3, [pc, #196]	@ (80026e0 <HAL_UART_RxCpltCallback+0x320>)
 800261c:	4931      	ldr	r1, [pc, #196]	@ (80026e4 <HAL_UART_RxCpltCallback+0x324>)
 800261e:	f008 f971 	bl	800a904 <siprintf>
				HAL_UART_Transmit(&huart3, (uint8_t *)error, strlen(error), 50);
 8002622:	f107 030c 	add.w	r3, r7, #12
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd fe42 	bl	80002b0 <strlen>
 800262c:	4603      	mov	r3, r0
 800262e:	b29a      	uxth	r2, r3
 8002630:	f107 010c 	add.w	r1, r7, #12
 8002634:	2332      	movs	r3, #50	@ 0x32
 8002636:	481e      	ldr	r0, [pc, #120]	@ (80026b0 <HAL_UART_RxCpltCallback+0x2f0>)
 8002638:	f004 fff0 	bl	800761c <HAL_UART_Transmit>
 800263c:	e01c      	b.n	8002678 <HAL_UART_RxCpltCallback+0x2b8>
			}
		}
		else
		{
			char error[] = "Podana składnia nie przynosi efektu.\n";
 800263e:	4b2a      	ldr	r3, [pc, #168]	@ (80026e8 <HAL_UART_RxCpltCallback+0x328>)
 8002640:	f107 040c 	add.w	r4, r7, #12
 8002644:	461d      	mov	r5, r3
 8002646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800264a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800264c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800264e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002652:	6020      	str	r0, [r4, #0]
 8002654:	3404      	adds	r4, #4
 8002656:	8021      	strh	r1, [r4, #0]
 8002658:	3402      	adds	r4, #2
 800265a:	0c0b      	lsrs	r3, r1, #16
 800265c:	7023      	strb	r3, [r4, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *)error, strlen(error), 50);
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd fe24 	bl	80002b0 <strlen>
 8002668:	4603      	mov	r3, r0
 800266a:	b29a      	uxth	r2, r3
 800266c:	f107 010c 	add.w	r1, r7, #12
 8002670:	2332      	movs	r3, #50	@ 0x32
 8002672:	480f      	ldr	r0, [pc, #60]	@ (80026b0 <HAL_UART_RxCpltCallback+0x2f0>)
 8002674:	f004 ffd2 	bl	800761c <HAL_UART_Transmit>
		}
		rxIndex = 0; // Reset indeksu
 8002678:	4b01      	ldr	r3, [pc, #4]	@ (8002680 <HAL_UART_RxCpltCallback+0x2c0>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	e042      	b.n	8002706 <HAL_UART_RxCpltCallback+0x346>
 8002680:	2000030a 	.word	0x2000030a
 8002684:	200002fc 	.word	0x200002fc
 8002688:	0800d5fc 	.word	0x0800d5fc
 800268c:	20000301 	.word	0x20000301
 8002690:	20000308 	.word	0x20000308
 8002694:	40020400 	.word	0x40020400
 8002698:	20000360 	.word	0x20000360
 800269c:	2000030b 	.word	0x2000030b
 80026a0:	20000314 	.word	0x20000314
 80026a4:	0800d4c0 	.word	0x0800d4c0
 80026a8:	0800d4d4 	.word	0x0800d4d4
 80026ac:	0800d644 	.word	0x0800d644
 80026b0:	200003f8 	.word	0x200003f8
 80026b4:	0800d604 	.word	0x0800d604
 80026b8:	42480000 	.word	0x42480000
 80026bc:	20000004 	.word	0x20000004
 80026c0:	20000000 	.word	0x20000000
 80026c4:	42c80000 	.word	0x42c80000
 80026c8:	0800d588 	.word	0x0800d588
 80026cc:	0800d4fc 	.word	0x0800d4fc
 80026d0:	0800d50c 	.word	0x0800d50c
 80026d4:	0800d520 	.word	0x0800d520
 80026d8:	0800d59c 	.word	0x0800d59c
 80026dc:	40490000 	.word	0x40490000
 80026e0:	40340000 	.word	0x40340000
 80026e4:	0800d60c 	.word	0x0800d60c
 80026e8:	0800d678 	.word	0x0800d678
	} else {
		rxIndex++;
 80026ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <HAL_UART_RxCpltCallback+0x364>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002724 <HAL_UART_RxCpltCallback+0x364>)
 80026f6:	701a      	strb	r2, [r3, #0]
		if (rxIndex >= sizeof(rxBuffer)) {
 80026f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <HAL_UART_RxCpltCallback+0x364>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b0b      	cmp	r3, #11
 80026fe:	d902      	bls.n	8002706 <HAL_UART_RxCpltCallback+0x346>
			rxIndex = 0; // Zabezpieczenie przed przepełnieniem bufora
 8002700:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <HAL_UART_RxCpltCallback+0x364>)
 8002702:	2200      	movs	r2, #0
 8002704:	701a      	strb	r2, [r3, #0]
		}
	}
	// Kontynuacja odbioru kolejnego znaku
	HAL_UART_Receive_IT(&huart3, (uint8_t *)&rxBuffer[rxIndex], 1);
 8002706:	4b07      	ldr	r3, [pc, #28]	@ (8002724 <HAL_UART_RxCpltCallback+0x364>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_UART_RxCpltCallback+0x368>)
 800270e:	4413      	add	r3, r2
 8002710:	2201      	movs	r2, #1
 8002712:	4619      	mov	r1, r3
 8002714:	4805      	ldr	r0, [pc, #20]	@ (800272c <HAL_UART_RxCpltCallback+0x36c>)
 8002716:	f005 f80a 	bl	800772e <HAL_UART_Receive_IT>
}
 800271a:	bf00      	nop
 800271c:	3778      	adds	r7, #120	@ 0x78
 800271e:	46bd      	mov	sp, r7
 8002720:	bdb0      	pop	{r4, r5, r7, pc}
 8002722:	bf00      	nop
 8002724:	2000030a 	.word	0x2000030a
 8002728:	200002fc 	.word	0x200002fc
 800272c:	200003f8 	.word	0x200003f8

08002730 <HAL_GPIO_EXTI_Callback>:

// Pauzowanie programu przyciskiem
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	80fb      	strh	r3, [r7, #6]
	if (HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin) == GPIO_PIN_SET)
 800273a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800273e:	480d      	ldr	r0, [pc, #52]	@ (8002774 <HAL_GPIO_EXTI_Callback+0x44>)
 8002740:	f001 fc6a 	bl	8004018 <HAL_GPIO_ReadPin>
 8002744:	4603      	mov	r3, r0
 8002746:	2b01      	cmp	r3, #1
 8002748:	d106      	bne.n	8002758 <HAL_GPIO_EXTI_Callback+0x28>
	{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pwmValue);
 800274a:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <HAL_GPIO_EXTI_Callback+0x48>)
 800274c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002750:	4b0a      	ldr	r3, [pc, #40]	@ (800277c <HAL_GPIO_EXTI_Callback+0x4c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	641a      	str	r2, [r3, #64]	@ 0x40
 8002756:	e003      	b.n	8002760 <HAL_GPIO_EXTI_Callback+0x30>
	}
	else
	{
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
 8002758:	4b08      	ldr	r3, [pc, #32]	@ (800277c <HAL_GPIO_EXTI_Callback+0x4c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2200      	movs	r2, #0
 800275e:	641a      	str	r2, [r3, #64]	@ 0x40
	}
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002760:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002764:	4803      	ldr	r0, [pc, #12]	@ (8002774 <HAL_GPIO_EXTI_Callback+0x44>)
 8002766:	f001 fc88 	bl	800407a <HAL_GPIO_TogglePin>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40020400 	.word	0x40020400
 8002778:	20000308 	.word	0x20000308
 800277c:	20000360 	.word	0x20000360

08002780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002784:	b672      	cpsid	i
}
 8002786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <Error_Handler+0x8>

0800278c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <HAL_MspInit+0x44>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	4a0e      	ldr	r2, [pc, #56]	@ (80027d0 <HAL_MspInit+0x44>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279c:	6413      	str	r3, [r2, #64]	@ 0x40
 800279e:	4b0c      	ldr	r3, [pc, #48]	@ (80027d0 <HAL_MspInit+0x44>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027aa:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <HAL_MspInit+0x44>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	4a08      	ldr	r2, [pc, #32]	@ (80027d0 <HAL_MspInit+0x44>)
 80027b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027b6:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <HAL_MspInit+0x44>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800

080027d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <NMI_Handler+0x4>

080027dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <HardFault_Handler+0x4>

080027e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <MemManage_Handler+0x4>

080027ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <BusFault_Handler+0x4>

080027f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <UsageFault_Handler+0x4>

080027fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800282a:	f000 fc67 	bl	80030fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}

08002832 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PAUSE_Pin);
 8002836:	2004      	movs	r0, #4
 8002838:	f001 fc3a 	bl	80040b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800283c:	bf00      	nop
 800283e:	bd80      	pop	{r7, pc}

08002840 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002844:	4802      	ldr	r0, [pc, #8]	@ (8002850 <TIM1_CC_IRQHandler+0x10>)
 8002846:	f003 ff21 	bl	800668c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000314 	.word	0x20000314

08002854 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002858:	4802      	ldr	r0, [pc, #8]	@ (8002864 <USART3_IRQHandler+0x10>)
 800285a:	f004 ffad 	bl	80077b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	200003f8 	.word	0x200003f8

08002868 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800286c:	4802      	ldr	r0, [pc, #8]	@ (8002878 <TIM7_IRQHandler+0x10>)
 800286e:	f003 ff0d 	bl	800668c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200003ac 	.word	0x200003ac

0800287c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return 1;
 8002880:	2301      	movs	r3, #1
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <_kill>:

int _kill(int pid, int sig)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002896:	f008 f91d 	bl	800aad4 <__errno>
 800289a:	4603      	mov	r3, r0
 800289c:	2216      	movs	r2, #22
 800289e:	601a      	str	r2, [r3, #0]
  return -1;
 80028a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_exit>:

void _exit (int status)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ffe7 	bl	800288c <_kill>
  while (1) {}    /* Make sure we hang here */
 80028be:	bf00      	nop
 80028c0:	e7fd      	b.n	80028be <_exit+0x12>

080028c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e00a      	b.n	80028ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028d4:	f3af 8000 	nop.w
 80028d8:	4601      	mov	r1, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1c5a      	adds	r2, r3, #1
 80028de:	60ba      	str	r2, [r7, #8]
 80028e0:	b2ca      	uxtb	r2, r1
 80028e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3301      	adds	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	dbf0      	blt.n	80028d4 <_read+0x12>
  }

  return len;
 80028f2:	687b      	ldr	r3, [r7, #4]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	e009      	b.n	8002922 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	60ba      	str	r2, [r7, #8]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	3301      	adds	r3, #1
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	429a      	cmp	r2, r3
 8002928:	dbf1      	blt.n	800290e <_write+0x12>
  }
  return len;
 800292a:	687b      	ldr	r3, [r7, #4]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_close>:

int _close(int file)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800295c:	605a      	str	r2, [r3, #4]
  return 0;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <_isatty>:

int _isatty(int file)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002974:	2301      	movs	r3, #1
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029a4:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <_sbrk+0x5c>)
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <_sbrk+0x60>)
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029b0:	4b13      	ldr	r3, [pc, #76]	@ (8002a00 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029b8:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <_sbrk+0x64>)
 80029ba:	4a12      	ldr	r2, [pc, #72]	@ (8002a04 <_sbrk+0x68>)
 80029bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029be:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d207      	bcs.n	80029dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029cc:	f008 f882 	bl	800aad4 <__errno>
 80029d0:	4603      	mov	r3, r0
 80029d2:	220c      	movs	r2, #12
 80029d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029d6:	f04f 33ff 	mov.w	r3, #4294967295
 80029da:	e009      	b.n	80029f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029dc:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <_sbrk+0x64>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029e2:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <_sbrk+0x64>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a05      	ldr	r2, [pc, #20]	@ (8002a00 <_sbrk+0x64>)
 80029ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20050000 	.word	0x20050000
 80029fc:	00000400 	.word	0x00000400
 8002a00:	20000310 	.word	0x20000310
 8002a04:	20000ab0 	.word	0x20000ab0

08002a08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <SystemInit+0x20>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a12:	4a05      	ldr	r2, [pc, #20]	@ (8002a28 <SystemInit+0x20>)
 8002a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08c      	sub	sp, #48	@ 0x30
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	2224      	movs	r2, #36	@ 0x24
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f007 ffe6 	bl	800aa0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a40:	463b      	mov	r3, r7
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a4a:	4b23      	ldr	r3, [pc, #140]	@ (8002ad8 <MX_TIM1_Init+0xac>)
 8002a4c:	4a23      	ldr	r2, [pc, #140]	@ (8002adc <MX_TIM1_Init+0xb0>)
 8002a4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a50:	4b21      	ldr	r3, [pc, #132]	@ (8002ad8 <MX_TIM1_Init+0xac>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a56:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <MX_TIM1_Init+0xac>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7;
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <MX_TIM1_Init+0xac>)
 8002a5e:	2207      	movs	r2, #7
 8002a60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a62:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad8 <MX_TIM1_Init+0xac>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <MX_TIM1_Init+0xac>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <MX_TIM1_Init+0xac>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a74:	2301      	movs	r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002a98:	f107 030c 	add.w	r3, r7, #12
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	480e      	ldr	r0, [pc, #56]	@ (8002ad8 <MX_TIM1_Init+0xac>)
 8002aa0:	f003 fca0 	bl	80063e4 <HAL_TIM_Encoder_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002aaa:	f7ff fe69 	bl	8002780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002aba:	463b      	mov	r3, r7
 8002abc:	4619      	mov	r1, r3
 8002abe:	4806      	ldr	r0, [pc, #24]	@ (8002ad8 <MX_TIM1_Init+0xac>)
 8002ac0:	f004 fcb2 	bl	8007428 <HAL_TIMEx_MasterConfigSynchronization>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002aca:	f7ff fe59 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002ace:	bf00      	nop
 8002ad0:	3730      	adds	r7, #48	@ 0x30
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000314 	.word	0x20000314
 8002adc:	40010000 	.word	0x40010000

08002ae0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08e      	sub	sp, #56	@ 0x38
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ae6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	605a      	str	r2, [r3, #4]
 8002af0:	609a      	str	r2, [r3, #8]
 8002af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af4:	f107 031c 	add.w	r3, r7, #28
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b00:	463b      	mov	r3, r7
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
 8002b08:	609a      	str	r2, [r3, #8]
 8002b0a:	60da      	str	r2, [r3, #12]
 8002b0c:	611a      	str	r2, [r3, #16]
 8002b0e:	615a      	str	r2, [r3, #20]
 8002b10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b12:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc8 <MX_TIM2_Init+0xe8>)
 8002b14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bc8 <MX_TIM2_Init+0xe8>)
 8002b1c:	2247      	movs	r2, #71	@ 0x47
 8002b1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b20:	4b29      	ldr	r3, [pc, #164]	@ (8002bc8 <MX_TIM2_Init+0xe8>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002b26:	4b28      	ldr	r3, [pc, #160]	@ (8002bc8 <MX_TIM2_Init+0xe8>)
 8002b28:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b2e:	4b26      	ldr	r3, [pc, #152]	@ (8002bc8 <MX_TIM2_Init+0xe8>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b34:	4b24      	ldr	r3, [pc, #144]	@ (8002bc8 <MX_TIM2_Init+0xe8>)
 8002b36:	2280      	movs	r2, #128	@ 0x80
 8002b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b3a:	4823      	ldr	r0, [pc, #140]	@ (8002bc8 <MX_TIM2_Init+0xe8>)
 8002b3c:	f003 fa26 	bl	8005f8c <HAL_TIM_Base_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002b46:	f7ff fe1b 	bl	8002780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b50:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002b54:	4619      	mov	r1, r3
 8002b56:	481c      	ldr	r0, [pc, #112]	@ (8002bc8 <MX_TIM2_Init+0xe8>)
 8002b58:	f003 ffb4 	bl	8006ac4 <HAL_TIM_ConfigClockSource>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002b62:	f7ff fe0d 	bl	8002780 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b66:	4818      	ldr	r0, [pc, #96]	@ (8002bc8 <MX_TIM2_Init+0xe8>)
 8002b68:	f003 fae0 	bl	800612c <HAL_TIM_PWM_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002b72:	f7ff fe05 	bl	8002780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b7e:	f107 031c 	add.w	r3, r7, #28
 8002b82:	4619      	mov	r1, r3
 8002b84:	4810      	ldr	r0, [pc, #64]	@ (8002bc8 <MX_TIM2_Init+0xe8>)
 8002b86:	f004 fc4f 	bl	8007428 <HAL_TIMEx_MasterConfigSynchronization>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002b90:	f7ff fdf6 	bl	8002780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b94:	2360      	movs	r3, #96	@ 0x60
 8002b96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ba4:	463b      	mov	r3, r7
 8002ba6:	220c      	movs	r2, #12
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4807      	ldr	r0, [pc, #28]	@ (8002bc8 <MX_TIM2_Init+0xe8>)
 8002bac:	f003 fe76 	bl	800689c <HAL_TIM_PWM_ConfigChannel>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002bb6:	f7ff fde3 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002bba:	4803      	ldr	r0, [pc, #12]	@ (8002bc8 <MX_TIM2_Init+0xe8>)
 8002bbc:	f000 f8c2 	bl	8002d44 <HAL_TIM_MspPostInit>

}
 8002bc0:	bf00      	nop
 8002bc2:	3738      	adds	r7, #56	@ 0x38
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000360 	.word	0x20000360

08002bcc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd2:	1d3b      	adds	r3, r7, #4
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002bdc:	4b15      	ldr	r3, [pc, #84]	@ (8002c34 <MX_TIM7_Init+0x68>)
 8002bde:	4a16      	ldr	r2, [pc, #88]	@ (8002c38 <MX_TIM7_Init+0x6c>)
 8002be0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 8002be2:	4b14      	ldr	r3, [pc, #80]	@ (8002c34 <MX_TIM7_Init+0x68>)
 8002be4:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002be8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bea:	4b12      	ldr	r3, [pc, #72]	@ (8002c34 <MX_TIM7_Init+0x68>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8002bf0:	4b10      	ldr	r3, [pc, #64]	@ (8002c34 <MX_TIM7_Init+0x68>)
 8002bf2:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002bf6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c34 <MX_TIM7_Init+0x68>)
 8002bfa:	2280      	movs	r2, #128	@ 0x80
 8002bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002bfe:	480d      	ldr	r0, [pc, #52]	@ (8002c34 <MX_TIM7_Init+0x68>)
 8002c00:	f003 f9c4 	bl	8005f8c <HAL_TIM_Base_Init>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002c0a:	f7ff fdb9 	bl	8002780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4806      	ldr	r0, [pc, #24]	@ (8002c34 <MX_TIM7_Init+0x68>)
 8002c1c:	f004 fc04 	bl	8007428 <HAL_TIMEx_MasterConfigSynchronization>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002c26:	f7ff fdab 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	200003ac 	.word	0x200003ac
 8002c38:	40001400 	.word	0x40001400

08002c3c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	@ 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1b      	ldr	r2, [pc, #108]	@ (8002cc8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d130      	bne.n	8002cc0 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ccc <HAL_TIM_Encoder_MspInit+0x90>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	4a1a      	ldr	r2, [pc, #104]	@ (8002ccc <HAL_TIM_Encoder_MspInit+0x90>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c6a:	4b18      	ldr	r3, [pc, #96]	@ (8002ccc <HAL_TIM_Encoder_MspInit+0x90>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c76:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <HAL_TIM_Encoder_MspInit+0x90>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	4a14      	ldr	r2, [pc, #80]	@ (8002ccc <HAL_TIM_Encoder_MspInit+0x90>)
 8002c7c:	f043 0310 	orr.w	r3, r3, #16
 8002c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c82:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <HAL_TIM_Encoder_MspInit+0x90>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002c8e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4809      	ldr	r0, [pc, #36]	@ (8002cd0 <HAL_TIM_Encoder_MspInit+0x94>)
 8002cac:	f001 f808 	bl	8003cc0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 3, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2103      	movs	r1, #3
 8002cb4:	201b      	movs	r0, #27
 8002cb6:	f000 ff3a 	bl	8003b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002cba:	201b      	movs	r0, #27
 8002cbc:	f000 ff53 	bl	8003b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	3728      	adds	r7, #40	@ 0x28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40010000 	.word	0x40010000
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40021000 	.word	0x40021000

08002cd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce4:	d10c      	bne.n	8002d00 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ce6:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <HAL_TIM_Base_MspInit+0x68>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	4a14      	ldr	r2, [pc, #80]	@ (8002d3c <HAL_TIM_Base_MspInit+0x68>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cf2:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <HAL_TIM_Base_MspInit+0x68>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002cfe:	e018      	b.n	8002d32 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a0e      	ldr	r2, [pc, #56]	@ (8002d40 <HAL_TIM_Base_MspInit+0x6c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d113      	bne.n	8002d32 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d3c <HAL_TIM_Base_MspInit+0x68>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002d3c <HAL_TIM_Base_MspInit+0x68>)
 8002d10:	f043 0320 	orr.w	r3, r3, #32
 8002d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d16:	4b09      	ldr	r3, [pc, #36]	@ (8002d3c <HAL_TIM_Base_MspInit+0x68>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	60bb      	str	r3, [r7, #8]
 8002d20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8002d22:	2200      	movs	r2, #0
 8002d24:	2102      	movs	r1, #2
 8002d26:	2037      	movs	r0, #55	@ 0x37
 8002d28:	f000 ff01 	bl	8003b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d2c:	2037      	movs	r0, #55	@ 0x37
 8002d2e:	f000 ff1a 	bl	8003b66 <HAL_NVIC_EnableIRQ>
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40001400 	.word	0x40001400

08002d44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 030c 	add.w	r3, r7, #12
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d64:	d11b      	bne.n	8002d9e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d66:	4b10      	ldr	r3, [pc, #64]	@ (8002da8 <HAL_TIM_MspPostInit+0x64>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002da8 <HAL_TIM_MspPostInit+0x64>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d72:	4b0d      	ldr	r3, [pc, #52]	@ (8002da8 <HAL_TIM_MspPostInit+0x64>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d7e:	2308      	movs	r3, #8
 8002d80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d92:	f107 030c 	add.w	r3, r7, #12
 8002d96:	4619      	mov	r1, r3
 8002d98:	4804      	ldr	r0, [pc, #16]	@ (8002dac <HAL_TIM_MspPostInit+0x68>)
 8002d9a:	f000 ff91 	bl	8003cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002d9e:	bf00      	nop
 8002da0:	3720      	adds	r7, #32
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40020000 	.word	0x40020000

08002db0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002db4:	4b14      	ldr	r3, [pc, #80]	@ (8002e08 <MX_USART3_UART_Init+0x58>)
 8002db6:	4a15      	ldr	r2, [pc, #84]	@ (8002e0c <MX_USART3_UART_Init+0x5c>)
 8002db8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002dba:	4b13      	ldr	r3, [pc, #76]	@ (8002e08 <MX_USART3_UART_Init+0x58>)
 8002dbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002dc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002dc2:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <MX_USART3_UART_Init+0x58>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e08 <MX_USART3_UART_Init+0x58>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002dce:	4b0e      	ldr	r3, [pc, #56]	@ (8002e08 <MX_USART3_UART_Init+0x58>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e08 <MX_USART3_UART_Init+0x58>)
 8002dd6:	220c      	movs	r2, #12
 8002dd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dda:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <MX_USART3_UART_Init+0x58>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002de0:	4b09      	ldr	r3, [pc, #36]	@ (8002e08 <MX_USART3_UART_Init+0x58>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002de6:	4b08      	ldr	r3, [pc, #32]	@ (8002e08 <MX_USART3_UART_Init+0x58>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dec:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <MX_USART3_UART_Init+0x58>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002df2:	4805      	ldr	r0, [pc, #20]	@ (8002e08 <MX_USART3_UART_Init+0x58>)
 8002df4:	f004 fbc4 	bl	8007580 <HAL_UART_Init>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002dfe:	f7ff fcbf 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200003f8 	.word	0x200003f8
 8002e0c:	40004800 	.word	0x40004800

08002e10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b0aa      	sub	sp, #168	@ 0xa8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e18:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e28:	f107 0310 	add.w	r3, r7, #16
 8002e2c:	2284      	movs	r2, #132	@ 0x84
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f007 fdeb 	bl	800aa0c <memset>
  if(uartHandle->Instance==USART3)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a26      	ldr	r2, [pc, #152]	@ (8002ed4 <HAL_UART_MspInit+0xc4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d144      	bne.n	8002eca <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e46:	2300      	movs	r3, #0
 8002e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e4a:	f107 0310 	add.w	r3, r7, #16
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f002 fcac 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e5a:	f7ff fc91 	bl	8002780 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed8 <HAL_UART_MspInit+0xc8>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e62:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed8 <HAL_UART_MspInit+0xc8>)
 8002e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed8 <HAL_UART_MspInit+0xc8>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e76:	4b18      	ldr	r3, [pc, #96]	@ (8002ed8 <HAL_UART_MspInit+0xc8>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	4a17      	ldr	r2, [pc, #92]	@ (8002ed8 <HAL_UART_MspInit+0xc8>)
 8002e7c:	f043 0308 	orr.w	r3, r3, #8
 8002e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e82:	4b15      	ldr	r3, [pc, #84]	@ (8002ed8 <HAL_UART_MspInit+0xc8>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ea8:	2307      	movs	r3, #7
 8002eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eae:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4809      	ldr	r0, [pc, #36]	@ (8002edc <HAL_UART_MspInit+0xcc>)
 8002eb6:	f000 ff03 	bl	8003cc0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	2027      	movs	r0, #39	@ 0x27
 8002ec0:	f000 fe35 	bl	8003b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ec4:	2027      	movs	r0, #39	@ 0x27
 8002ec6:	f000 fe4e 	bl	8003b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002eca:	bf00      	nop
 8002ecc:	37a8      	adds	r7, #168	@ 0xa8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40004800 	.word	0x40004800
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40020c00 	.word	0x40020c00

08002ee0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002ee4:	4b14      	ldr	r3, [pc, #80]	@ (8002f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ee6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002eea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002eec:	4b12      	ldr	r3, [pc, #72]	@ (8002f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002eee:	2206      	movs	r2, #6
 8002ef0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002ef2:	4b11      	ldr	r3, [pc, #68]	@ (8002f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002efe:	4b0e      	ldr	r3, [pc, #56]	@ (8002f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f00:	2202      	movs	r2, #2
 8002f02:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002f04:	4b0c      	ldr	r3, [pc, #48]	@ (8002f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002f10:	4b09      	ldr	r3, [pc, #36]	@ (8002f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002f16:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002f22:	4805      	ldr	r0, [pc, #20]	@ (8002f38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002f24:	f001 fe2d 	bl	8004b82 <HAL_PCD_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002f2e:	f7ff fc27 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000480 	.word	0x20000480

08002f3c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b0ac      	sub	sp, #176	@ 0xb0
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f54:	f107 0318 	add.w	r3, r7, #24
 8002f58:	2284      	movs	r2, #132	@ 0x84
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f007 fd55 	bl	800aa0c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f6a:	d159      	bne.n	8003020 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002f6c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002f70:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f78:	f107 0318 	add.w	r3, r7, #24
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f002 fc15 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002f88:	f7ff fbfa 	bl	8002780 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f8c:	4b26      	ldr	r3, [pc, #152]	@ (8003028 <HAL_PCD_MspInit+0xec>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f90:	4a25      	ldr	r2, [pc, #148]	@ (8003028 <HAL_PCD_MspInit+0xec>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f98:	4b23      	ldr	r3, [pc, #140]	@ (8003028 <HAL_PCD_MspInit+0xec>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002fa4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002fa8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002fbe:	230a      	movs	r3, #10
 8002fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4818      	ldr	r0, [pc, #96]	@ (800302c <HAL_PCD_MspInit+0xf0>)
 8002fcc:	f000 fe78 	bl	8003cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002fd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002fe4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4810      	ldr	r0, [pc, #64]	@ (800302c <HAL_PCD_MspInit+0xf0>)
 8002fec:	f000 fe68 	bl	8003cc0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8003028 <HAL_PCD_MspInit+0xec>)
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8003028 <HAL_PCD_MspInit+0xec>)
 8002ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ffa:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8003028 <HAL_PCD_MspInit+0xec>)
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <HAL_PCD_MspInit+0xec>)
 800300a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300c:	4a06      	ldr	r2, [pc, #24]	@ (8003028 <HAL_PCD_MspInit+0xec>)
 800300e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003012:	6453      	str	r3, [r2, #68]	@ 0x44
 8003014:	4b04      	ldr	r3, [pc, #16]	@ (8003028 <HAL_PCD_MspInit+0xec>)
 8003016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003018:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003020:	bf00      	nop
 8003022:	37b0      	adds	r7, #176	@ 0xb0
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40023800 	.word	0x40023800
 800302c:	40020000 	.word	0x40020000

08003030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003030:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003068 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003034:	f7ff fce8 	bl	8002a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003038:	480c      	ldr	r0, [pc, #48]	@ (800306c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800303a:	490d      	ldr	r1, [pc, #52]	@ (8003070 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800303c:	4a0d      	ldr	r2, [pc, #52]	@ (8003074 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800303e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003040:	e002      	b.n	8003048 <LoopCopyDataInit>

08003042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003046:	3304      	adds	r3, #4

08003048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800304a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800304c:	d3f9      	bcc.n	8003042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800304e:	4a0a      	ldr	r2, [pc, #40]	@ (8003078 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003050:	4c0a      	ldr	r4, [pc, #40]	@ (800307c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003054:	e001      	b.n	800305a <LoopFillZerobss>

08003056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003058:	3204      	adds	r2, #4

0800305a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800305a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800305c:	d3fb      	bcc.n	8003056 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800305e:	f007 fd3f 	bl	800aae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003062:	f7fe fb9d 	bl	80017a0 <main>
  bx  lr    
 8003066:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003068:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800306c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003070:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003074:	0800daf0 	.word	0x0800daf0
  ldr r2, =_sbss
 8003078:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800307c:	20000ab0 	.word	0x20000ab0

08003080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003080:	e7fe      	b.n	8003080 <ADC_IRQHandler>

08003082 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003086:	2003      	movs	r0, #3
 8003088:	f000 fd46 	bl	8003b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800308c:	2000      	movs	r0, #0
 800308e:	f000 f805 	bl	800309c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003092:	f7ff fb7b 	bl	800278c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030a4:	4b12      	ldr	r3, [pc, #72]	@ (80030f0 <HAL_InitTick+0x54>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b12      	ldr	r3, [pc, #72]	@ (80030f4 <HAL_InitTick+0x58>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	4619      	mov	r1, r3
 80030ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fd61 	bl	8003b82 <HAL_SYSTICK_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e00e      	b.n	80030e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b0f      	cmp	r3, #15
 80030ce:	d80a      	bhi.n	80030e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030d0:	2200      	movs	r2, #0
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295
 80030d8:	f000 fd29 	bl	8003b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030dc:	4a06      	ldr	r2, [pc, #24]	@ (80030f8 <HAL_InitTick+0x5c>)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	e000      	b.n	80030e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	20000020 	.word	0x20000020
 80030f4:	20000028 	.word	0x20000028
 80030f8:	20000024 	.word	0x20000024

080030fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003100:	4b06      	ldr	r3, [pc, #24]	@ (800311c <HAL_IncTick+0x20>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <HAL_IncTick+0x24>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4413      	add	r3, r2
 800310c:	4a04      	ldr	r2, [pc, #16]	@ (8003120 <HAL_IncTick+0x24>)
 800310e:	6013      	str	r3, [r2, #0]
}
 8003110:	bf00      	nop
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000028 	.word	0x20000028
 8003120:	20000960 	.word	0x20000960

08003124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return uwTick;
 8003128:	4b03      	ldr	r3, [pc, #12]	@ (8003138 <HAL_GetTick+0x14>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	20000960 	.word	0x20000960

0800313c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003144:	f7ff ffee 	bl	8003124 <HAL_GetTick>
 8003148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d005      	beq.n	8003162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003156:	4b0a      	ldr	r3, [pc, #40]	@ (8003180 <HAL_Delay+0x44>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003162:	bf00      	nop
 8003164:	f7ff ffde 	bl	8003124 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	429a      	cmp	r2, r3
 8003172:	d8f7      	bhi.n	8003164 <HAL_Delay+0x28>
  {
  }
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000028 	.word	0x20000028

08003184 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e031      	b.n	80031fe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fd ff92 	bl	80010cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d116      	bne.n	80031f0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031c6:	4b10      	ldr	r3, [pc, #64]	@ (8003208 <HAL_ADC_Init+0x84>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	f043 0202 	orr.w	r2, r3, #2
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fad6 	bl	8003784 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	f023 0303 	bic.w	r3, r3, #3
 80031e6:	f043 0201 	orr.w	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80031ee:	e001      	b.n	80031f4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	ffffeefd 	.word	0xffffeefd

0800320c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_ADC_Start+0x1a>
 8003222:	2302      	movs	r3, #2
 8003224:	e0ad      	b.n	8003382 <HAL_ADC_Start+0x176>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d018      	beq.n	800326e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800324c:	4b50      	ldr	r3, [pc, #320]	@ (8003390 <HAL_ADC_Start+0x184>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a50      	ldr	r2, [pc, #320]	@ (8003394 <HAL_ADC_Start+0x188>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0c9a      	lsrs	r2, r3, #18
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003260:	e002      	b.n	8003268 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3b01      	subs	r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f9      	bne.n	8003262 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d175      	bne.n	8003368 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003280:	4b45      	ldr	r3, [pc, #276]	@ (8003398 <HAL_ADC_Start+0x18c>)
 8003282:	4013      	ands	r3, r2
 8003284:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80032a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b6:	d106      	bne.n	80032c6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032bc:	f023 0206 	bic.w	r2, r3, #6
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	645a      	str	r2, [r3, #68]	@ 0x44
 80032c4:	e002      	b.n	80032cc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80032dc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80032de:	4b2f      	ldr	r3, [pc, #188]	@ (800339c <HAL_ADC_Start+0x190>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 031f 	and.w	r3, r3, #31
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10f      	bne.n	800330a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d143      	bne.n	8003380 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	e03a      	b.n	8003380 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a24      	ldr	r2, [pc, #144]	@ (80033a0 <HAL_ADC_Start+0x194>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10e      	bne.n	8003332 <HAL_ADC_Start+0x126>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d107      	bne.n	8003332 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003330:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003332:	4b1a      	ldr	r3, [pc, #104]	@ (800339c <HAL_ADC_Start+0x190>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b00      	cmp	r3, #0
 800333c:	d120      	bne.n	8003380 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a18      	ldr	r2, [pc, #96]	@ (80033a4 <HAL_ADC_Start+0x198>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d11b      	bne.n	8003380 <HAL_ADC_Start+0x174>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d114      	bne.n	8003380 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	e00b      	b.n	8003380 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	f043 0210 	orr.w	r2, r3, #16
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	20000020 	.word	0x20000020
 8003394:	431bde83 	.word	0x431bde83
 8003398:	fffff8fe 	.word	0xfffff8fe
 800339c:	40012300 	.word	0x40012300
 80033a0:	40012000 	.word	0x40012000
 80033a4:	40012200 	.word	0x40012200

080033a8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033c4:	d113      	bne.n	80033ee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d4:	d10b      	bne.n	80033ee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e063      	b.n	80034b6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80033ee:	f7ff fe99 	bl	8003124 <HAL_GetTick>
 80033f2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033f4:	e021      	b.n	800343a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d01d      	beq.n	800343a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d007      	beq.n	8003414 <HAL_ADC_PollForConversion+0x6c>
 8003404:	f7ff fe8e 	bl	8003124 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d212      	bcs.n	800343a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d00b      	beq.n	800343a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	f043 0204 	orr.w	r2, r3, #4
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e03d      	b.n	80034b6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d1d6      	bne.n	80033f6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0212 	mvn.w	r2, #18
 8003450:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003456:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d123      	bne.n	80034b4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003470:	2b00      	cmp	r3, #0
 8003472:	d11f      	bne.n	80034b4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800347e:	2b00      	cmp	r3, #0
 8003480:	d006      	beq.n	8003490 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800348c:	2b00      	cmp	r3, #0
 800348e:	d111      	bne.n	80034b4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d105      	bne.n	80034b4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	f043 0201 	orr.w	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x1c>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e136      	b.n	8003762 <HAL_ADC_ConfigChannel+0x28a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b09      	cmp	r3, #9
 8003502:	d93a      	bls.n	800357a <HAL_ADC_ConfigChannel+0xa2>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800350c:	d035      	beq.n	800357a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68d9      	ldr	r1, [r3, #12]
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	b29b      	uxth	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	4613      	mov	r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4413      	add	r3, r2
 8003522:	3b1e      	subs	r3, #30
 8003524:	2207      	movs	r2, #7
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43da      	mvns	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	400a      	ands	r2, r1
 8003532:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a8d      	ldr	r2, [pc, #564]	@ (8003770 <HAL_ADC_ConfigChannel+0x298>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d10a      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68d9      	ldr	r1, [r3, #12]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	061a      	lsls	r2, r3, #24
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003552:	e035      	b.n	80035c0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68d9      	ldr	r1, [r3, #12]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	4618      	mov	r0, r3
 8003566:	4603      	mov	r3, r0
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4403      	add	r3, r0
 800356c:	3b1e      	subs	r3, #30
 800356e:	409a      	lsls	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003578:	e022      	b.n	80035c0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6919      	ldr	r1, [r3, #16]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	b29b      	uxth	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	2207      	movs	r2, #7
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43da      	mvns	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	400a      	ands	r2, r1
 800359c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6919      	ldr	r1, [r3, #16]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	4618      	mov	r0, r3
 80035b0:	4603      	mov	r3, r0
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4403      	add	r3, r0
 80035b6:	409a      	lsls	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b06      	cmp	r3, #6
 80035c6:	d824      	bhi.n	8003612 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	3b05      	subs	r3, #5
 80035da:	221f      	movs	r2, #31
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43da      	mvns	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	400a      	ands	r2, r1
 80035e8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	4618      	mov	r0, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	3b05      	subs	r3, #5
 8003604:	fa00 f203 	lsl.w	r2, r0, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003610:	e04c      	b.n	80036ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b0c      	cmp	r3, #12
 8003618:	d824      	bhi.n	8003664 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	3b23      	subs	r3, #35	@ 0x23
 800362c:	221f      	movs	r2, #31
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43da      	mvns	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	400a      	ands	r2, r1
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	4618      	mov	r0, r3
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	3b23      	subs	r3, #35	@ 0x23
 8003656:	fa00 f203 	lsl.w	r2, r0, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	631a      	str	r2, [r3, #48]	@ 0x30
 8003662:	e023      	b.n	80036ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	3b41      	subs	r3, #65	@ 0x41
 8003676:	221f      	movs	r2, #31
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43da      	mvns	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	400a      	ands	r2, r1
 8003684:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	4618      	mov	r0, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	3b41      	subs	r3, #65	@ 0x41
 80036a0:	fa00 f203 	lsl.w	r2, r0, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a30      	ldr	r2, [pc, #192]	@ (8003774 <HAL_ADC_ConfigChannel+0x29c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10a      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x1f4>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036be:	d105      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80036c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003778 <HAL_ADC_ConfigChannel+0x2a0>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003778 <HAL_ADC_ConfigChannel+0x2a0>)
 80036c6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80036ca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a28      	ldr	r2, [pc, #160]	@ (8003774 <HAL_ADC_ConfigChannel+0x29c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10f      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x21e>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b12      	cmp	r3, #18
 80036dc:	d10b      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80036de:	4b26      	ldr	r3, [pc, #152]	@ (8003778 <HAL_ADC_ConfigChannel+0x2a0>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4a25      	ldr	r2, [pc, #148]	@ (8003778 <HAL_ADC_ConfigChannel+0x2a0>)
 80036e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80036e8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80036ea:	4b23      	ldr	r3, [pc, #140]	@ (8003778 <HAL_ADC_ConfigChannel+0x2a0>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	4a22      	ldr	r2, [pc, #136]	@ (8003778 <HAL_ADC_ConfigChannel+0x2a0>)
 80036f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036f4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003774 <HAL_ADC_ConfigChannel+0x29c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d12b      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x280>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1a      	ldr	r2, [pc, #104]	@ (8003770 <HAL_ADC_ConfigChannel+0x298>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d003      	beq.n	8003712 <HAL_ADC_ConfigChannel+0x23a>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b11      	cmp	r3, #17
 8003710:	d122      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003712:	4b19      	ldr	r3, [pc, #100]	@ (8003778 <HAL_ADC_ConfigChannel+0x2a0>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4a18      	ldr	r2, [pc, #96]	@ (8003778 <HAL_ADC_ConfigChannel+0x2a0>)
 8003718:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800371c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800371e:	4b16      	ldr	r3, [pc, #88]	@ (8003778 <HAL_ADC_ConfigChannel+0x2a0>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4a15      	ldr	r2, [pc, #84]	@ (8003778 <HAL_ADC_ConfigChannel+0x2a0>)
 8003724:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003728:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a10      	ldr	r2, [pc, #64]	@ (8003770 <HAL_ADC_ConfigChannel+0x298>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d111      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003734:	4b11      	ldr	r3, [pc, #68]	@ (800377c <HAL_ADC_ConfigChannel+0x2a4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a11      	ldr	r2, [pc, #68]	@ (8003780 <HAL_ADC_ConfigChannel+0x2a8>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	0c9a      	lsrs	r2, r3, #18
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800374a:	e002      	b.n	8003752 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3b01      	subs	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f9      	bne.n	800374c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	10000012 	.word	0x10000012
 8003774:	40012000 	.word	0x40012000
 8003778:	40012300 	.word	0x40012300
 800377c:	20000020 	.word	0x20000020
 8003780:	431bde83 	.word	0x431bde83

08003784 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800378c:	4b78      	ldr	r3, [pc, #480]	@ (8003970 <ADC_Init+0x1ec>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	4a77      	ldr	r2, [pc, #476]	@ (8003970 <ADC_Init+0x1ec>)
 8003792:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003796:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003798:	4b75      	ldr	r3, [pc, #468]	@ (8003970 <ADC_Init+0x1ec>)
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	4973      	ldr	r1, [pc, #460]	@ (8003970 <ADC_Init+0x1ec>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	021a      	lsls	r2, r3, #8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80037d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6899      	ldr	r1, [r3, #8]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	4a58      	ldr	r2, [pc, #352]	@ (8003974 <ADC_Init+0x1f0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d022      	beq.n	800385e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003826:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6899      	ldr	r1, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003848:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6899      	ldr	r1, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	e00f      	b.n	800387e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800386c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800387c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0202 	bic.w	r2, r2, #2
 800388c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6899      	ldr	r1, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	005a      	lsls	r2, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01b      	beq.n	80038e4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80038ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6859      	ldr	r1, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	3b01      	subs	r3, #1
 80038d8:	035a      	lsls	r2, r3, #13
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
 80038e2:	e007      	b.n	80038f4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003902:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	3b01      	subs	r3, #1
 8003910:	051a      	lsls	r2, r3, #20
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003928:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6899      	ldr	r1, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003936:	025a      	lsls	r2, r3, #9
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800394e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6899      	ldr	r1, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	029a      	lsls	r2, r3, #10
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	609a      	str	r2, [r3, #8]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	40012300 	.word	0x40012300
 8003974:	0f000001 	.word	0x0f000001

08003978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003988:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <__NVIC_SetPriorityGrouping+0x40>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003994:	4013      	ands	r3, r2
 8003996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039a0:	4b06      	ldr	r3, [pc, #24]	@ (80039bc <__NVIC_SetPriorityGrouping+0x44>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a6:	4a04      	ldr	r2, [pc, #16]	@ (80039b8 <__NVIC_SetPriorityGrouping+0x40>)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	60d3      	str	r3, [r2, #12]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00
 80039bc:	05fa0000 	.word	0x05fa0000

080039c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c4:	4b04      	ldr	r3, [pc, #16]	@ (80039d8 <__NVIC_GetPriorityGrouping+0x18>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	f003 0307 	and.w	r3, r3, #7
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	db0b      	blt.n	8003a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	f003 021f 	and.w	r2, r3, #31
 80039f4:	4907      	ldr	r1, [pc, #28]	@ (8003a14 <__NVIC_EnableIRQ+0x38>)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	2001      	movs	r0, #1
 80039fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	e000e100 	.word	0xe000e100

08003a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	6039      	str	r1, [r7, #0]
 8003a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	db0a      	blt.n	8003a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	490c      	ldr	r1, [pc, #48]	@ (8003a64 <__NVIC_SetPriority+0x4c>)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	0112      	lsls	r2, r2, #4
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a40:	e00a      	b.n	8003a58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	4908      	ldr	r1, [pc, #32]	@ (8003a68 <__NVIC_SetPriority+0x50>)
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	3b04      	subs	r3, #4
 8003a50:	0112      	lsls	r2, r2, #4
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	440b      	add	r3, r1
 8003a56:	761a      	strb	r2, [r3, #24]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000e100 	.word	0xe000e100
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	@ 0x24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f1c3 0307 	rsb	r3, r3, #7
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	bf28      	it	cs
 8003a8a:	2304      	movcs	r3, #4
 8003a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3304      	adds	r3, #4
 8003a92:	2b06      	cmp	r3, #6
 8003a94:	d902      	bls.n	8003a9c <NVIC_EncodePriority+0x30>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3b03      	subs	r3, #3
 8003a9a:	e000      	b.n	8003a9e <NVIC_EncodePriority+0x32>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	401a      	ands	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	43d9      	mvns	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac4:	4313      	orrs	r3, r2
         );
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3724      	adds	r7, #36	@ 0x24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ae4:	d301      	bcc.n	8003aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e00f      	b.n	8003b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aea:	4a0a      	ldr	r2, [pc, #40]	@ (8003b14 <SysTick_Config+0x40>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003af2:	210f      	movs	r1, #15
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	f7ff ff8e 	bl	8003a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003afc:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <SysTick_Config+0x40>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b02:	4b04      	ldr	r3, [pc, #16]	@ (8003b14 <SysTick_Config+0x40>)
 8003b04:	2207      	movs	r2, #7
 8003b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	e000e010 	.word	0xe000e010

08003b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff ff29 	bl	8003978 <__NVIC_SetPriorityGrouping>
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b086      	sub	sp, #24
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	4603      	mov	r3, r0
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b40:	f7ff ff3e 	bl	80039c0 <__NVIC_GetPriorityGrouping>
 8003b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	6978      	ldr	r0, [r7, #20]
 8003b4c:	f7ff ff8e 	bl	8003a6c <NVIC_EncodePriority>
 8003b50:	4602      	mov	r2, r0
 8003b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ff5d 	bl	8003a18 <__NVIC_SetPriority>
}
 8003b5e:	bf00      	nop
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ff31 	bl	80039dc <__NVIC_EnableIRQ>
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff ffa2 	bl	8003ad4 <SysTick_Config>
 8003b90:	4603      	mov	r3, r0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ba8:	f7ff fabc 	bl	8003124 <HAL_GetTick>
 8003bac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d008      	beq.n	8003bcc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2280      	movs	r2, #128	@ 0x80
 8003bbe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e052      	b.n	8003c72 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0216 	bic.w	r2, r2, #22
 8003bda:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d103      	bne.n	8003bfc <HAL_DMA_Abort+0x62>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d007      	beq.n	8003c0c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0208 	bic.w	r2, r2, #8
 8003c0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0201 	bic.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c1c:	e013      	b.n	8003c46 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c1e:	f7ff fa81 	bl	8003124 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b05      	cmp	r3, #5
 8003c2a:	d90c      	bls.n	8003c46 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2203      	movs	r2, #3
 8003c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e015      	b.n	8003c72 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e4      	bne.n	8003c1e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c58:	223f      	movs	r2, #63	@ 0x3f
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d004      	beq.n	8003c98 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2280      	movs	r2, #128	@ 0x80
 8003c92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e00c      	b.n	8003cb2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2205      	movs	r2, #5
 8003c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	@ 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	e175      	b.n	8003fcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	f040 8164 	bne.w	8003fc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d005      	beq.n	8003d16 <HAL_GPIO_Init+0x56>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d130      	bne.n	8003d78 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	2203      	movs	r2, #3
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43db      	mvns	r3, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f003 0201 	and.w	r2, r3, #1
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d017      	beq.n	8003db4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	2203      	movs	r2, #3
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d123      	bne.n	8003e08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	08da      	lsrs	r2, r3, #3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3208      	adds	r2, #8
 8003dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	220f      	movs	r2, #15
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	08da      	lsrs	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3208      	adds	r2, #8
 8003e02:	69b9      	ldr	r1, [r7, #24]
 8003e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	2203      	movs	r2, #3
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0203 	and.w	r2, r3, #3
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80be 	beq.w	8003fc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e4a:	4b66      	ldr	r3, [pc, #408]	@ (8003fe4 <HAL_GPIO_Init+0x324>)
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	4a65      	ldr	r2, [pc, #404]	@ (8003fe4 <HAL_GPIO_Init+0x324>)
 8003e50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e56:	4b63      	ldr	r3, [pc, #396]	@ (8003fe4 <HAL_GPIO_Init+0x324>)
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e62:	4a61      	ldr	r2, [pc, #388]	@ (8003fe8 <HAL_GPIO_Init+0x328>)
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	089b      	lsrs	r3, r3, #2
 8003e68:	3302      	adds	r3, #2
 8003e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	220f      	movs	r2, #15
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a58      	ldr	r2, [pc, #352]	@ (8003fec <HAL_GPIO_Init+0x32c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d037      	beq.n	8003efe <HAL_GPIO_Init+0x23e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a57      	ldr	r2, [pc, #348]	@ (8003ff0 <HAL_GPIO_Init+0x330>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d031      	beq.n	8003efa <HAL_GPIO_Init+0x23a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a56      	ldr	r2, [pc, #344]	@ (8003ff4 <HAL_GPIO_Init+0x334>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d02b      	beq.n	8003ef6 <HAL_GPIO_Init+0x236>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a55      	ldr	r2, [pc, #340]	@ (8003ff8 <HAL_GPIO_Init+0x338>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d025      	beq.n	8003ef2 <HAL_GPIO_Init+0x232>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a54      	ldr	r2, [pc, #336]	@ (8003ffc <HAL_GPIO_Init+0x33c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01f      	beq.n	8003eee <HAL_GPIO_Init+0x22e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a53      	ldr	r2, [pc, #332]	@ (8004000 <HAL_GPIO_Init+0x340>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d019      	beq.n	8003eea <HAL_GPIO_Init+0x22a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a52      	ldr	r2, [pc, #328]	@ (8004004 <HAL_GPIO_Init+0x344>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_GPIO_Init+0x226>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a51      	ldr	r2, [pc, #324]	@ (8004008 <HAL_GPIO_Init+0x348>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00d      	beq.n	8003ee2 <HAL_GPIO_Init+0x222>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a50      	ldr	r2, [pc, #320]	@ (800400c <HAL_GPIO_Init+0x34c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d007      	beq.n	8003ede <HAL_GPIO_Init+0x21e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a4f      	ldr	r2, [pc, #316]	@ (8004010 <HAL_GPIO_Init+0x350>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <HAL_GPIO_Init+0x21a>
 8003ed6:	2309      	movs	r3, #9
 8003ed8:	e012      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003eda:	230a      	movs	r3, #10
 8003edc:	e010      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003ede:	2308      	movs	r3, #8
 8003ee0:	e00e      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003ee2:	2307      	movs	r3, #7
 8003ee4:	e00c      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003ee6:	2306      	movs	r3, #6
 8003ee8:	e00a      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003eea:	2305      	movs	r3, #5
 8003eec:	e008      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003eee:	2304      	movs	r3, #4
 8003ef0:	e006      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e004      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e002      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003efe:	2300      	movs	r3, #0
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	f002 0203 	and.w	r2, r2, #3
 8003f06:	0092      	lsls	r2, r2, #2
 8003f08:	4093      	lsls	r3, r2
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f10:	4935      	ldr	r1, [pc, #212]	@ (8003fe8 <HAL_GPIO_Init+0x328>)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	3302      	adds	r3, #2
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f1e:	4b3d      	ldr	r3, [pc, #244]	@ (8004014 <HAL_GPIO_Init+0x354>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	43db      	mvns	r3, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f42:	4a34      	ldr	r2, [pc, #208]	@ (8004014 <HAL_GPIO_Init+0x354>)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f48:	4b32      	ldr	r3, [pc, #200]	@ (8004014 <HAL_GPIO_Init+0x354>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f6c:	4a29      	ldr	r2, [pc, #164]	@ (8004014 <HAL_GPIO_Init+0x354>)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f72:	4b28      	ldr	r3, [pc, #160]	@ (8004014 <HAL_GPIO_Init+0x354>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f96:	4a1f      	ldr	r2, [pc, #124]	@ (8004014 <HAL_GPIO_Init+0x354>)
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004014 <HAL_GPIO_Init+0x354>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fc0:	4a14      	ldr	r2, [pc, #80]	@ (8004014 <HAL_GPIO_Init+0x354>)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	2b0f      	cmp	r3, #15
 8003fd0:	f67f ae86 	bls.w	8003ce0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	3724      	adds	r7, #36	@ 0x24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40013800 	.word	0x40013800
 8003fec:	40020000 	.word	0x40020000
 8003ff0:	40020400 	.word	0x40020400
 8003ff4:	40020800 	.word	0x40020800
 8003ff8:	40020c00 	.word	0x40020c00
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40021400 	.word	0x40021400
 8004004:	40021800 	.word	0x40021800
 8004008:	40021c00 	.word	0x40021c00
 800400c:	40022000 	.word	0x40022000
 8004010:	40022400 	.word	0x40022400
 8004014:	40013c00 	.word	0x40013c00

08004018 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	887b      	ldrh	r3, [r7, #2]
 800402a:	4013      	ands	r3, r2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
 8004034:	e001      	b.n	800403a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
 8004054:	4613      	mov	r3, r2
 8004056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004058:	787b      	ldrb	r3, [r7, #1]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004064:	e003      	b.n	800406e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004066:	887b      	ldrh	r3, [r7, #2]
 8004068:	041a      	lsls	r2, r3, #16
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	619a      	str	r2, [r3, #24]
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800407a:	b480      	push	{r7}
 800407c:	b085      	sub	sp, #20
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	460b      	mov	r3, r1
 8004084:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800408c:	887a      	ldrh	r2, [r7, #2]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4013      	ands	r3, r2
 8004092:	041a      	lsls	r2, r3, #16
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	43d9      	mvns	r1, r3
 8004098:	887b      	ldrh	r3, [r7, #2]
 800409a:	400b      	ands	r3, r1
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	619a      	str	r2, [r3, #24]
}
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
	...

080040b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040ba:	4b08      	ldr	r3, [pc, #32]	@ (80040dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040bc:	695a      	ldr	r2, [r3, #20]
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d006      	beq.n	80040d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040c6:	4a05      	ldr	r2, [pc, #20]	@ (80040dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe fb2e 	bl	8002730 <HAL_GPIO_EXTI_Callback>
  }
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40013c00 	.word	0x40013c00

080040e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e08b      	b.n	800420a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7fd f9a0 	bl	800144c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2224      	movs	r2, #36	@ 0x24
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 0201 	bic.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004130:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004140:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d107      	bne.n	800415a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	e006      	b.n	8004168 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004166:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d108      	bne.n	8004182 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	e007      	b.n	8004192 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004190:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6859      	ldr	r1, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4b1d      	ldr	r3, [pc, #116]	@ (8004214 <HAL_I2C_Init+0x134>)
 800419e:	430b      	orrs	r3, r1
 80041a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69d9      	ldr	r1, [r3, #28]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1a      	ldr	r2, [r3, #32]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	02008000 	.word	0x02008000

08004218 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	607a      	str	r2, [r7, #4]
 8004222:	461a      	mov	r2, r3
 8004224:	460b      	mov	r3, r1
 8004226:	817b      	strh	r3, [r7, #10]
 8004228:	4613      	mov	r3, r2
 800422a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b20      	cmp	r3, #32
 8004236:	f040 80fd 	bne.w	8004434 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_I2C_Master_Transmit+0x30>
 8004244:	2302      	movs	r3, #2
 8004246:	e0f6      	b.n	8004436 <HAL_I2C_Master_Transmit+0x21e>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004250:	f7fe ff68 	bl	8003124 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	2319      	movs	r3, #25
 800425c:	2201      	movs	r2, #1
 800425e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 fa00 	bl	8004668 <I2C_WaitOnFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e0e1      	b.n	8004436 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2221      	movs	r2, #33	@ 0x21
 8004276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2210      	movs	r2, #16
 800427e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	893a      	ldrh	r2, [r7, #8]
 8004292:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2bff      	cmp	r3, #255	@ 0xff
 80042a2:	d906      	bls.n	80042b2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	22ff      	movs	r2, #255	@ 0xff
 80042a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80042aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	e007      	b.n	80042c2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80042bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042c0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d024      	beq.n	8004314 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	781a      	ldrb	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	3301      	adds	r3, #1
 8004302:	b2da      	uxtb	r2, r3
 8004304:	8979      	ldrh	r1, [r7, #10]
 8004306:	4b4e      	ldr	r3, [pc, #312]	@ (8004440 <HAL_I2C_Master_Transmit+0x228>)
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 fb6f 	bl	80049f0 <I2C_TransferConfig>
 8004312:	e066      	b.n	80043e2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004318:	b2da      	uxtb	r2, r3
 800431a:	8979      	ldrh	r1, [r7, #10]
 800431c:	4b48      	ldr	r3, [pc, #288]	@ (8004440 <HAL_I2C_Master_Transmit+0x228>)
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fb64 	bl	80049f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004328:	e05b      	b.n	80043e2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	6a39      	ldr	r1, [r7, #32]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f9f3 	bl	800471a <I2C_WaitOnTXISFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e07b      	b.n	8004436 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004342:	781a      	ldrb	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	d034      	beq.n	80043e2 <HAL_I2C_Master_Transmit+0x1ca>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437c:	2b00      	cmp	r3, #0
 800437e:	d130      	bne.n	80043e2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	2200      	movs	r2, #0
 8004388:	2180      	movs	r1, #128	@ 0x80
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f96c 	bl	8004668 <I2C_WaitOnFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e04d      	b.n	8004436 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2bff      	cmp	r3, #255	@ 0xff
 80043a2:	d90e      	bls.n	80043c2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	22ff      	movs	r2, #255	@ 0xff
 80043a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	8979      	ldrh	r1, [r7, #10]
 80043b2:	2300      	movs	r3, #0
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fb18 	bl	80049f0 <I2C_TransferConfig>
 80043c0:	e00f      	b.n	80043e2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	8979      	ldrh	r1, [r7, #10]
 80043d4:	2300      	movs	r3, #0
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 fb07 	bl	80049f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d19e      	bne.n	800432a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	6a39      	ldr	r1, [r7, #32]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 f9d9 	bl	80047a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e01a      	b.n	8004436 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2220      	movs	r2, #32
 8004406:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6859      	ldr	r1, [r3, #4]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b0c      	ldr	r3, [pc, #48]	@ (8004444 <HAL_I2C_Master_Transmit+0x22c>)
 8004414:	400b      	ands	r3, r1
 8004416:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	e000      	b.n	8004436 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004434:	2302      	movs	r3, #2
  }
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	80002000 	.word	0x80002000
 8004444:	fe00e800 	.word	0xfe00e800

08004448 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	@ 0x28
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	607a      	str	r2, [r7, #4]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	460b      	mov	r3, r1
 8004456:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b20      	cmp	r3, #32
 8004466:	f040 80d2 	bne.w	800460e <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004474:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004478:	d101      	bne.n	800447e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800447a:	2302      	movs	r3, #2
 800447c:	e0c8      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_I2C_IsDeviceReady+0x44>
 8004488:	2302      	movs	r3, #2
 800448a:	e0c1      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x1c8>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2224      	movs	r2, #36	@ 0x24
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d105      	bne.n	80044b6 <HAL_I2C_IsDeviceReady+0x6e>
 80044aa:	897b      	ldrh	r3, [r7, #10]
 80044ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044b0:	4b59      	ldr	r3, [pc, #356]	@ (8004618 <HAL_I2C_IsDeviceReady+0x1d0>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	e004      	b.n	80044c0 <HAL_I2C_IsDeviceReady+0x78>
 80044b6:	897b      	ldrh	r3, [r7, #10]
 80044b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044bc:	4b57      	ldr	r3, [pc, #348]	@ (800461c <HAL_I2C_IsDeviceReady+0x1d4>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80044c6:	f7fe fe2d 	bl	8003124 <HAL_GetTick>
 80044ca:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	bf0c      	ite	eq
 80044da:	2301      	moveq	r3, #1
 80044dc:	2300      	movne	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	bf0c      	ite	eq
 80044f0:	2301      	moveq	r3, #1
 80044f2:	2300      	movne	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80044f8:	e034      	b.n	8004564 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d01a      	beq.n	8004538 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004502:	f7fe fe0f 	bl	8003124 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d302      	bcc.n	8004518 <HAL_I2C_IsDeviceReady+0xd0>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10f      	bne.n	8004538 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e06b      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b20      	cmp	r3, #32
 8004544:	bf0c      	ite	eq
 8004546:	2301      	moveq	r3, #1
 8004548:	2300      	movne	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b10      	cmp	r3, #16
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2300      	movne	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004564:	7ffb      	ldrb	r3, [r7, #31]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d102      	bne.n	8004570 <HAL_I2C_IsDeviceReady+0x128>
 800456a:	7fbb      	ldrb	r3, [r7, #30]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0c4      	beq.n	80044fa <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	2b10      	cmp	r3, #16
 800457c:	d01a      	beq.n	80045b4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2200      	movs	r2, #0
 8004586:	2120      	movs	r1, #32
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 f86d 	bl	8004668 <I2C_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e03b      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2220      	movs	r2, #32
 800459e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e02d      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2200      	movs	r2, #0
 80045bc:	2120      	movs	r1, #32
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f852 	bl	8004668 <I2C_WaitOnFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e020      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2210      	movs	r2, #16
 80045d4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2220      	movs	r2, #32
 80045dc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	3301      	adds	r3, #1
 80045e2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	f63f af5a 	bhi.w	80044a2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fa:	f043 0220 	orr.w	r2, r3, #32
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 800460e:	2302      	movs	r3, #2
  }
}
 8004610:	4618      	mov	r0, r3
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	02002000 	.word	0x02002000
 800461c:	02002800 	.word	0x02002800

08004620 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d103      	bne.n	800463e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2200      	movs	r2, #0
 800463c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b01      	cmp	r3, #1
 800464a:	d007      	beq.n	800465c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	619a      	str	r2, [r3, #24]
  }
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004678:	e03b      	b.n	80046f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	6839      	ldr	r1, [r7, #0]
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f8d6 	bl	8004830 <I2C_IsErrorOccurred>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e041      	b.n	8004712 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004694:	d02d      	beq.n	80046f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004696:	f7fe fd45 	bl	8003124 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d302      	bcc.n	80046ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d122      	bne.n	80046f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	4013      	ands	r3, r2
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	bf0c      	ite	eq
 80046bc:	2301      	moveq	r3, #1
 80046be:	2300      	movne	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	461a      	mov	r2, r3
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d113      	bne.n	80046f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ce:	f043 0220 	orr.w	r2, r3, #32
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e00f      	b.n	8004712 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699a      	ldr	r2, [r3, #24]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4013      	ands	r3, r2
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	429a      	cmp	r2, r3
 8004700:	bf0c      	ite	eq
 8004702:	2301      	moveq	r3, #1
 8004704:	2300      	movne	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	461a      	mov	r2, r3
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	429a      	cmp	r2, r3
 800470e:	d0b4      	beq.n	800467a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b084      	sub	sp, #16
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004726:	e033      	b.n	8004790 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f87f 	bl	8004830 <I2C_IsErrorOccurred>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e031      	b.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d025      	beq.n	8004790 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004744:	f7fe fcee 	bl	8003124 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	429a      	cmp	r2, r3
 8004752:	d302      	bcc.n	800475a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11a      	bne.n	8004790 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b02      	cmp	r3, #2
 8004766:	d013      	beq.n	8004790 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476c:	f043 0220 	orr.w	r2, r3, #32
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e007      	b.n	80047a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b02      	cmp	r3, #2
 800479c:	d1c4      	bne.n	8004728 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047b4:	e02f      	b.n	8004816 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f838 	bl	8004830 <I2C_IsErrorOccurred>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e02d      	b.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ca:	f7fe fcab 	bl	8003124 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d11a      	bne.n	8004816 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	d013      	beq.n	8004816 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e007      	b.n	8004826 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b20      	cmp	r3, #32
 8004822:	d1c8      	bne.n	80047b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	@ 0x28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800483c:	2300      	movs	r3, #0
 800483e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	d068      	beq.n	800492e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2210      	movs	r2, #16
 8004862:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004864:	e049      	b.n	80048fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d045      	beq.n	80048fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800486e:	f7fe fc59 	bl	8003124 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	429a      	cmp	r2, r3
 800487c:	d302      	bcc.n	8004884 <I2C_IsErrorOccurred+0x54>
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d13a      	bne.n	80048fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800488e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004896:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048a6:	d121      	bne.n	80048ec <I2C_IsErrorOccurred+0xbc>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048ae:	d01d      	beq.n	80048ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048b0:	7cfb      	ldrb	r3, [r7, #19]
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d01a      	beq.n	80048ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048c6:	f7fe fc2d 	bl	8003124 <HAL_GetTick>
 80048ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048cc:	e00e      	b.n	80048ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048ce:	f7fe fc29 	bl	8003124 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b19      	cmp	r3, #25
 80048da:	d907      	bls.n	80048ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	f043 0320 	orr.w	r3, r3, #32
 80048e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80048ea:	e006      	b.n	80048fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d1e9      	bne.n	80048ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b20      	cmp	r3, #32
 8004906:	d003      	beq.n	8004910 <I2C_IsErrorOccurred+0xe0>
 8004908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0aa      	beq.n	8004866 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004910:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004914:	2b00      	cmp	r3, #0
 8004916:	d103      	bne.n	8004920 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2220      	movs	r2, #32
 800491e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	f043 0304 	orr.w	r3, r3, #4
 8004926:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00b      	beq.n	8004958 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004950:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00b      	beq.n	800497a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	f043 0308 	orr.w	r3, r3, #8
 8004968:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004972:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00b      	beq.n	800499c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	f043 0302 	orr.w	r3, r3, #2
 800498a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004994:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800499c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01c      	beq.n	80049de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7ff fe3b 	bl	8004620 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6859      	ldr	r1, [r3, #4]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b0d      	ldr	r3, [pc, #52]	@ (80049ec <I2C_IsErrorOccurred+0x1bc>)
 80049b6:	400b      	ands	r3, r1
 80049b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	431a      	orrs	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80049de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3728      	adds	r7, #40	@ 0x28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	fe00e800 	.word	0xfe00e800

080049f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	607b      	str	r3, [r7, #4]
 80049fa:	460b      	mov	r3, r1
 80049fc:	817b      	strh	r3, [r7, #10]
 80049fe:	4613      	mov	r3, r2
 8004a00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a02:	897b      	ldrh	r3, [r7, #10]
 8004a04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a08:	7a7b      	ldrb	r3, [r7, #9]
 8004a0a:	041b      	lsls	r3, r3, #16
 8004a0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	0d5b      	lsrs	r3, r3, #21
 8004a2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004a2e:	4b08      	ldr	r3, [pc, #32]	@ (8004a50 <I2C_TransferConfig+0x60>)
 8004a30:	430b      	orrs	r3, r1
 8004a32:	43db      	mvns	r3, r3
 8004a34:	ea02 0103 	and.w	r1, r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	03ff63ff 	.word	0x03ff63ff

08004a54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d138      	bne.n	8004adc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e032      	b.n	8004ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2224      	movs	r2, #36	@ 0x24
 8004a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0201 	bic.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6819      	ldr	r1, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e000      	b.n	8004ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
  }
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b085      	sub	sp, #20
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	d139      	bne.n	8004b74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e033      	b.n	8004b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2224      	movs	r2, #36	@ 0x24
 8004b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0201 	bic.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f042 0201 	orr.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	e000      	b.n	8004b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b74:	2302      	movs	r3, #2
  }
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b086      	sub	sp, #24
 8004b86:	af02      	add	r7, sp, #8
 8004b88:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e108      	b.n	8004da6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fe f9c4 	bl	8002f3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2203      	movs	r2, #3
 8004bb8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004bc2:	d102      	bne.n	8004bca <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f004 f81a 	bl	8008c08 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	7c1a      	ldrb	r2, [r3, #16]
 8004bdc:	f88d 2000 	strb.w	r2, [sp]
 8004be0:	3304      	adds	r3, #4
 8004be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004be4:	f003 ffb6 	bl	8008b54 <USB_CoreInit>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e0d5      	b.n	8004da6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4618      	mov	r0, r3
 8004c02:	f004 f812 	bl	8008c2a <USB_SetCurrentMode>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0c6      	b.n	8004da6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c18:	2300      	movs	r3, #0
 8004c1a:	73fb      	strb	r3, [r7, #15]
 8004c1c:	e04a      	b.n	8004cb4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c1e:	7bfa      	ldrb	r2, [r7, #15]
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	3315      	adds	r3, #21
 8004c2e:	2201      	movs	r2, #1
 8004c30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c32:	7bfa      	ldrb	r2, [r7, #15]
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	3314      	adds	r3, #20
 8004c42:	7bfa      	ldrb	r2, [r7, #15]
 8004c44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c46:	7bfa      	ldrb	r2, [r7, #15]
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	b298      	uxth	r0, r3
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	332e      	adds	r3, #46	@ 0x2e
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c5e:	7bfa      	ldrb	r2, [r7, #15]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	3318      	adds	r3, #24
 8004c6e:	2200      	movs	r2, #0
 8004c70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c72:	7bfa      	ldrb	r2, [r7, #15]
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	331c      	adds	r3, #28
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c86:	7bfa      	ldrb	r2, [r7, #15]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	3320      	adds	r3, #32
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c9a:	7bfa      	ldrb	r2, [r7, #15]
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3324      	adds	r3, #36	@ 0x24
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	791b      	ldrb	r3, [r3, #4]
 8004cb8:	7bfa      	ldrb	r2, [r7, #15]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d3af      	bcc.n	8004c1e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	73fb      	strb	r3, [r7, #15]
 8004cc2:	e044      	b.n	8004d4e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cc4:	7bfa      	ldrb	r2, [r7, #15]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cda:	7bfa      	ldrb	r2, [r7, #15]
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004cec:	7bfa      	ldrb	r2, [r7, #15]
 8004cee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cf0:	7bfa      	ldrb	r2, [r7, #15]
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004d02:	2200      	movs	r2, #0
 8004d04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d06:	7bfa      	ldrb	r2, [r7, #15]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d1c:	7bfa      	ldrb	r2, [r7, #15]
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	4613      	mov	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d32:	7bfa      	ldrb	r2, [r7, #15]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	73fb      	strb	r3, [r7, #15]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	791b      	ldrb	r3, [r3, #4]
 8004d52:	7bfa      	ldrb	r2, [r7, #15]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d3b5      	bcc.n	8004cc4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	7c1a      	ldrb	r2, [r3, #16]
 8004d60:	f88d 2000 	strb.w	r2, [sp]
 8004d64:	3304      	adds	r3, #4
 8004d66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d68:	f003 ffac 	bl	8008cc4 <USB_DevInit>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2202      	movs	r2, #2
 8004d76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e013      	b.n	8004da6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	7b1b      	ldrb	r3, [r3, #12]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d102      	bne.n	8004d9a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f80b 	bl	8004db0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f004 f967 	bl	8009072 <USB_DevDisconnect>

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004dde:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <HAL_PCDEx_ActivateLPM+0x44>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	10000003 	.word	0x10000003

08004df8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dfc:	4b05      	ldr	r3, [pc, #20]	@ (8004e14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a04      	ldr	r2, [pc, #16]	@ (8004e14 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e06:	6013      	str	r3, [r2, #0]
}
 8004e08:	bf00      	nop
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40007000 	.word	0x40007000

08004e18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004e20:	2300      	movs	r3, #0
 8004e22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e291      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8087 	beq.w	8004f4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e3c:	4b96      	ldr	r3, [pc, #600]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 030c 	and.w	r3, r3, #12
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d00c      	beq.n	8004e62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e48:	4b93      	ldr	r3, [pc, #588]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 030c 	and.w	r3, r3, #12
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d112      	bne.n	8004e7a <HAL_RCC_OscConfig+0x62>
 8004e54:	4b90      	ldr	r3, [pc, #576]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e60:	d10b      	bne.n	8004e7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e62:	4b8d      	ldr	r3, [pc, #564]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d06c      	beq.n	8004f48 <HAL_RCC_OscConfig+0x130>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d168      	bne.n	8004f48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e26b      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e82:	d106      	bne.n	8004e92 <HAL_RCC_OscConfig+0x7a>
 8004e84:	4b84      	ldr	r3, [pc, #528]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a83      	ldr	r2, [pc, #524]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	e02e      	b.n	8004ef0 <HAL_RCC_OscConfig+0xd8>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10c      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x9c>
 8004e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a7e      	ldr	r2, [pc, #504]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	4b7c      	ldr	r3, [pc, #496]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a7b      	ldr	r2, [pc, #492]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004eac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e01d      	b.n	8004ef0 <HAL_RCC_OscConfig+0xd8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ebc:	d10c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0xc0>
 8004ebe:	4b76      	ldr	r3, [pc, #472]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a75      	ldr	r2, [pc, #468]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	4b73      	ldr	r3, [pc, #460]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a72      	ldr	r2, [pc, #456]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e00b      	b.n	8004ef0 <HAL_RCC_OscConfig+0xd8>
 8004ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a6e      	ldr	r2, [pc, #440]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	4b6c      	ldr	r3, [pc, #432]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a6b      	ldr	r2, [pc, #428]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d013      	beq.n	8004f20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fe f914 	bl	8003124 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f00:	f7fe f910 	bl	8003124 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b64      	cmp	r3, #100	@ 0x64
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e21f      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f12:	4b61      	ldr	r3, [pc, #388]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0xe8>
 8004f1e:	e014      	b.n	8004f4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fe f900 	bl	8003124 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f28:	f7fe f8fc 	bl	8003124 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	@ 0x64
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e20b      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3a:	4b57      	ldr	r3, [pc, #348]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x110>
 8004f46:	e000      	b.n	8004f4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d069      	beq.n	800502a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f56:	4b50      	ldr	r3, [pc, #320]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f62:	4b4d      	ldr	r3, [pc, #308]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d11c      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x190>
 8004f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d116      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f7a:	4b47      	ldr	r3, [pc, #284]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_RCC_OscConfig+0x17a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d001      	beq.n	8004f92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e1df      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f92:	4b41      	ldr	r3, [pc, #260]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	493d      	ldr	r1, [pc, #244]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa6:	e040      	b.n	800502a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d023      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fb0:	4b39      	ldr	r3, [pc, #228]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a38      	ldr	r2, [pc, #224]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fe f8b2 	bl	8003124 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc4:	f7fe f8ae 	bl	8003124 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e1bd      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd6:	4b30      	ldr	r3, [pc, #192]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f0      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4929      	ldr	r1, [pc, #164]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]
 8004ff6:	e018      	b.n	800502a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ff8:	4b27      	ldr	r3, [pc, #156]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a26      	ldr	r2, [pc, #152]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8004ffe:	f023 0301 	bic.w	r3, r3, #1
 8005002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fe f88e 	bl	8003124 <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800500a:	e008      	b.n	800501e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800500c:	f7fe f88a 	bl	8003124 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e199      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501e:	4b1e      	ldr	r3, [pc, #120]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f0      	bne.n	800500c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d038      	beq.n	80050a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d019      	beq.n	8005072 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800503e:	4b16      	ldr	r3, [pc, #88]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8005040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005042:	4a15      	ldr	r2, [pc, #84]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800504a:	f7fe f86b 	bl	8003124 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005052:	f7fe f867 	bl	8003124 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e176      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005064:	4b0c      	ldr	r3, [pc, #48]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8005066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x23a>
 8005070:	e01a      	b.n	80050a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005072:	4b09      	ldr	r3, [pc, #36]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8005074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005076:	4a08      	ldr	r2, [pc, #32]	@ (8005098 <HAL_RCC_OscConfig+0x280>)
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507e:	f7fe f851 	bl	8003124 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005084:	e00a      	b.n	800509c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005086:	f7fe f84d 	bl	8003124 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d903      	bls.n	800509c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e15c      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>
 8005098:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800509c:	4b91      	ldr	r3, [pc, #580]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 800509e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1ee      	bne.n	8005086 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80a4 	beq.w	80051fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b6:	4b8b      	ldr	r3, [pc, #556]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10d      	bne.n	80050de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80050c2:	4b88      	ldr	r3, [pc, #544]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	4a87      	ldr	r2, [pc, #540]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80050ce:	4b85      	ldr	r3, [pc, #532]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050da:	2301      	movs	r3, #1
 80050dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050de:	4b82      	ldr	r3, [pc, #520]	@ (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d118      	bne.n	800511c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80050ea:	4b7f      	ldr	r3, [pc, #508]	@ (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a7e      	ldr	r2, [pc, #504]	@ (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 80050f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050f6:	f7fe f815 	bl	8003124 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050fe:	f7fe f811 	bl	8003124 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b64      	cmp	r3, #100	@ 0x64
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e120      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005110:	4b75      	ldr	r3, [pc, #468]	@ (80052e8 <HAL_RCC_OscConfig+0x4d0>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d106      	bne.n	8005132 <HAL_RCC_OscConfig+0x31a>
 8005124:	4b6f      	ldr	r3, [pc, #444]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 8005126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005128:	4a6e      	ldr	r2, [pc, #440]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005130:	e02d      	b.n	800518e <HAL_RCC_OscConfig+0x376>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10c      	bne.n	8005154 <HAL_RCC_OscConfig+0x33c>
 800513a:	4b6a      	ldr	r3, [pc, #424]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513e:	4a69      	ldr	r2, [pc, #420]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	6713      	str	r3, [r2, #112]	@ 0x70
 8005146:	4b67      	ldr	r3, [pc, #412]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514a:	4a66      	ldr	r2, [pc, #408]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 800514c:	f023 0304 	bic.w	r3, r3, #4
 8005150:	6713      	str	r3, [r2, #112]	@ 0x70
 8005152:	e01c      	b.n	800518e <HAL_RCC_OscConfig+0x376>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b05      	cmp	r3, #5
 800515a:	d10c      	bne.n	8005176 <HAL_RCC_OscConfig+0x35e>
 800515c:	4b61      	ldr	r3, [pc, #388]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005160:	4a60      	ldr	r2, [pc, #384]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 8005162:	f043 0304 	orr.w	r3, r3, #4
 8005166:	6713      	str	r3, [r2, #112]	@ 0x70
 8005168:	4b5e      	ldr	r3, [pc, #376]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 800516a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800516c:	4a5d      	ldr	r2, [pc, #372]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	6713      	str	r3, [r2, #112]	@ 0x70
 8005174:	e00b      	b.n	800518e <HAL_RCC_OscConfig+0x376>
 8005176:	4b5b      	ldr	r3, [pc, #364]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517a:	4a5a      	ldr	r2, [pc, #360]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	6713      	str	r3, [r2, #112]	@ 0x70
 8005182:	4b58      	ldr	r3, [pc, #352]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005186:	4a57      	ldr	r2, [pc, #348]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 8005188:	f023 0304 	bic.w	r3, r3, #4
 800518c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d015      	beq.n	80051c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005196:	f7fd ffc5 	bl	8003124 <HAL_GetTick>
 800519a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519c:	e00a      	b.n	80051b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519e:	f7fd ffc1 	bl	8003124 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e0ce      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b4:	4b4b      	ldr	r3, [pc, #300]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0ee      	beq.n	800519e <HAL_RCC_OscConfig+0x386>
 80051c0:	e014      	b.n	80051ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c2:	f7fd ffaf 	bl	8003124 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c8:	e00a      	b.n	80051e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ca:	f7fd ffab 	bl	8003124 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d8:	4293      	cmp	r3, r2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e0b8      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e0:	4b40      	ldr	r3, [pc, #256]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 80051e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1ee      	bne.n	80051ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051ec:	7dfb      	ldrb	r3, [r7, #23]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d105      	bne.n	80051fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f2:	4b3c      	ldr	r3, [pc, #240]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	4a3b      	ldr	r2, [pc, #236]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 80051f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051fc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 80a4 	beq.w	8005350 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005208:	4b36      	ldr	r3, [pc, #216]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 030c 	and.w	r3, r3, #12
 8005210:	2b08      	cmp	r3, #8
 8005212:	d06b      	beq.n	80052ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d149      	bne.n	80052b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800521c:	4b31      	ldr	r3, [pc, #196]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a30      	ldr	r2, [pc, #192]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 8005222:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005228:	f7fd ff7c 	bl	8003124 <HAL_GetTick>
 800522c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005230:	f7fd ff78 	bl	8003124 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e087      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005242:	4b28      	ldr	r3, [pc, #160]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1f0      	bne.n	8005230 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69da      	ldr	r2, [r3, #28]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525c:	019b      	lsls	r3, r3, #6
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005264:	085b      	lsrs	r3, r3, #1
 8005266:	3b01      	subs	r3, #1
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005270:	061b      	lsls	r3, r3, #24
 8005272:	4313      	orrs	r3, r2
 8005274:	4a1b      	ldr	r2, [pc, #108]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 8005276:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800527a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800527c:	4b19      	ldr	r3, [pc, #100]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a18      	ldr	r2, [pc, #96]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 8005282:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fd ff4c 	bl	8003124 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005290:	f7fd ff48 	bl	8003124 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e057      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a2:	4b10      	ldr	r3, [pc, #64]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0f0      	beq.n	8005290 <HAL_RCC_OscConfig+0x478>
 80052ae:	e04f      	b.n	8005350 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b0:	4b0c      	ldr	r3, [pc, #48]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a0b      	ldr	r2, [pc, #44]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 80052b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fd ff32 	bl	8003124 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c4:	f7fd ff2e 	bl	8003124 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e03d      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d6:	4b03      	ldr	r3, [pc, #12]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1f0      	bne.n	80052c4 <HAL_RCC_OscConfig+0x4ac>
 80052e2:	e035      	b.n	8005350 <HAL_RCC_OscConfig+0x538>
 80052e4:	40023800 	.word	0x40023800
 80052e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80052ec:	4b1b      	ldr	r3, [pc, #108]	@ (800535c <HAL_RCC_OscConfig+0x544>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d028      	beq.n	800534c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005304:	429a      	cmp	r2, r3
 8005306:	d121      	bne.n	800534c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005312:	429a      	cmp	r2, r3
 8005314:	d11a      	bne.n	800534c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800531c:	4013      	ands	r3, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005322:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005324:	4293      	cmp	r3, r2
 8005326:	d111      	bne.n	800534c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005332:	085b      	lsrs	r3, r3, #1
 8005334:	3b01      	subs	r3, #1
 8005336:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005338:	429a      	cmp	r2, r3
 800533a:	d107      	bne.n	800534c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005346:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005348:	429a      	cmp	r2, r3
 800534a:	d001      	beq.n	8005350 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40023800 	.word	0x40023800

08005360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0d0      	b.n	800551a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005378:	4b6a      	ldr	r3, [pc, #424]	@ (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d910      	bls.n	80053a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005386:	4b67      	ldr	r3, [pc, #412]	@ (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f023 020f 	bic.w	r2, r3, #15
 800538e:	4965      	ldr	r1, [pc, #404]	@ (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	4313      	orrs	r3, r2
 8005394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005396:	4b63      	ldr	r3, [pc, #396]	@ (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d001      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e0b8      	b.n	800551a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d020      	beq.n	80053f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053c0:	4b59      	ldr	r3, [pc, #356]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	4a58      	ldr	r2, [pc, #352]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 80053c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d005      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053d8:	4b53      	ldr	r3, [pc, #332]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	4a52      	ldr	r2, [pc, #328]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 80053de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e4:	4b50      	ldr	r3, [pc, #320]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	494d      	ldr	r1, [pc, #308]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d040      	beq.n	8005484 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d107      	bne.n	800541a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540a:	4b47      	ldr	r3, [pc, #284]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d115      	bne.n	8005442 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e07f      	b.n	800551a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d107      	bne.n	8005432 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005422:	4b41      	ldr	r3, [pc, #260]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d109      	bne.n	8005442 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e073      	b.n	800551a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005432:	4b3d      	ldr	r3, [pc, #244]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e06b      	b.n	800551a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005442:	4b39      	ldr	r3, [pc, #228]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f023 0203 	bic.w	r2, r3, #3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	4936      	ldr	r1, [pc, #216]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 8005450:	4313      	orrs	r3, r2
 8005452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005454:	f7fd fe66 	bl	8003124 <HAL_GetTick>
 8005458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545a:	e00a      	b.n	8005472 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800545c:	f7fd fe62 	bl	8003124 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800546a:	4293      	cmp	r3, r2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e053      	b.n	800551a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005472:	4b2d      	ldr	r3, [pc, #180]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 020c 	and.w	r2, r3, #12
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	429a      	cmp	r2, r3
 8005482:	d1eb      	bne.n	800545c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005484:	4b27      	ldr	r3, [pc, #156]	@ (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d210      	bcs.n	80054b4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005492:	4b24      	ldr	r3, [pc, #144]	@ (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f023 020f 	bic.w	r2, r3, #15
 800549a:	4922      	ldr	r1, [pc, #136]	@ (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	4313      	orrs	r3, r2
 80054a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a2:	4b20      	ldr	r3, [pc, #128]	@ (8005524 <HAL_RCC_ClockConfig+0x1c4>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d001      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e032      	b.n	800551a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c0:	4b19      	ldr	r3, [pc, #100]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	4916      	ldr	r1, [pc, #88]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054de:	4b12      	ldr	r3, [pc, #72]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	490e      	ldr	r1, [pc, #56]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054f2:	f000 f821 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 80054f6:	4602      	mov	r2, r0
 80054f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005528 <HAL_RCC_ClockConfig+0x1c8>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	091b      	lsrs	r3, r3, #4
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	490a      	ldr	r1, [pc, #40]	@ (800552c <HAL_RCC_ClockConfig+0x1cc>)
 8005504:	5ccb      	ldrb	r3, [r1, r3]
 8005506:	fa22 f303 	lsr.w	r3, r2, r3
 800550a:	4a09      	ldr	r2, [pc, #36]	@ (8005530 <HAL_RCC_ClockConfig+0x1d0>)
 800550c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800550e:	4b09      	ldr	r3, [pc, #36]	@ (8005534 <HAL_RCC_ClockConfig+0x1d4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f7fd fdc2 	bl	800309c <HAL_InitTick>

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40023c00 	.word	0x40023c00
 8005528:	40023800 	.word	0x40023800
 800552c:	0800d6a0 	.word	0x0800d6a0
 8005530:	20000020 	.word	0x20000020
 8005534:	20000024 	.word	0x20000024

08005538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800553c:	b094      	sub	sp, #80	@ 0x50
 800553e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	647b      	str	r3, [r7, #68]	@ 0x44
 8005544:	2300      	movs	r3, #0
 8005546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005548:	2300      	movs	r3, #0
 800554a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005550:	4b79      	ldr	r3, [pc, #484]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 030c 	and.w	r3, r3, #12
 8005558:	2b08      	cmp	r3, #8
 800555a:	d00d      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0x40>
 800555c:	2b08      	cmp	r3, #8
 800555e:	f200 80e1 	bhi.w	8005724 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_RCC_GetSysClockFreq+0x34>
 8005566:	2b04      	cmp	r3, #4
 8005568:	d003      	beq.n	8005572 <HAL_RCC_GetSysClockFreq+0x3a>
 800556a:	e0db      	b.n	8005724 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800556c:	4b73      	ldr	r3, [pc, #460]	@ (800573c <HAL_RCC_GetSysClockFreq+0x204>)
 800556e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005570:	e0db      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005572:	4b73      	ldr	r3, [pc, #460]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x208>)
 8005574:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005576:	e0d8      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005578:	4b6f      	ldr	r3, [pc, #444]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005580:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005582:	4b6d      	ldr	r3, [pc, #436]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d063      	beq.n	8005656 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800558e:	4b6a      	ldr	r3, [pc, #424]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	099b      	lsrs	r3, r3, #6
 8005594:	2200      	movs	r2, #0
 8005596:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005598:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800559a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80055a2:	2300      	movs	r3, #0
 80055a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80055a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80055aa:	4622      	mov	r2, r4
 80055ac:	462b      	mov	r3, r5
 80055ae:	f04f 0000 	mov.w	r0, #0
 80055b2:	f04f 0100 	mov.w	r1, #0
 80055b6:	0159      	lsls	r1, r3, #5
 80055b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055bc:	0150      	lsls	r0, r2, #5
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	4621      	mov	r1, r4
 80055c4:	1a51      	subs	r1, r2, r1
 80055c6:	6139      	str	r1, [r7, #16]
 80055c8:	4629      	mov	r1, r5
 80055ca:	eb63 0301 	sbc.w	r3, r3, r1
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	f04f 0300 	mov.w	r3, #0
 80055d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055dc:	4659      	mov	r1, fp
 80055de:	018b      	lsls	r3, r1, #6
 80055e0:	4651      	mov	r1, sl
 80055e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055e6:	4651      	mov	r1, sl
 80055e8:	018a      	lsls	r2, r1, #6
 80055ea:	4651      	mov	r1, sl
 80055ec:	ebb2 0801 	subs.w	r8, r2, r1
 80055f0:	4659      	mov	r1, fp
 80055f2:	eb63 0901 	sbc.w	r9, r3, r1
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800560a:	4690      	mov	r8, r2
 800560c:	4699      	mov	r9, r3
 800560e:	4623      	mov	r3, r4
 8005610:	eb18 0303 	adds.w	r3, r8, r3
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	462b      	mov	r3, r5
 8005618:	eb49 0303 	adc.w	r3, r9, r3
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800562a:	4629      	mov	r1, r5
 800562c:	024b      	lsls	r3, r1, #9
 800562e:	4621      	mov	r1, r4
 8005630:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005634:	4621      	mov	r1, r4
 8005636:	024a      	lsls	r2, r1, #9
 8005638:	4610      	mov	r0, r2
 800563a:	4619      	mov	r1, r3
 800563c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800563e:	2200      	movs	r2, #0
 8005640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005644:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005648:	f7fb faee 	bl	8000c28 <__aeabi_uldivmod>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4613      	mov	r3, r2
 8005652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005654:	e058      	b.n	8005708 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005656:	4b38      	ldr	r3, [pc, #224]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	099b      	lsrs	r3, r3, #6
 800565c:	2200      	movs	r2, #0
 800565e:	4618      	mov	r0, r3
 8005660:	4611      	mov	r1, r2
 8005662:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005666:	623b      	str	r3, [r7, #32]
 8005668:	2300      	movs	r3, #0
 800566a:	627b      	str	r3, [r7, #36]	@ 0x24
 800566c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005670:	4642      	mov	r2, r8
 8005672:	464b      	mov	r3, r9
 8005674:	f04f 0000 	mov.w	r0, #0
 8005678:	f04f 0100 	mov.w	r1, #0
 800567c:	0159      	lsls	r1, r3, #5
 800567e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005682:	0150      	lsls	r0, r2, #5
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4641      	mov	r1, r8
 800568a:	ebb2 0a01 	subs.w	sl, r2, r1
 800568e:	4649      	mov	r1, r9
 8005690:	eb63 0b01 	sbc.w	fp, r3, r1
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056a8:	ebb2 040a 	subs.w	r4, r2, sl
 80056ac:	eb63 050b 	sbc.w	r5, r3, fp
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	00eb      	lsls	r3, r5, #3
 80056ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056be:	00e2      	lsls	r2, r4, #3
 80056c0:	4614      	mov	r4, r2
 80056c2:	461d      	mov	r5, r3
 80056c4:	4643      	mov	r3, r8
 80056c6:	18e3      	adds	r3, r4, r3
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	464b      	mov	r3, r9
 80056cc:	eb45 0303 	adc.w	r3, r5, r3
 80056d0:	607b      	str	r3, [r7, #4]
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056de:	4629      	mov	r1, r5
 80056e0:	028b      	lsls	r3, r1, #10
 80056e2:	4621      	mov	r1, r4
 80056e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056e8:	4621      	mov	r1, r4
 80056ea:	028a      	lsls	r2, r1, #10
 80056ec:	4610      	mov	r0, r2
 80056ee:	4619      	mov	r1, r3
 80056f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056f2:	2200      	movs	r2, #0
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	61fa      	str	r2, [r7, #28]
 80056f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056fc:	f7fb fa94 	bl	8000c28 <__aeabi_uldivmod>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	4613      	mov	r3, r2
 8005706:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005708:	4b0b      	ldr	r3, [pc, #44]	@ (8005738 <HAL_RCC_GetSysClockFreq+0x200>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	0c1b      	lsrs	r3, r3, #16
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	3301      	adds	r3, #1
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005718:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800571a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800571c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005720:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005722:	e002      	b.n	800572a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005724:	4b05      	ldr	r3, [pc, #20]	@ (800573c <HAL_RCC_GetSysClockFreq+0x204>)
 8005726:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800572a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800572c:	4618      	mov	r0, r3
 800572e:	3750      	adds	r7, #80	@ 0x50
 8005730:	46bd      	mov	sp, r7
 8005732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005736:	bf00      	nop
 8005738:	40023800 	.word	0x40023800
 800573c:	00f42400 	.word	0x00f42400
 8005740:	007a1200 	.word	0x007a1200

08005744 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005748:	4b03      	ldr	r3, [pc, #12]	@ (8005758 <HAL_RCC_GetHCLKFreq+0x14>)
 800574a:	681b      	ldr	r3, [r3, #0]
}
 800574c:	4618      	mov	r0, r3
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	20000020 	.word	0x20000020

0800575c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005760:	f7ff fff0 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 8005764:	4602      	mov	r2, r0
 8005766:	4b05      	ldr	r3, [pc, #20]	@ (800577c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	0a9b      	lsrs	r3, r3, #10
 800576c:	f003 0307 	and.w	r3, r3, #7
 8005770:	4903      	ldr	r1, [pc, #12]	@ (8005780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005772:	5ccb      	ldrb	r3, [r1, r3]
 8005774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005778:	4618      	mov	r0, r3
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40023800 	.word	0x40023800
 8005780:	0800d6b0 	.word	0x0800d6b0

08005784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005788:	f7ff ffdc 	bl	8005744 <HAL_RCC_GetHCLKFreq>
 800578c:	4602      	mov	r2, r0
 800578e:	4b05      	ldr	r3, [pc, #20]	@ (80057a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	0b5b      	lsrs	r3, r3, #13
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	4903      	ldr	r1, [pc, #12]	@ (80057a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800579a:	5ccb      	ldrb	r3, [r1, r3]
 800579c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40023800 	.word	0x40023800
 80057a8:	0800d6b0 	.word	0x0800d6b0

080057ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80057b4:	2300      	movs	r3, #0
 80057b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d012      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057d4:	4b69      	ldr	r3, [pc, #420]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	4a68      	ldr	r2, [pc, #416]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80057de:	6093      	str	r3, [r2, #8]
 80057e0:	4b66      	ldr	r3, [pc, #408]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057e8:	4964      	ldr	r1, [pc, #400]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80057f6:	2301      	movs	r3, #1
 80057f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d017      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005806:	4b5d      	ldr	r3, [pc, #372]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800580c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005814:	4959      	ldr	r1, [pc, #356]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005820:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005824:	d101      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005826:	2301      	movs	r3, #1
 8005828:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005832:	2301      	movs	r3, #1
 8005834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d017      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005842:	4b4e      	ldr	r3, [pc, #312]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005844:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005848:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005850:	494a      	ldr	r1, [pc, #296]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005860:	d101      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005862:	2301      	movs	r3, #1
 8005864:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800586e:	2301      	movs	r3, #1
 8005870:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800587e:	2301      	movs	r3, #1
 8005880:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 808b 	beq.w	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005890:	4b3a      	ldr	r3, [pc, #232]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005894:	4a39      	ldr	r2, [pc, #228]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800589a:	6413      	str	r3, [r2, #64]	@ 0x40
 800589c:	4b37      	ldr	r3, [pc, #220]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058a4:	60bb      	str	r3, [r7, #8]
 80058a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058a8:	4b35      	ldr	r3, [pc, #212]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a34      	ldr	r2, [pc, #208]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b4:	f7fd fc36 	bl	8003124 <HAL_GetTick>
 80058b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80058ba:	e008      	b.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058bc:	f7fd fc32 	bl	8003124 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b64      	cmp	r3, #100	@ 0x64
 80058c8:	d901      	bls.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e357      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80058ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005980 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0f0      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058da:	4b28      	ldr	r3, [pc, #160]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d035      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d02e      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058f8:	4b20      	ldr	r3, [pc, #128]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005900:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005902:	4b1e      	ldr	r3, [pc, #120]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005906:	4a1d      	ldr	r2, [pc, #116]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800590c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800590e:	4b1b      	ldr	r3, [pc, #108]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005912:	4a1a      	ldr	r2, [pc, #104]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005914:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005918:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800591a:	4a18      	ldr	r2, [pc, #96]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005920:	4b16      	ldr	r3, [pc, #88]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b01      	cmp	r3, #1
 800592a:	d114      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592c:	f7fd fbfa 	bl	8003124 <HAL_GetTick>
 8005930:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005932:	e00a      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005934:	f7fd fbf6 	bl	8003124 <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e319      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800594a:	4b0c      	ldr	r3, [pc, #48]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800594c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0ee      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800595e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005962:	d111      	bne.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005964:	4b05      	ldr	r3, [pc, #20]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005970:	4b04      	ldr	r3, [pc, #16]	@ (8005984 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005972:	400b      	ands	r3, r1
 8005974:	4901      	ldr	r1, [pc, #4]	@ (800597c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005976:	4313      	orrs	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
 800597a:	e00b      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800597c:	40023800 	.word	0x40023800
 8005980:	40007000 	.word	0x40007000
 8005984:	0ffffcff 	.word	0x0ffffcff
 8005988:	4baa      	ldr	r3, [pc, #680]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	4aa9      	ldr	r2, [pc, #676]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800598e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005992:	6093      	str	r3, [r2, #8]
 8005994:	4ba7      	ldr	r3, [pc, #668]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005996:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a0:	49a4      	ldr	r1, [pc, #656]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0310 	and.w	r3, r3, #16
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d010      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059b2:	4ba0      	ldr	r3, [pc, #640]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059b8:	4a9e      	ldr	r2, [pc, #632]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80059c2:	4b9c      	ldr	r3, [pc, #624]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059cc:	4999      	ldr	r1, [pc, #612]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059e0:	4b94      	ldr	r3, [pc, #592]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059ee:	4991      	ldr	r1, [pc, #580]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a02:	4b8c      	ldr	r3, [pc, #560]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a10:	4988      	ldr	r1, [pc, #544]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a24:	4b83      	ldr	r3, [pc, #524]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a32:	4980      	ldr	r1, [pc, #512]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a46:	4b7b      	ldr	r3, [pc, #492]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a54:	4977      	ldr	r1, [pc, #476]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a68:	4b72      	ldr	r3, [pc, #456]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a6e:	f023 0203 	bic.w	r2, r3, #3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a76:	496f      	ldr	r1, [pc, #444]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a90:	f023 020c 	bic.w	r2, r3, #12
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a98:	4966      	ldr	r1, [pc, #408]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aac:	4b61      	ldr	r3, [pc, #388]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ab2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aba:	495e      	ldr	r1, [pc, #376]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ace:	4b59      	ldr	r3, [pc, #356]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005adc:	4955      	ldr	r1, [pc, #340]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005af0:	4b50      	ldr	r3, [pc, #320]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005af6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005afe:	494d      	ldr	r1, [pc, #308]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b12:	4b48      	ldr	r3, [pc, #288]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b18:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b20:	4944      	ldr	r1, [pc, #272]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005b34:	4b3f      	ldr	r3, [pc, #252]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b42:	493c      	ldr	r1, [pc, #240]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005b56:	4b37      	ldr	r3, [pc, #220]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b64:	4933      	ldr	r1, [pc, #204]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b78:	4b2e      	ldr	r3, [pc, #184]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b86:	492b      	ldr	r1, [pc, #172]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d011      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b9a:	4b26      	ldr	r3, [pc, #152]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ba8:	4922      	ldr	r1, [pc, #136]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bb8:	d101      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bda:	4b16      	ldr	r3, [pc, #88]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005be8:	4912      	ldr	r1, [pc, #72]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00b      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c02:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c0c:	4909      	ldr	r1, [pc, #36]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d006      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 80d9 	beq.w	8005dda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c28:	4b02      	ldr	r3, [pc, #8]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a01      	ldr	r2, [pc, #4]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c32:	e001      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005c34:	40023800 	.word	0x40023800
 8005c38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c3a:	f7fd fa73 	bl	8003124 <HAL_GetTick>
 8005c3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c40:	e008      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c42:	f7fd fa6f 	bl	8003124 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b64      	cmp	r3, #100	@ 0x64
 8005c4e:	d901      	bls.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e194      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c54:	4b6c      	ldr	r3, [pc, #432]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1f0      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d021      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d11d      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c74:	4b64      	ldr	r3, [pc, #400]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c7a:	0c1b      	lsrs	r3, r3, #16
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c82:	4b61      	ldr	r3, [pc, #388]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c88:	0e1b      	lsrs	r3, r3, #24
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	019a      	lsls	r2, r3, #6
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	041b      	lsls	r3, r3, #16
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	061b      	lsls	r3, r3, #24
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	071b      	lsls	r3, r3, #28
 8005ca8:	4957      	ldr	r1, [pc, #348]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cc4:	d00a      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d02e      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cda:	d129      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ce2:	0c1b      	lsrs	r3, r3, #16
 8005ce4:	f003 0303 	and.w	r3, r3, #3
 8005ce8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005cea:	4b47      	ldr	r3, [pc, #284]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cf0:	0f1b      	lsrs	r3, r3, #28
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	019a      	lsls	r2, r3, #6
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	041b      	lsls	r3, r3, #16
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	061b      	lsls	r3, r3, #24
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	071b      	lsls	r3, r3, #28
 8005d10:	493d      	ldr	r1, [pc, #244]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d18:	4b3b      	ldr	r3, [pc, #236]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d1e:	f023 021f 	bic.w	r2, r3, #31
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d26:	3b01      	subs	r3, #1
 8005d28:	4937      	ldr	r1, [pc, #220]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d01d      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d3c:	4b32      	ldr	r3, [pc, #200]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d42:	0e1b      	lsrs	r3, r3, #24
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d50:	0f1b      	lsrs	r3, r3, #28
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	019a      	lsls	r2, r3, #6
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	041b      	lsls	r3, r3, #16
 8005d64:	431a      	orrs	r2, r3
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	061b      	lsls	r3, r3, #24
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	071b      	lsls	r3, r3, #28
 8005d70:	4925      	ldr	r1, [pc, #148]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d011      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	019a      	lsls	r2, r3, #6
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	041b      	lsls	r3, r3, #16
 8005d90:	431a      	orrs	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	061b      	lsls	r3, r3, #24
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	071b      	lsls	r3, r3, #28
 8005da0:	4919      	ldr	r1, [pc, #100]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005da8:	4b17      	ldr	r3, [pc, #92]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a16      	ldr	r2, [pc, #88]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005db4:	f7fd f9b6 	bl	8003124 <HAL_GetTick>
 8005db8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dba:	e008      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005dbc:	f7fd f9b2 	bl	8003124 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b64      	cmp	r3, #100	@ 0x64
 8005dc8:	d901      	bls.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e0d7      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dce:	4b0e      	ldr	r3, [pc, #56]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0f0      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	f040 80cd 	bne.w	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005de2:	4b09      	ldr	r3, [pc, #36]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a08      	ldr	r2, [pc, #32]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005de8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dee:	f7fd f999 	bl	8003124 <HAL_GetTick>
 8005df2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005df4:	e00a      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005df6:	f7fd f995 	bl	8003124 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b64      	cmp	r3, #100	@ 0x64
 8005e02:	d903      	bls.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e0ba      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005e08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e0c:	4b5e      	ldr	r3, [pc, #376]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e18:	d0ed      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d009      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d02e      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d12a      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e42:	4b51      	ldr	r3, [pc, #324]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e48:	0c1b      	lsrs	r3, r3, #16
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e50:	4b4d      	ldr	r3, [pc, #308]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e56:	0f1b      	lsrs	r3, r3, #28
 8005e58:	f003 0307 	and.w	r3, r3, #7
 8005e5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	019a      	lsls	r2, r3, #6
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	041b      	lsls	r3, r3, #16
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	061b      	lsls	r3, r3, #24
 8005e70:	431a      	orrs	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	071b      	lsls	r3, r3, #28
 8005e76:	4944      	ldr	r1, [pc, #272]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e7e:	4b42      	ldr	r3, [pc, #264]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e84:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	493d      	ldr	r1, [pc, #244]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d022      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ea8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eac:	d11d      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005eae:	4b36      	ldr	r3, [pc, #216]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb4:	0e1b      	lsrs	r3, r3, #24
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ebc:	4b32      	ldr	r3, [pc, #200]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec2:	0f1b      	lsrs	r3, r3, #28
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	019a      	lsls	r2, r3, #6
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	041b      	lsls	r3, r3, #16
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	061b      	lsls	r3, r3, #24
 8005edc:	431a      	orrs	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	071b      	lsls	r3, r3, #28
 8005ee2:	4929      	ldr	r1, [pc, #164]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d028      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ef6:	4b24      	ldr	r3, [pc, #144]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005efc:	0e1b      	lsrs	r3, r3, #24
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f04:	4b20      	ldr	r3, [pc, #128]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f0a:	0c1b      	lsrs	r3, r3, #16
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	019a      	lsls	r2, r3, #6
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	041b      	lsls	r3, r3, #16
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	061b      	lsls	r3, r3, #24
 8005f22:	431a      	orrs	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	071b      	lsls	r3, r3, #28
 8005f2a:	4917      	ldr	r1, [pc, #92]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f32:	4b15      	ldr	r3, [pc, #84]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f40:	4911      	ldr	r1, [pc, #68]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f48:	4b0f      	ldr	r3, [pc, #60]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a0e      	ldr	r2, [pc, #56]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f54:	f7fd f8e6 	bl	8003124 <HAL_GetTick>
 8005f58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f5c:	f7fd f8e2 	bl	8003124 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b64      	cmp	r3, #100	@ 0x64
 8005f68:	d901      	bls.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e007      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f6e:	4b06      	ldr	r3, [pc, #24]	@ (8005f88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005f7a:	d1ef      	bne.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3720      	adds	r7, #32
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	40023800 	.word	0x40023800

08005f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e049      	b.n	8006032 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fc fe8e 	bl	8002cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	f000 fe62 	bl	8006c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d001      	beq.n	8006054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e054      	b.n	80060fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68da      	ldr	r2, [r3, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a26      	ldr	r2, [pc, #152]	@ (800610c <HAL_TIM_Base_Start_IT+0xd0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d022      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800607e:	d01d      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a22      	ldr	r2, [pc, #136]	@ (8006110 <HAL_TIM_Base_Start_IT+0xd4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d018      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a21      	ldr	r2, [pc, #132]	@ (8006114 <HAL_TIM_Base_Start_IT+0xd8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d013      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a1f      	ldr	r2, [pc, #124]	@ (8006118 <HAL_TIM_Base_Start_IT+0xdc>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00e      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a1e      	ldr	r2, [pc, #120]	@ (800611c <HAL_TIM_Base_Start_IT+0xe0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d009      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1c      	ldr	r2, [pc, #112]	@ (8006120 <HAL_TIM_Base_Start_IT+0xe4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d004      	beq.n	80060bc <HAL_TIM_Base_Start_IT+0x80>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006124 <HAL_TIM_Base_Start_IT+0xe8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d115      	bne.n	80060e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	4b19      	ldr	r3, [pc, #100]	@ (8006128 <HAL_TIM_Base_Start_IT+0xec>)
 80060c4:	4013      	ands	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b06      	cmp	r3, #6
 80060cc:	d015      	beq.n	80060fa <HAL_TIM_Base_Start_IT+0xbe>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060d4:	d011      	beq.n	80060fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0201 	orr.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e6:	e008      	b.n	80060fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	e000      	b.n	80060fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40010000 	.word	0x40010000
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	40000c00 	.word	0x40000c00
 800611c:	40010400 	.word	0x40010400
 8006120:	40014000 	.word	0x40014000
 8006124:	40001800 	.word	0x40001800
 8006128:	00010007 	.word	0x00010007

0800612c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d101      	bne.n	800613e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e049      	b.n	80061d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d106      	bne.n	8006158 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f841 	bl	80061da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2202      	movs	r2, #2
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f000 fd92 	bl	8006c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
	...

080061f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d109      	bne.n	8006214 <HAL_TIM_PWM_Start+0x24>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	bf14      	ite	ne
 800620c:	2301      	movne	r3, #1
 800620e:	2300      	moveq	r3, #0
 8006210:	b2db      	uxtb	r3, r3
 8006212:	e03c      	b.n	800628e <HAL_TIM_PWM_Start+0x9e>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b04      	cmp	r3, #4
 8006218:	d109      	bne.n	800622e <HAL_TIM_PWM_Start+0x3e>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b01      	cmp	r3, #1
 8006224:	bf14      	ite	ne
 8006226:	2301      	movne	r3, #1
 8006228:	2300      	moveq	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	e02f      	b.n	800628e <HAL_TIM_PWM_Start+0x9e>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b08      	cmp	r3, #8
 8006232:	d109      	bne.n	8006248 <HAL_TIM_PWM_Start+0x58>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	bf14      	ite	ne
 8006240:	2301      	movne	r3, #1
 8006242:	2300      	moveq	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e022      	b.n	800628e <HAL_TIM_PWM_Start+0x9e>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b0c      	cmp	r3, #12
 800624c:	d109      	bne.n	8006262 <HAL_TIM_PWM_Start+0x72>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b01      	cmp	r3, #1
 8006258:	bf14      	ite	ne
 800625a:	2301      	movne	r3, #1
 800625c:	2300      	moveq	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	e015      	b.n	800628e <HAL_TIM_PWM_Start+0x9e>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b10      	cmp	r3, #16
 8006266:	d109      	bne.n	800627c <HAL_TIM_PWM_Start+0x8c>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	bf14      	ite	ne
 8006274:	2301      	movne	r3, #1
 8006276:	2300      	moveq	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	e008      	b.n	800628e <HAL_TIM_PWM_Start+0x9e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	bf14      	ite	ne
 8006288:	2301      	movne	r3, #1
 800628a:	2300      	moveq	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e092      	b.n	80063bc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d104      	bne.n	80062a6 <HAL_TIM_PWM_Start+0xb6>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062a4:	e023      	b.n	80062ee <HAL_TIM_PWM_Start+0xfe>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d104      	bne.n	80062b6 <HAL_TIM_PWM_Start+0xc6>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062b4:	e01b      	b.n	80062ee <HAL_TIM_PWM_Start+0xfe>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d104      	bne.n	80062c6 <HAL_TIM_PWM_Start+0xd6>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062c4:	e013      	b.n	80062ee <HAL_TIM_PWM_Start+0xfe>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b0c      	cmp	r3, #12
 80062ca:	d104      	bne.n	80062d6 <HAL_TIM_PWM_Start+0xe6>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062d4:	e00b      	b.n	80062ee <HAL_TIM_PWM_Start+0xfe>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b10      	cmp	r3, #16
 80062da:	d104      	bne.n	80062e6 <HAL_TIM_PWM_Start+0xf6>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062e4:	e003      	b.n	80062ee <HAL_TIM_PWM_Start+0xfe>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2202      	movs	r2, #2
 80062ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2201      	movs	r2, #1
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 f870 	bl	80073dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a30      	ldr	r2, [pc, #192]	@ (80063c4 <HAL_TIM_PWM_Start+0x1d4>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d004      	beq.n	8006310 <HAL_TIM_PWM_Start+0x120>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a2f      	ldr	r2, [pc, #188]	@ (80063c8 <HAL_TIM_PWM_Start+0x1d8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d101      	bne.n	8006314 <HAL_TIM_PWM_Start+0x124>
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <HAL_TIM_PWM_Start+0x126>
 8006314:	2300      	movs	r3, #0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006328:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a25      	ldr	r2, [pc, #148]	@ (80063c4 <HAL_TIM_PWM_Start+0x1d4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d022      	beq.n	800637a <HAL_TIM_PWM_Start+0x18a>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800633c:	d01d      	beq.n	800637a <HAL_TIM_PWM_Start+0x18a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a22      	ldr	r2, [pc, #136]	@ (80063cc <HAL_TIM_PWM_Start+0x1dc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d018      	beq.n	800637a <HAL_TIM_PWM_Start+0x18a>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a20      	ldr	r2, [pc, #128]	@ (80063d0 <HAL_TIM_PWM_Start+0x1e0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <HAL_TIM_PWM_Start+0x18a>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1f      	ldr	r2, [pc, #124]	@ (80063d4 <HAL_TIM_PWM_Start+0x1e4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00e      	beq.n	800637a <HAL_TIM_PWM_Start+0x18a>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a19      	ldr	r2, [pc, #100]	@ (80063c8 <HAL_TIM_PWM_Start+0x1d8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d009      	beq.n	800637a <HAL_TIM_PWM_Start+0x18a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a1b      	ldr	r2, [pc, #108]	@ (80063d8 <HAL_TIM_PWM_Start+0x1e8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d004      	beq.n	800637a <HAL_TIM_PWM_Start+0x18a>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a19      	ldr	r2, [pc, #100]	@ (80063dc <HAL_TIM_PWM_Start+0x1ec>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d115      	bne.n	80063a6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	4b17      	ldr	r3, [pc, #92]	@ (80063e0 <HAL_TIM_PWM_Start+0x1f0>)
 8006382:	4013      	ands	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b06      	cmp	r3, #6
 800638a:	d015      	beq.n	80063b8 <HAL_TIM_PWM_Start+0x1c8>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006392:	d011      	beq.n	80063b8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0201 	orr.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a4:	e008      	b.n	80063b8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f042 0201 	orr.w	r2, r2, #1
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	e000      	b.n	80063ba <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	40010000 	.word	0x40010000
 80063c8:	40010400 	.word	0x40010400
 80063cc:	40000400 	.word	0x40000400
 80063d0:	40000800 	.word	0x40000800
 80063d4:	40000c00 	.word	0x40000c00
 80063d8:	40014000 	.word	0x40014000
 80063dc:	40001800 	.word	0x40001800
 80063e0:	00010007 	.word	0x00010007

080063e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e08f      	b.n	8006518 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d106      	bne.n	8006412 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7fc fc15 	bl	8002c3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2202      	movs	r2, #2
 8006416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6899      	ldr	r1, [r3, #8]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	4b3e      	ldr	r3, [pc, #248]	@ (8006520 <HAL_TIM_Encoder_Init+0x13c>)
 8006426:	400b      	ands	r3, r1
 8006428:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3304      	adds	r3, #4
 8006432:	4619      	mov	r1, r3
 8006434:	4610      	mov	r0, r2
 8006436:	f000 fc2d 	bl	8006c94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4b31      	ldr	r3, [pc, #196]	@ (8006524 <HAL_TIM_Encoder_Init+0x140>)
 8006460:	4013      	ands	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	4313      	orrs	r3, r2
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4b2b      	ldr	r3, [pc, #172]	@ (8006528 <HAL_TIM_Encoder_Init+0x144>)
 800647a:	4013      	ands	r3, r2
 800647c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	4b2a      	ldr	r3, [pc, #168]	@ (800652c <HAL_TIM_Encoder_Init+0x148>)
 8006482:	4013      	ands	r3, r2
 8006484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	021b      	lsls	r3, r3, #8
 8006490:	4313      	orrs	r3, r2
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	011a      	lsls	r2, r3, #4
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	031b      	lsls	r3, r3, #12
 80064a4:	4313      	orrs	r3, r2
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80064b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	011b      	lsls	r3, r3, #4
 80064c6:	4313      	orrs	r3, r2
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	fffebff8 	.word	0xfffebff8
 8006524:	fffffcfc 	.word	0xfffffcfc
 8006528:	fffff3f3 	.word	0xfffff3f3
 800652c:	ffff0f0f 	.word	0xffff0f0f

08006530 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006540:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006548:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006550:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006558:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d110      	bne.n	8006582 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d102      	bne.n	800656c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006566:	7b7b      	ldrb	r3, [r7, #13]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d001      	beq.n	8006570 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e089      	b.n	8006684 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2202      	movs	r2, #2
 8006574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006580:	e031      	b.n	80065e6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b04      	cmp	r3, #4
 8006586:	d110      	bne.n	80065aa <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006588:	7bbb      	ldrb	r3, [r7, #14]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d102      	bne.n	8006594 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800658e:	7b3b      	ldrb	r3, [r7, #12]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d001      	beq.n	8006598 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e075      	b.n	8006684 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065a8:	e01d      	b.n	80065e6 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d108      	bne.n	80065c2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80065b0:	7bbb      	ldrb	r3, [r7, #14]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d105      	bne.n	80065c2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065b6:	7b7b      	ldrb	r3, [r7, #13]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d102      	bne.n	80065c2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80065bc:	7b3b      	ldrb	r3, [r7, #12]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d001      	beq.n	80065c6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e05e      	b.n	8006684 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2202      	movs	r2, #2
 80065ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2202      	movs	r2, #2
 80065d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <HAL_TIM_Encoder_Start_IT+0xc4>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d010      	beq.n	8006614 <HAL_TIM_Encoder_Start_IT+0xe4>
 80065f2:	e01f      	b.n	8006634 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2201      	movs	r2, #1
 80065fa:	2100      	movs	r1, #0
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 feed 	bl	80073dc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0202 	orr.w	r2, r2, #2
 8006610:	60da      	str	r2, [r3, #12]
      break;
 8006612:	e02e      	b.n	8006672 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2201      	movs	r2, #1
 800661a:	2104      	movs	r1, #4
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fedd 	bl	80073dc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0204 	orr.w	r2, r2, #4
 8006630:	60da      	str	r2, [r3, #12]
      break;
 8006632:	e01e      	b.n	8006672 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2201      	movs	r2, #1
 800663a:	2100      	movs	r1, #0
 800663c:	4618      	mov	r0, r3
 800663e:	f000 fecd 	bl	80073dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2201      	movs	r2, #1
 8006648:	2104      	movs	r1, #4
 800664a:	4618      	mov	r0, r3
 800664c:	f000 fec6 	bl	80073dc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0202 	orr.w	r2, r2, #2
 800665e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68da      	ldr	r2, [r3, #12]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0204 	orr.w	r2, r2, #4
 800666e:	60da      	str	r2, [r3, #12]
      break;
 8006670:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f042 0201 	orr.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d020      	beq.n	80066f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01b      	beq.n	80066f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0202 	mvn.w	r2, #2
 80066c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fb fd44 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 80066dc:	e005      	b.n	80066ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 faba 	bl	8006c58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fac1 	bl	8006c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d020      	beq.n	800673c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b00      	cmp	r3, #0
 8006702:	d01b      	beq.n	800673c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0204 	mvn.w	r2, #4
 800670c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fb fd1e 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 8006728:	e005      	b.n	8006736 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa94 	bl	8006c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fa9b 	bl	8006c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b00      	cmp	r3, #0
 8006744:	d020      	beq.n	8006788 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01b      	beq.n	8006788 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0208 	mvn.w	r2, #8
 8006758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2204      	movs	r2, #4
 800675e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fb fcf8 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 8006774:	e005      	b.n	8006782 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fa6e 	bl	8006c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fa75 	bl	8006c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f003 0310 	and.w	r3, r3, #16
 800678e:	2b00      	cmp	r3, #0
 8006790:	d020      	beq.n	80067d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f003 0310 	and.w	r3, r3, #16
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01b      	beq.n	80067d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f06f 0210 	mvn.w	r2, #16
 80067a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2208      	movs	r2, #8
 80067aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7fb fcd2 	bl	8002164 <HAL_TIM_IC_CaptureCallback>
 80067c0:	e005      	b.n	80067ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fa48 	bl	8006c58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fa4f 	bl	8006c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00c      	beq.n	80067f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d007      	beq.n	80067f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f06f 0201 	mvn.w	r2, #1
 80067f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7fb fb4c 	bl	8001e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d104      	bne.n	800680c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00c      	beq.n	8006826 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006812:	2b00      	cmp	r3, #0
 8006814:	d007      	beq.n	8006826 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800681e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fe99 	bl	8007558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00c      	beq.n	800684a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006836:	2b00      	cmp	r3, #0
 8006838:	d007      	beq.n	800684a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 fe91 	bl	800756c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00c      	beq.n	800686e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800685a:	2b00      	cmp	r3, #0
 800685c:	d007      	beq.n	800686e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fa09 	bl	8006c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00c      	beq.n	8006892 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f003 0320 	and.w	r3, r3, #32
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f06f 0220 	mvn.w	r2, #32
 800688a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fe59 	bl	8007544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006892:	bf00      	nop
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068b6:	2302      	movs	r3, #2
 80068b8:	e0ff      	b.n	8006aba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b14      	cmp	r3, #20
 80068c6:	f200 80f0 	bhi.w	8006aaa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80068ca:	a201      	add	r2, pc, #4	@ (adr r2, 80068d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d0:	08006925 	.word	0x08006925
 80068d4:	08006aab 	.word	0x08006aab
 80068d8:	08006aab 	.word	0x08006aab
 80068dc:	08006aab 	.word	0x08006aab
 80068e0:	08006965 	.word	0x08006965
 80068e4:	08006aab 	.word	0x08006aab
 80068e8:	08006aab 	.word	0x08006aab
 80068ec:	08006aab 	.word	0x08006aab
 80068f0:	080069a7 	.word	0x080069a7
 80068f4:	08006aab 	.word	0x08006aab
 80068f8:	08006aab 	.word	0x08006aab
 80068fc:	08006aab 	.word	0x08006aab
 8006900:	080069e7 	.word	0x080069e7
 8006904:	08006aab 	.word	0x08006aab
 8006908:	08006aab 	.word	0x08006aab
 800690c:	08006aab 	.word	0x08006aab
 8006910:	08006a29 	.word	0x08006a29
 8006914:	08006aab 	.word	0x08006aab
 8006918:	08006aab 	.word	0x08006aab
 800691c:	08006aab 	.word	0x08006aab
 8006920:	08006a69 	.word	0x08006a69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	4618      	mov	r0, r3
 800692c:	f000 fa5e 	bl	8006dec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699a      	ldr	r2, [r3, #24]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0208 	orr.w	r2, r2, #8
 800693e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0204 	bic.w	r2, r2, #4
 800694e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6999      	ldr	r1, [r3, #24]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	691a      	ldr	r2, [r3, #16]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	619a      	str	r2, [r3, #24]
      break;
 8006962:	e0a5      	b.n	8006ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68b9      	ldr	r1, [r7, #8]
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fab0 	bl	8006ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800697e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699a      	ldr	r2, [r3, #24]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800698e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6999      	ldr	r1, [r3, #24]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	021a      	lsls	r2, r3, #8
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	430a      	orrs	r2, r1
 80069a2:	619a      	str	r2, [r3, #24]
      break;
 80069a4:	e084      	b.n	8006ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68b9      	ldr	r1, [r7, #8]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 fb07 	bl	8006fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69da      	ldr	r2, [r3, #28]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f042 0208 	orr.w	r2, r2, #8
 80069c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69da      	ldr	r2, [r3, #28]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0204 	bic.w	r2, r2, #4
 80069d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	69d9      	ldr	r1, [r3, #28]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	691a      	ldr	r2, [r3, #16]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	61da      	str	r2, [r3, #28]
      break;
 80069e4:	e064      	b.n	8006ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fb5d 	bl	80070ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	69da      	ldr	r2, [r3, #28]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69da      	ldr	r2, [r3, #28]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69d9      	ldr	r1, [r3, #28]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	021a      	lsls	r2, r3, #8
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	61da      	str	r2, [r3, #28]
      break;
 8006a26:	e043      	b.n	8006ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fb94 	bl	800715c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0208 	orr.w	r2, r2, #8
 8006a42:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f022 0204 	bic.w	r2, r2, #4
 8006a52:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	691a      	ldr	r2, [r3, #16]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006a66:	e023      	b.n	8006ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68b9      	ldr	r1, [r7, #8]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fbc6 	bl	8007200 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a82:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a92:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	021a      	lsls	r2, r3, #8
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006aa8:	e002      	b.n	8006ab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	75fb      	strb	r3, [r7, #23]
      break;
 8006aae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop

08006ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d101      	bne.n	8006ae0 <HAL_TIM_ConfigClockSource+0x1c>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e0b4      	b.n	8006c4a <HAL_TIM_ConfigClockSource+0x186>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	4b56      	ldr	r3, [pc, #344]	@ (8006c54 <HAL_TIM_ConfigClockSource+0x190>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b18:	d03e      	beq.n	8006b98 <HAL_TIM_ConfigClockSource+0xd4>
 8006b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b1e:	f200 8087 	bhi.w	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b26:	f000 8086 	beq.w	8006c36 <HAL_TIM_ConfigClockSource+0x172>
 8006b2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b2e:	d87f      	bhi.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b30:	2b70      	cmp	r3, #112	@ 0x70
 8006b32:	d01a      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0xa6>
 8006b34:	2b70      	cmp	r3, #112	@ 0x70
 8006b36:	d87b      	bhi.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b38:	2b60      	cmp	r3, #96	@ 0x60
 8006b3a:	d050      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x11a>
 8006b3c:	2b60      	cmp	r3, #96	@ 0x60
 8006b3e:	d877      	bhi.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b40:	2b50      	cmp	r3, #80	@ 0x50
 8006b42:	d03c      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0xfa>
 8006b44:	2b50      	cmp	r3, #80	@ 0x50
 8006b46:	d873      	bhi.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b48:	2b40      	cmp	r3, #64	@ 0x40
 8006b4a:	d058      	beq.n	8006bfe <HAL_TIM_ConfigClockSource+0x13a>
 8006b4c:	2b40      	cmp	r3, #64	@ 0x40
 8006b4e:	d86f      	bhi.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b50:	2b30      	cmp	r3, #48	@ 0x30
 8006b52:	d064      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0x15a>
 8006b54:	2b30      	cmp	r3, #48	@ 0x30
 8006b56:	d86b      	bhi.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b58:	2b20      	cmp	r3, #32
 8006b5a:	d060      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0x15a>
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d867      	bhi.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d05c      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0x15a>
 8006b64:	2b10      	cmp	r3, #16
 8006b66:	d05a      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0x15a>
 8006b68:	e062      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b7a:	f000 fc0f 	bl	800739c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	609a      	str	r2, [r3, #8]
      break;
 8006b96:	e04f      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ba8:	f000 fbf8 	bl	800739c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bba:	609a      	str	r2, [r3, #8]
      break;
 8006bbc:	e03c      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f000 fb6c 	bl	80072a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2150      	movs	r1, #80	@ 0x50
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fbc5 	bl	8007366 <TIM_ITRx_SetConfig>
      break;
 8006bdc:	e02c      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bea:	461a      	mov	r2, r3
 8006bec:	f000 fb8b 	bl	8007306 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2160      	movs	r1, #96	@ 0x60
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f000 fbb5 	bl	8007366 <TIM_ITRx_SetConfig>
      break;
 8006bfc:	e01c      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	f000 fb4c 	bl	80072a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2140      	movs	r1, #64	@ 0x40
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 fba5 	bl	8007366 <TIM_ITRx_SetConfig>
      break;
 8006c1c:	e00c      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4619      	mov	r1, r3
 8006c28:	4610      	mov	r0, r2
 8006c2a:	f000 fb9c 	bl	8007366 <TIM_ITRx_SetConfig>
      break;
 8006c2e:	e003      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	73fb      	strb	r3, [r7, #15]
      break;
 8006c34:	e000      	b.n	8006c38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	fffeff88 	.word	0xfffeff88

08006c58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a46      	ldr	r2, [pc, #280]	@ (8006dc0 <TIM_Base_SetConfig+0x12c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d013      	beq.n	8006cd4 <TIM_Base_SetConfig+0x40>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cb2:	d00f      	beq.n	8006cd4 <TIM_Base_SetConfig+0x40>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a43      	ldr	r2, [pc, #268]	@ (8006dc4 <TIM_Base_SetConfig+0x130>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00b      	beq.n	8006cd4 <TIM_Base_SetConfig+0x40>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a42      	ldr	r2, [pc, #264]	@ (8006dc8 <TIM_Base_SetConfig+0x134>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d007      	beq.n	8006cd4 <TIM_Base_SetConfig+0x40>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a41      	ldr	r2, [pc, #260]	@ (8006dcc <TIM_Base_SetConfig+0x138>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d003      	beq.n	8006cd4 <TIM_Base_SetConfig+0x40>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a40      	ldr	r2, [pc, #256]	@ (8006dd0 <TIM_Base_SetConfig+0x13c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d108      	bne.n	8006ce6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a35      	ldr	r2, [pc, #212]	@ (8006dc0 <TIM_Base_SetConfig+0x12c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d02b      	beq.n	8006d46 <TIM_Base_SetConfig+0xb2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cf4:	d027      	beq.n	8006d46 <TIM_Base_SetConfig+0xb2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a32      	ldr	r2, [pc, #200]	@ (8006dc4 <TIM_Base_SetConfig+0x130>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d023      	beq.n	8006d46 <TIM_Base_SetConfig+0xb2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a31      	ldr	r2, [pc, #196]	@ (8006dc8 <TIM_Base_SetConfig+0x134>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d01f      	beq.n	8006d46 <TIM_Base_SetConfig+0xb2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a30      	ldr	r2, [pc, #192]	@ (8006dcc <TIM_Base_SetConfig+0x138>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d01b      	beq.n	8006d46 <TIM_Base_SetConfig+0xb2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a2f      	ldr	r2, [pc, #188]	@ (8006dd0 <TIM_Base_SetConfig+0x13c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d017      	beq.n	8006d46 <TIM_Base_SetConfig+0xb2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a2e      	ldr	r2, [pc, #184]	@ (8006dd4 <TIM_Base_SetConfig+0x140>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d013      	beq.n	8006d46 <TIM_Base_SetConfig+0xb2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a2d      	ldr	r2, [pc, #180]	@ (8006dd8 <TIM_Base_SetConfig+0x144>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00f      	beq.n	8006d46 <TIM_Base_SetConfig+0xb2>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a2c      	ldr	r2, [pc, #176]	@ (8006ddc <TIM_Base_SetConfig+0x148>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00b      	beq.n	8006d46 <TIM_Base_SetConfig+0xb2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a2b      	ldr	r2, [pc, #172]	@ (8006de0 <TIM_Base_SetConfig+0x14c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d007      	beq.n	8006d46 <TIM_Base_SetConfig+0xb2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a2a      	ldr	r2, [pc, #168]	@ (8006de4 <TIM_Base_SetConfig+0x150>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d003      	beq.n	8006d46 <TIM_Base_SetConfig+0xb2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a29      	ldr	r2, [pc, #164]	@ (8006de8 <TIM_Base_SetConfig+0x154>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d108      	bne.n	8006d58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	689a      	ldr	r2, [r3, #8]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a10      	ldr	r2, [pc, #64]	@ (8006dc0 <TIM_Base_SetConfig+0x12c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d003      	beq.n	8006d8c <TIM_Base_SetConfig+0xf8>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a12      	ldr	r2, [pc, #72]	@ (8006dd0 <TIM_Base_SetConfig+0x13c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d103      	bne.n	8006d94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	691a      	ldr	r2, [r3, #16]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0301 	and.w	r3, r3, #1
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d105      	bne.n	8006db2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f023 0201 	bic.w	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	611a      	str	r2, [r3, #16]
  }
}
 8006db2:	bf00      	nop
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40010000 	.word	0x40010000
 8006dc4:	40000400 	.word	0x40000400
 8006dc8:	40000800 	.word	0x40000800
 8006dcc:	40000c00 	.word	0x40000c00
 8006dd0:	40010400 	.word	0x40010400
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	40014400 	.word	0x40014400
 8006ddc:	40014800 	.word	0x40014800
 8006de0:	40001800 	.word	0x40001800
 8006de4:	40001c00 	.word	0x40001c00
 8006de8:	40002000 	.word	0x40002000

08006dec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	f023 0201 	bic.w	r2, r3, #1
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4b2b      	ldr	r3, [pc, #172]	@ (8006ec4 <TIM_OC1_SetConfig+0xd8>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0303 	bic.w	r3, r3, #3
 8006e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f023 0302 	bic.w	r3, r3, #2
 8006e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a21      	ldr	r2, [pc, #132]	@ (8006ec8 <TIM_OC1_SetConfig+0xdc>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d003      	beq.n	8006e50 <TIM_OC1_SetConfig+0x64>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a20      	ldr	r2, [pc, #128]	@ (8006ecc <TIM_OC1_SetConfig+0xe0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d10c      	bne.n	8006e6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f023 0308 	bic.w	r3, r3, #8
 8006e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f023 0304 	bic.w	r3, r3, #4
 8006e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a16      	ldr	r2, [pc, #88]	@ (8006ec8 <TIM_OC1_SetConfig+0xdc>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d003      	beq.n	8006e7a <TIM_OC1_SetConfig+0x8e>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a15      	ldr	r2, [pc, #84]	@ (8006ecc <TIM_OC1_SetConfig+0xe0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d111      	bne.n	8006e9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	621a      	str	r2, [r3, #32]
}
 8006eb8:	bf00      	nop
 8006eba:	371c      	adds	r7, #28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	fffeff8f 	.word	0xfffeff8f
 8006ec8:	40010000 	.word	0x40010000
 8006ecc:	40010400 	.word	0x40010400

08006ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	f023 0210 	bic.w	r2, r3, #16
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4b2e      	ldr	r3, [pc, #184]	@ (8006fb4 <TIM_OC2_SetConfig+0xe4>)
 8006efc:	4013      	ands	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	021b      	lsls	r3, r3, #8
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f023 0320 	bic.w	r3, r3, #32
 8006f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	011b      	lsls	r3, r3, #4
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a23      	ldr	r2, [pc, #140]	@ (8006fb8 <TIM_OC2_SetConfig+0xe8>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d003      	beq.n	8006f38 <TIM_OC2_SetConfig+0x68>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a22      	ldr	r2, [pc, #136]	@ (8006fbc <TIM_OC2_SetConfig+0xec>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d10d      	bne.n	8006f54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	697a      	ldr	r2, [r7, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a18      	ldr	r2, [pc, #96]	@ (8006fb8 <TIM_OC2_SetConfig+0xe8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_OC2_SetConfig+0x94>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a17      	ldr	r2, [pc, #92]	@ (8006fbc <TIM_OC2_SetConfig+0xec>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d113      	bne.n	8006f8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	621a      	str	r2, [r3, #32]
}
 8006fa6:	bf00      	nop
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	feff8fff 	.word	0xfeff8fff
 8006fb8:	40010000 	.word	0x40010000
 8006fbc:	40010400 	.word	0x40010400

08006fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	4b2d      	ldr	r3, [pc, #180]	@ (80070a0 <TIM_OC3_SetConfig+0xe0>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f023 0303 	bic.w	r3, r3, #3
 8006ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	021b      	lsls	r3, r3, #8
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a22      	ldr	r2, [pc, #136]	@ (80070a4 <TIM_OC3_SetConfig+0xe4>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d003      	beq.n	8007026 <TIM_OC3_SetConfig+0x66>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a21      	ldr	r2, [pc, #132]	@ (80070a8 <TIM_OC3_SetConfig+0xe8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d10d      	bne.n	8007042 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800702c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a17      	ldr	r2, [pc, #92]	@ (80070a4 <TIM_OC3_SetConfig+0xe4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d003      	beq.n	8007052 <TIM_OC3_SetConfig+0x92>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a16      	ldr	r2, [pc, #88]	@ (80070a8 <TIM_OC3_SetConfig+0xe8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d113      	bne.n	800707a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	011b      	lsls	r3, r3, #4
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	4313      	orrs	r3, r2
 800706c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	4313      	orrs	r3, r2
 8007078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	621a      	str	r2, [r3, #32]
}
 8007094:	bf00      	nop
 8007096:	371c      	adds	r7, #28
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	fffeff8f 	.word	0xfffeff8f
 80070a4:	40010000 	.word	0x40010000
 80070a8:	40010400 	.word	0x40010400

080070ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007150 <TIM_OC4_SetConfig+0xa4>)
 80070d8:	4013      	ands	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	021b      	lsls	r3, r3, #8
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	031b      	lsls	r3, r3, #12
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	4313      	orrs	r3, r2
 8007102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a13      	ldr	r2, [pc, #76]	@ (8007154 <TIM_OC4_SetConfig+0xa8>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d003      	beq.n	8007114 <TIM_OC4_SetConfig+0x68>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a12      	ldr	r2, [pc, #72]	@ (8007158 <TIM_OC4_SetConfig+0xac>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d109      	bne.n	8007128 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800711a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	019b      	lsls	r3, r3, #6
 8007122:	697a      	ldr	r2, [r7, #20]
 8007124:	4313      	orrs	r3, r2
 8007126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	621a      	str	r2, [r3, #32]
}
 8007142:	bf00      	nop
 8007144:	371c      	adds	r7, #28
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	feff8fff 	.word	0xfeff8fff
 8007154:	40010000 	.word	0x40010000
 8007158:	40010400 	.word	0x40010400

0800715c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	4b1b      	ldr	r3, [pc, #108]	@ (80071f4 <TIM_OC5_SetConfig+0x98>)
 8007188:	4013      	ands	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800719c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	041b      	lsls	r3, r3, #16
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a12      	ldr	r2, [pc, #72]	@ (80071f8 <TIM_OC5_SetConfig+0x9c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d003      	beq.n	80071ba <TIM_OC5_SetConfig+0x5e>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a11      	ldr	r2, [pc, #68]	@ (80071fc <TIM_OC5_SetConfig+0xa0>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d109      	bne.n	80071ce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	021b      	lsls	r3, r3, #8
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	621a      	str	r2, [r3, #32]
}
 80071e8:	bf00      	nop
 80071ea:	371c      	adds	r7, #28
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	fffeff8f 	.word	0xfffeff8f
 80071f8:	40010000 	.word	0x40010000
 80071fc:	40010400 	.word	0x40010400

08007200 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4b1c      	ldr	r3, [pc, #112]	@ (800729c <TIM_OC6_SetConfig+0x9c>)
 800722c:	4013      	ands	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	021b      	lsls	r3, r3, #8
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	4313      	orrs	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	051b      	lsls	r3, r3, #20
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	4313      	orrs	r3, r2
 800724e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a13      	ldr	r2, [pc, #76]	@ (80072a0 <TIM_OC6_SetConfig+0xa0>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <TIM_OC6_SetConfig+0x60>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a12      	ldr	r2, [pc, #72]	@ (80072a4 <TIM_OC6_SetConfig+0xa4>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d109      	bne.n	8007274 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007266:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	029b      	lsls	r3, r3, #10
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4313      	orrs	r3, r2
 8007272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	621a      	str	r2, [r3, #32]
}
 800728e:	bf00      	nop
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	feff8fff 	.word	0xfeff8fff
 80072a0:	40010000 	.word	0x40010000
 80072a4:	40010400 	.word	0x40010400

080072a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b087      	sub	sp, #28
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	f023 0201 	bic.w	r2, r3, #1
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	011b      	lsls	r3, r3, #4
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	4313      	orrs	r3, r2
 80072dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f023 030a 	bic.w	r3, r3, #10
 80072e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	621a      	str	r2, [r3, #32]
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007306:	b480      	push	{r7}
 8007308:	b087      	sub	sp, #28
 800730a:	af00      	add	r7, sp, #0
 800730c:	60f8      	str	r0, [r7, #12]
 800730e:	60b9      	str	r1, [r7, #8]
 8007310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	f023 0210 	bic.w	r2, r3, #16
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007330:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	031b      	lsls	r3, r3, #12
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007342:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	011b      	lsls	r3, r3, #4
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	4313      	orrs	r3, r2
 800734c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	621a      	str	r2, [r3, #32]
}
 800735a:	bf00      	nop
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007366:	b480      	push	{r7}
 8007368:	b085      	sub	sp, #20
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800737c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4313      	orrs	r3, r2
 8007384:	f043 0307 	orr.w	r3, r3, #7
 8007388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	609a      	str	r2, [r3, #8]
}
 8007390:	bf00      	nop
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
 80073a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	021a      	lsls	r2, r3, #8
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	431a      	orrs	r2, r3
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	609a      	str	r2, [r3, #8]
}
 80073d0:	bf00      	nop
 80073d2:	371c      	adds	r7, #28
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f003 031f 	and.w	r3, r3, #31
 80073ee:	2201      	movs	r2, #1
 80073f0:	fa02 f303 	lsl.w	r3, r2, r3
 80073f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a1a      	ldr	r2, [r3, #32]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	43db      	mvns	r3, r3
 80073fe:	401a      	ands	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a1a      	ldr	r2, [r3, #32]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f003 031f 	and.w	r3, r3, #31
 800740e:	6879      	ldr	r1, [r7, #4]
 8007410:	fa01 f303 	lsl.w	r3, r1, r3
 8007414:	431a      	orrs	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	621a      	str	r2, [r3, #32]
}
 800741a:	bf00      	nop
 800741c:	371c      	adds	r7, #28
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
	...

08007428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800743c:	2302      	movs	r3, #2
 800743e:	e06d      	b.n	800751c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a30      	ldr	r2, [pc, #192]	@ (8007528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d004      	beq.n	8007474 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a2f      	ldr	r2, [pc, #188]	@ (800752c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d108      	bne.n	8007486 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800747a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800748c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a20      	ldr	r2, [pc, #128]	@ (8007528 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d022      	beq.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074b2:	d01d      	beq.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007530 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d018      	beq.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a1c      	ldr	r2, [pc, #112]	@ (8007534 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d013      	beq.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1a      	ldr	r2, [pc, #104]	@ (8007538 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00e      	beq.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a15      	ldr	r2, [pc, #84]	@ (800752c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d009      	beq.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a16      	ldr	r2, [pc, #88]	@ (800753c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d004      	beq.n	80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a15      	ldr	r2, [pc, #84]	@ (8007540 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d10c      	bne.n	800750a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	4313      	orrs	r3, r2
 8007500:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	40010000 	.word	0x40010000
 800752c:	40010400 	.word	0x40010400
 8007530:	40000400 	.word	0x40000400
 8007534:	40000800 	.word	0x40000800
 8007538:	40000c00 	.word	0x40000c00
 800753c:	40014000 	.word	0x40014000
 8007540:	40001800 	.word	0x40001800

08007544 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e040      	b.n	8007614 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007596:	2b00      	cmp	r3, #0
 8007598:	d106      	bne.n	80075a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fb fc34 	bl	8002e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2224      	movs	r2, #36	@ 0x24
 80075ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0201 	bic.w	r2, r2, #1
 80075bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d002      	beq.n	80075cc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fe4c 	bl	8008264 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fbe5 	bl	8007d9c <UART_SetConfig>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d101      	bne.n	80075dc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e01b      	b.n	8007614 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0201 	orr.w	r2, r2, #1
 800760a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fecb 	bl	80083a8 <UART_CheckIdleState>
 8007612:	4603      	mov	r3, r0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b08a      	sub	sp, #40	@ 0x28
 8007620:	af02      	add	r7, sp, #8
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	4613      	mov	r3, r2
 800762a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007630:	2b20      	cmp	r3, #32
 8007632:	d177      	bne.n	8007724 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <HAL_UART_Transmit+0x24>
 800763a:	88fb      	ldrh	r3, [r7, #6]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e070      	b.n	8007726 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2221      	movs	r2, #33	@ 0x21
 8007650:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007652:	f7fb fd67 	bl	8003124 <HAL_GetTick>
 8007656:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	88fa      	ldrh	r2, [r7, #6]
 800765c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	88fa      	ldrh	r2, [r7, #6]
 8007664:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007670:	d108      	bne.n	8007684 <HAL_UART_Transmit+0x68>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d104      	bne.n	8007684 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800767a:	2300      	movs	r3, #0
 800767c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	61bb      	str	r3, [r7, #24]
 8007682:	e003      	b.n	800768c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007688:	2300      	movs	r3, #0
 800768a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800768c:	e02f      	b.n	80076ee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2200      	movs	r2, #0
 8007696:	2180      	movs	r1, #128	@ 0x80
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 fedc 	bl	8008456 <UART_WaitOnFlagUntilTimeout>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2220      	movs	r2, #32
 80076a8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e03b      	b.n	8007726 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10b      	bne.n	80076cc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	3302      	adds	r3, #2
 80076c8:	61bb      	str	r3, [r7, #24]
 80076ca:	e007      	b.n	80076dc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	781a      	ldrb	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	3301      	adds	r3, #1
 80076da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	3b01      	subs	r3, #1
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1c9      	bne.n	800768e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2200      	movs	r2, #0
 8007702:	2140      	movs	r1, #64	@ 0x40
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 fea6 	bl	8008456 <UART_WaitOnFlagUntilTimeout>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d004      	beq.n	800771a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2220      	movs	r2, #32
 8007714:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e005      	b.n	8007726 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2220      	movs	r2, #32
 800771e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	e000      	b.n	8007726 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007724:	2302      	movs	r3, #2
  }
}
 8007726:	4618      	mov	r0, r3
 8007728:	3720      	adds	r7, #32
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b08a      	sub	sp, #40	@ 0x28
 8007732:	af00      	add	r7, sp, #0
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	4613      	mov	r3, r2
 800773a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007742:	2b20      	cmp	r3, #32
 8007744:	d132      	bne.n	80077ac <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <HAL_UART_Receive_IT+0x24>
 800774c:	88fb      	ldrh	r3, [r7, #6]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e02b      	b.n	80077ae <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d018      	beq.n	800779c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	613b      	str	r3, [r7, #16]
   return(result);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800777e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	623b      	str	r3, [r7, #32]
 800778a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	69f9      	ldr	r1, [r7, #28]
 800778e:	6a3a      	ldr	r2, [r7, #32]
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	61bb      	str	r3, [r7, #24]
   return(result);
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e6      	bne.n	800776a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800779c:	88fb      	ldrh	r3, [r7, #6]
 800779e:	461a      	mov	r2, r3
 80077a0:	68b9      	ldr	r1, [r7, #8]
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 fec4 	bl	8008530 <UART_Start_Receive_IT>
 80077a8:	4603      	mov	r3, r0
 80077aa:	e000      	b.n	80077ae <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80077ac:	2302      	movs	r3, #2
  }
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3728      	adds	r7, #40	@ 0x28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b0ba      	sub	sp, #232	@ 0xe8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80077e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80077e6:	4013      	ands	r3, r2
 80077e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80077ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d115      	bne.n	8007820 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80077f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077f8:	f003 0320 	and.w	r3, r3, #32
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00f      	beq.n	8007820 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007804:	f003 0320 	and.w	r3, r3, #32
 8007808:	2b00      	cmp	r3, #0
 800780a:	d009      	beq.n	8007820 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 8297 	beq.w	8007d44 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	4798      	blx	r3
      }
      return;
 800781e:	e291      	b.n	8007d44 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 8117 	beq.w	8007a58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800782a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d106      	bne.n	8007844 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007836:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800783a:	4b85      	ldr	r3, [pc, #532]	@ (8007a50 <HAL_UART_IRQHandler+0x298>)
 800783c:	4013      	ands	r3, r2
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 810a 	beq.w	8007a58 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	d011      	beq.n	8007874 <HAL_UART_IRQHandler+0xbc>
 8007850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00b      	beq.n	8007874 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2201      	movs	r2, #1
 8007862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800786a:	f043 0201 	orr.w	r2, r3, #1
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d011      	beq.n	80078a4 <HAL_UART_IRQHandler+0xec>
 8007880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00b      	beq.n	80078a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2202      	movs	r2, #2
 8007892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800789a:	f043 0204 	orr.w	r2, r3, #4
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d011      	beq.n	80078d4 <HAL_UART_IRQHandler+0x11c>
 80078b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00b      	beq.n	80078d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2204      	movs	r2, #4
 80078c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078ca:	f043 0202 	orr.w	r2, r3, #2
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078d8:	f003 0308 	and.w	r3, r3, #8
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d017      	beq.n	8007910 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078e4:	f003 0320 	and.w	r3, r3, #32
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d105      	bne.n	80078f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80078ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00b      	beq.n	8007910 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2208      	movs	r2, #8
 80078fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007906:	f043 0208 	orr.w	r2, r3, #8
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007914:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007918:	2b00      	cmp	r3, #0
 800791a:	d012      	beq.n	8007942 <HAL_UART_IRQHandler+0x18a>
 800791c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007920:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00c      	beq.n	8007942 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007930:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007938:	f043 0220 	orr.w	r2, r3, #32
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 81fd 	beq.w	8007d48 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800794e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00d      	beq.n	8007976 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800795a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800795e:	f003 0320 	and.w	r3, r3, #32
 8007962:	2b00      	cmp	r3, #0
 8007964:	d007      	beq.n	8007976 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800797c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800798a:	2b40      	cmp	r3, #64	@ 0x40
 800798c:	d005      	beq.n	800799a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800798e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007992:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007996:	2b00      	cmp	r3, #0
 8007998:	d04f      	beq.n	8007a3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fe8e 	bl	80086bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079aa:	2b40      	cmp	r3, #64	@ 0x40
 80079ac:	d141      	bne.n	8007a32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3308      	adds	r3, #8
 80079b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079bc:	e853 3f00 	ldrex	r3, [r3]
 80079c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3308      	adds	r3, #8
 80079d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80079da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80079de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80079e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80079ea:	e841 2300 	strex	r3, r2, [r1]
 80079ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80079f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1d9      	bne.n	80079ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d013      	beq.n	8007a2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a06:	4a13      	ldr	r2, [pc, #76]	@ (8007a54 <HAL_UART_IRQHandler+0x29c>)
 8007a08:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fc f933 	bl	8003c7a <HAL_DMA_Abort_IT>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d017      	beq.n	8007a4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007a24:	4610      	mov	r0, r2
 8007a26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a28:	e00f      	b.n	8007a4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f9a0 	bl	8007d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a30:	e00b      	b.n	8007a4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f99c 	bl	8007d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a38:	e007      	b.n	8007a4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f998 	bl	8007d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007a48:	e17e      	b.n	8007d48 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4a:	bf00      	nop
    return;
 8007a4c:	e17c      	b.n	8007d48 <HAL_UART_IRQHandler+0x590>
 8007a4e:	bf00      	nop
 8007a50:	04000120 	.word	0x04000120
 8007a54:	08008785 	.word	0x08008785

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	f040 814c 	bne.w	8007cfa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a66:	f003 0310 	and.w	r3, r3, #16
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 8145 	beq.w	8007cfa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a74:	f003 0310 	and.w	r3, r3, #16
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 813e 	beq.w	8007cfa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2210      	movs	r2, #16
 8007a84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a90:	2b40      	cmp	r3, #64	@ 0x40
 8007a92:	f040 80b6 	bne.w	8007c02 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007aa2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 8150 	beq.w	8007d4c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007ab2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	f080 8148 	bcs.w	8007d4c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ac2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aca:	69db      	ldr	r3, [r3, #28]
 8007acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ad0:	f000 8086 	beq.w	8007be0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ae0:	e853 3f00 	ldrex	r3, [r3]
 8007ae4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007af0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	461a      	mov	r2, r3
 8007afa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007afe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1da      	bne.n	8007ad4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3308      	adds	r3, #8
 8007b24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b30:	f023 0301 	bic.w	r3, r3, #1
 8007b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b4e:	e841 2300 	strex	r3, r2, [r1]
 8007b52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1e1      	bne.n	8007b1e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3308      	adds	r3, #8
 8007b60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b64:	e853 3f00 	ldrex	r3, [r3]
 8007b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3308      	adds	r3, #8
 8007b7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e3      	bne.n	8007b5a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bb0:	f023 0310 	bic.w	r3, r3, #16
 8007bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007bc4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007bd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e4      	bne.n	8007ba0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fb ffdd 	bl	8003b9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f8c2 	bl	8007d84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c00:	e0a4      	b.n	8007d4c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 8096 	beq.w	8007d50 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 8091 	beq.w	8007d50 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c36:	e853 3f00 	ldrex	r3, [r3]
 8007c3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c52:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c58:	e841 2300 	strex	r3, r2, [r1]
 8007c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e4      	bne.n	8007c2e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3308      	adds	r3, #8
 8007c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6e:	e853 3f00 	ldrex	r3, [r3]
 8007c72:	623b      	str	r3, [r7, #32]
   return(result);
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	f023 0301 	bic.w	r3, r3, #1
 8007c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3308      	adds	r3, #8
 8007c84:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c88:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c90:	e841 2300 	strex	r3, r2, [r1]
 8007c94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e3      	bne.n	8007c64 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	e853 3f00 	ldrex	r3, [r3]
 8007cbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f023 0310 	bic.w	r3, r3, #16
 8007cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	461a      	mov	r2, r3
 8007cce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007cd2:	61fb      	str	r3, [r7, #28]
 8007cd4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd6:	69b9      	ldr	r1, [r7, #24]
 8007cd8:	69fa      	ldr	r2, [r7, #28]
 8007cda:	e841 2300 	strex	r3, r2, [r1]
 8007cde:	617b      	str	r3, [r7, #20]
   return(result);
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1e4      	bne.n	8007cb0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2202      	movs	r2, #2
 8007cea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f846 	bl	8007d84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cf8:	e02a      	b.n	8007d50 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00e      	beq.n	8007d24 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d008      	beq.n	8007d24 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d01c      	beq.n	8007d54 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	4798      	blx	r3
    }
    return;
 8007d22:	e017      	b.n	8007d54 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d012      	beq.n	8007d56 <HAL_UART_IRQHandler+0x59e>
 8007d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00c      	beq.n	8007d56 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fd37 	bl	80087b0 <UART_EndTransmit_IT>
    return;
 8007d42:	e008      	b.n	8007d56 <HAL_UART_IRQHandler+0x59e>
      return;
 8007d44:	bf00      	nop
 8007d46:	e006      	b.n	8007d56 <HAL_UART_IRQHandler+0x59e>
    return;
 8007d48:	bf00      	nop
 8007d4a:	e004      	b.n	8007d56 <HAL_UART_IRQHandler+0x59e>
      return;
 8007d4c:	bf00      	nop
 8007d4e:	e002      	b.n	8007d56 <HAL_UART_IRQHandler+0x59e>
      return;
 8007d50:	bf00      	nop
 8007d52:	e000      	b.n	8007d56 <HAL_UART_IRQHandler+0x59e>
    return;
 8007d54:	bf00      	nop
  }

}
 8007d56:	37e8      	adds	r7, #232	@ 0xe8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b088      	sub	sp, #32
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689a      	ldr	r2, [r3, #8]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	431a      	orrs	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	431a      	orrs	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	4ba6      	ldr	r3, [pc, #664]	@ (8008060 <UART_SetConfig+0x2c4>)
 8007dc8:	4013      	ands	r3, r2
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	6812      	ldr	r2, [r2, #0]
 8007dce:	6979      	ldr	r1, [r7, #20]
 8007dd0:	430b      	orrs	r3, r1
 8007dd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a94      	ldr	r2, [pc, #592]	@ (8008064 <UART_SetConfig+0x2c8>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d120      	bne.n	8007e5a <UART_SetConfig+0xbe>
 8007e18:	4b93      	ldr	r3, [pc, #588]	@ (8008068 <UART_SetConfig+0x2cc>)
 8007e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e1e:	f003 0303 	and.w	r3, r3, #3
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d816      	bhi.n	8007e54 <UART_SetConfig+0xb8>
 8007e26:	a201      	add	r2, pc, #4	@ (adr r2, 8007e2c <UART_SetConfig+0x90>)
 8007e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2c:	08007e3d 	.word	0x08007e3d
 8007e30:	08007e49 	.word	0x08007e49
 8007e34:	08007e43 	.word	0x08007e43
 8007e38:	08007e4f 	.word	0x08007e4f
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	77fb      	strb	r3, [r7, #31]
 8007e40:	e150      	b.n	80080e4 <UART_SetConfig+0x348>
 8007e42:	2302      	movs	r3, #2
 8007e44:	77fb      	strb	r3, [r7, #31]
 8007e46:	e14d      	b.n	80080e4 <UART_SetConfig+0x348>
 8007e48:	2304      	movs	r3, #4
 8007e4a:	77fb      	strb	r3, [r7, #31]
 8007e4c:	e14a      	b.n	80080e4 <UART_SetConfig+0x348>
 8007e4e:	2308      	movs	r3, #8
 8007e50:	77fb      	strb	r3, [r7, #31]
 8007e52:	e147      	b.n	80080e4 <UART_SetConfig+0x348>
 8007e54:	2310      	movs	r3, #16
 8007e56:	77fb      	strb	r3, [r7, #31]
 8007e58:	e144      	b.n	80080e4 <UART_SetConfig+0x348>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a83      	ldr	r2, [pc, #524]	@ (800806c <UART_SetConfig+0x2d0>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d132      	bne.n	8007eca <UART_SetConfig+0x12e>
 8007e64:	4b80      	ldr	r3, [pc, #512]	@ (8008068 <UART_SetConfig+0x2cc>)
 8007e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e6a:	f003 030c 	and.w	r3, r3, #12
 8007e6e:	2b0c      	cmp	r3, #12
 8007e70:	d828      	bhi.n	8007ec4 <UART_SetConfig+0x128>
 8007e72:	a201      	add	r2, pc, #4	@ (adr r2, 8007e78 <UART_SetConfig+0xdc>)
 8007e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e78:	08007ead 	.word	0x08007ead
 8007e7c:	08007ec5 	.word	0x08007ec5
 8007e80:	08007ec5 	.word	0x08007ec5
 8007e84:	08007ec5 	.word	0x08007ec5
 8007e88:	08007eb9 	.word	0x08007eb9
 8007e8c:	08007ec5 	.word	0x08007ec5
 8007e90:	08007ec5 	.word	0x08007ec5
 8007e94:	08007ec5 	.word	0x08007ec5
 8007e98:	08007eb3 	.word	0x08007eb3
 8007e9c:	08007ec5 	.word	0x08007ec5
 8007ea0:	08007ec5 	.word	0x08007ec5
 8007ea4:	08007ec5 	.word	0x08007ec5
 8007ea8:	08007ebf 	.word	0x08007ebf
 8007eac:	2300      	movs	r3, #0
 8007eae:	77fb      	strb	r3, [r7, #31]
 8007eb0:	e118      	b.n	80080e4 <UART_SetConfig+0x348>
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	77fb      	strb	r3, [r7, #31]
 8007eb6:	e115      	b.n	80080e4 <UART_SetConfig+0x348>
 8007eb8:	2304      	movs	r3, #4
 8007eba:	77fb      	strb	r3, [r7, #31]
 8007ebc:	e112      	b.n	80080e4 <UART_SetConfig+0x348>
 8007ebe:	2308      	movs	r3, #8
 8007ec0:	77fb      	strb	r3, [r7, #31]
 8007ec2:	e10f      	b.n	80080e4 <UART_SetConfig+0x348>
 8007ec4:	2310      	movs	r3, #16
 8007ec6:	77fb      	strb	r3, [r7, #31]
 8007ec8:	e10c      	b.n	80080e4 <UART_SetConfig+0x348>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a68      	ldr	r2, [pc, #416]	@ (8008070 <UART_SetConfig+0x2d4>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d120      	bne.n	8007f16 <UART_SetConfig+0x17a>
 8007ed4:	4b64      	ldr	r3, [pc, #400]	@ (8008068 <UART_SetConfig+0x2cc>)
 8007ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007eda:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007ede:	2b30      	cmp	r3, #48	@ 0x30
 8007ee0:	d013      	beq.n	8007f0a <UART_SetConfig+0x16e>
 8007ee2:	2b30      	cmp	r3, #48	@ 0x30
 8007ee4:	d814      	bhi.n	8007f10 <UART_SetConfig+0x174>
 8007ee6:	2b20      	cmp	r3, #32
 8007ee8:	d009      	beq.n	8007efe <UART_SetConfig+0x162>
 8007eea:	2b20      	cmp	r3, #32
 8007eec:	d810      	bhi.n	8007f10 <UART_SetConfig+0x174>
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d002      	beq.n	8007ef8 <UART_SetConfig+0x15c>
 8007ef2:	2b10      	cmp	r3, #16
 8007ef4:	d006      	beq.n	8007f04 <UART_SetConfig+0x168>
 8007ef6:	e00b      	b.n	8007f10 <UART_SetConfig+0x174>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	77fb      	strb	r3, [r7, #31]
 8007efc:	e0f2      	b.n	80080e4 <UART_SetConfig+0x348>
 8007efe:	2302      	movs	r3, #2
 8007f00:	77fb      	strb	r3, [r7, #31]
 8007f02:	e0ef      	b.n	80080e4 <UART_SetConfig+0x348>
 8007f04:	2304      	movs	r3, #4
 8007f06:	77fb      	strb	r3, [r7, #31]
 8007f08:	e0ec      	b.n	80080e4 <UART_SetConfig+0x348>
 8007f0a:	2308      	movs	r3, #8
 8007f0c:	77fb      	strb	r3, [r7, #31]
 8007f0e:	e0e9      	b.n	80080e4 <UART_SetConfig+0x348>
 8007f10:	2310      	movs	r3, #16
 8007f12:	77fb      	strb	r3, [r7, #31]
 8007f14:	e0e6      	b.n	80080e4 <UART_SetConfig+0x348>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a56      	ldr	r2, [pc, #344]	@ (8008074 <UART_SetConfig+0x2d8>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d120      	bne.n	8007f62 <UART_SetConfig+0x1c6>
 8007f20:	4b51      	ldr	r3, [pc, #324]	@ (8008068 <UART_SetConfig+0x2cc>)
 8007f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f2c:	d013      	beq.n	8007f56 <UART_SetConfig+0x1ba>
 8007f2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f30:	d814      	bhi.n	8007f5c <UART_SetConfig+0x1c0>
 8007f32:	2b80      	cmp	r3, #128	@ 0x80
 8007f34:	d009      	beq.n	8007f4a <UART_SetConfig+0x1ae>
 8007f36:	2b80      	cmp	r3, #128	@ 0x80
 8007f38:	d810      	bhi.n	8007f5c <UART_SetConfig+0x1c0>
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <UART_SetConfig+0x1a8>
 8007f3e:	2b40      	cmp	r3, #64	@ 0x40
 8007f40:	d006      	beq.n	8007f50 <UART_SetConfig+0x1b4>
 8007f42:	e00b      	b.n	8007f5c <UART_SetConfig+0x1c0>
 8007f44:	2300      	movs	r3, #0
 8007f46:	77fb      	strb	r3, [r7, #31]
 8007f48:	e0cc      	b.n	80080e4 <UART_SetConfig+0x348>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	77fb      	strb	r3, [r7, #31]
 8007f4e:	e0c9      	b.n	80080e4 <UART_SetConfig+0x348>
 8007f50:	2304      	movs	r3, #4
 8007f52:	77fb      	strb	r3, [r7, #31]
 8007f54:	e0c6      	b.n	80080e4 <UART_SetConfig+0x348>
 8007f56:	2308      	movs	r3, #8
 8007f58:	77fb      	strb	r3, [r7, #31]
 8007f5a:	e0c3      	b.n	80080e4 <UART_SetConfig+0x348>
 8007f5c:	2310      	movs	r3, #16
 8007f5e:	77fb      	strb	r3, [r7, #31]
 8007f60:	e0c0      	b.n	80080e4 <UART_SetConfig+0x348>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a44      	ldr	r2, [pc, #272]	@ (8008078 <UART_SetConfig+0x2dc>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d125      	bne.n	8007fb8 <UART_SetConfig+0x21c>
 8007f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8008068 <UART_SetConfig+0x2cc>)
 8007f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f7a:	d017      	beq.n	8007fac <UART_SetConfig+0x210>
 8007f7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f80:	d817      	bhi.n	8007fb2 <UART_SetConfig+0x216>
 8007f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f86:	d00b      	beq.n	8007fa0 <UART_SetConfig+0x204>
 8007f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f8c:	d811      	bhi.n	8007fb2 <UART_SetConfig+0x216>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <UART_SetConfig+0x1fe>
 8007f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f96:	d006      	beq.n	8007fa6 <UART_SetConfig+0x20a>
 8007f98:	e00b      	b.n	8007fb2 <UART_SetConfig+0x216>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	77fb      	strb	r3, [r7, #31]
 8007f9e:	e0a1      	b.n	80080e4 <UART_SetConfig+0x348>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	77fb      	strb	r3, [r7, #31]
 8007fa4:	e09e      	b.n	80080e4 <UART_SetConfig+0x348>
 8007fa6:	2304      	movs	r3, #4
 8007fa8:	77fb      	strb	r3, [r7, #31]
 8007faa:	e09b      	b.n	80080e4 <UART_SetConfig+0x348>
 8007fac:	2308      	movs	r3, #8
 8007fae:	77fb      	strb	r3, [r7, #31]
 8007fb0:	e098      	b.n	80080e4 <UART_SetConfig+0x348>
 8007fb2:	2310      	movs	r3, #16
 8007fb4:	77fb      	strb	r3, [r7, #31]
 8007fb6:	e095      	b.n	80080e4 <UART_SetConfig+0x348>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a2f      	ldr	r2, [pc, #188]	@ (800807c <UART_SetConfig+0x2e0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d125      	bne.n	800800e <UART_SetConfig+0x272>
 8007fc2:	4b29      	ldr	r3, [pc, #164]	@ (8008068 <UART_SetConfig+0x2cc>)
 8007fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007fcc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fd0:	d017      	beq.n	8008002 <UART_SetConfig+0x266>
 8007fd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fd6:	d817      	bhi.n	8008008 <UART_SetConfig+0x26c>
 8007fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fdc:	d00b      	beq.n	8007ff6 <UART_SetConfig+0x25a>
 8007fde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fe2:	d811      	bhi.n	8008008 <UART_SetConfig+0x26c>
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d003      	beq.n	8007ff0 <UART_SetConfig+0x254>
 8007fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fec:	d006      	beq.n	8007ffc <UART_SetConfig+0x260>
 8007fee:	e00b      	b.n	8008008 <UART_SetConfig+0x26c>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	77fb      	strb	r3, [r7, #31]
 8007ff4:	e076      	b.n	80080e4 <UART_SetConfig+0x348>
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	77fb      	strb	r3, [r7, #31]
 8007ffa:	e073      	b.n	80080e4 <UART_SetConfig+0x348>
 8007ffc:	2304      	movs	r3, #4
 8007ffe:	77fb      	strb	r3, [r7, #31]
 8008000:	e070      	b.n	80080e4 <UART_SetConfig+0x348>
 8008002:	2308      	movs	r3, #8
 8008004:	77fb      	strb	r3, [r7, #31]
 8008006:	e06d      	b.n	80080e4 <UART_SetConfig+0x348>
 8008008:	2310      	movs	r3, #16
 800800a:	77fb      	strb	r3, [r7, #31]
 800800c:	e06a      	b.n	80080e4 <UART_SetConfig+0x348>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a1b      	ldr	r2, [pc, #108]	@ (8008080 <UART_SetConfig+0x2e4>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d138      	bne.n	800808a <UART_SetConfig+0x2ee>
 8008018:	4b13      	ldr	r3, [pc, #76]	@ (8008068 <UART_SetConfig+0x2cc>)
 800801a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800801e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008022:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008026:	d017      	beq.n	8008058 <UART_SetConfig+0x2bc>
 8008028:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800802c:	d82a      	bhi.n	8008084 <UART_SetConfig+0x2e8>
 800802e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008032:	d00b      	beq.n	800804c <UART_SetConfig+0x2b0>
 8008034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008038:	d824      	bhi.n	8008084 <UART_SetConfig+0x2e8>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <UART_SetConfig+0x2aa>
 800803e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008042:	d006      	beq.n	8008052 <UART_SetConfig+0x2b6>
 8008044:	e01e      	b.n	8008084 <UART_SetConfig+0x2e8>
 8008046:	2300      	movs	r3, #0
 8008048:	77fb      	strb	r3, [r7, #31]
 800804a:	e04b      	b.n	80080e4 <UART_SetConfig+0x348>
 800804c:	2302      	movs	r3, #2
 800804e:	77fb      	strb	r3, [r7, #31]
 8008050:	e048      	b.n	80080e4 <UART_SetConfig+0x348>
 8008052:	2304      	movs	r3, #4
 8008054:	77fb      	strb	r3, [r7, #31]
 8008056:	e045      	b.n	80080e4 <UART_SetConfig+0x348>
 8008058:	2308      	movs	r3, #8
 800805a:	77fb      	strb	r3, [r7, #31]
 800805c:	e042      	b.n	80080e4 <UART_SetConfig+0x348>
 800805e:	bf00      	nop
 8008060:	efff69f3 	.word	0xefff69f3
 8008064:	40011000 	.word	0x40011000
 8008068:	40023800 	.word	0x40023800
 800806c:	40004400 	.word	0x40004400
 8008070:	40004800 	.word	0x40004800
 8008074:	40004c00 	.word	0x40004c00
 8008078:	40005000 	.word	0x40005000
 800807c:	40011400 	.word	0x40011400
 8008080:	40007800 	.word	0x40007800
 8008084:	2310      	movs	r3, #16
 8008086:	77fb      	strb	r3, [r7, #31]
 8008088:	e02c      	b.n	80080e4 <UART_SetConfig+0x348>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a72      	ldr	r2, [pc, #456]	@ (8008258 <UART_SetConfig+0x4bc>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d125      	bne.n	80080e0 <UART_SetConfig+0x344>
 8008094:	4b71      	ldr	r3, [pc, #452]	@ (800825c <UART_SetConfig+0x4c0>)
 8008096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800809a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800809e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80080a2:	d017      	beq.n	80080d4 <UART_SetConfig+0x338>
 80080a4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80080a8:	d817      	bhi.n	80080da <UART_SetConfig+0x33e>
 80080aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080ae:	d00b      	beq.n	80080c8 <UART_SetConfig+0x32c>
 80080b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080b4:	d811      	bhi.n	80080da <UART_SetConfig+0x33e>
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <UART_SetConfig+0x326>
 80080ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80080be:	d006      	beq.n	80080ce <UART_SetConfig+0x332>
 80080c0:	e00b      	b.n	80080da <UART_SetConfig+0x33e>
 80080c2:	2300      	movs	r3, #0
 80080c4:	77fb      	strb	r3, [r7, #31]
 80080c6:	e00d      	b.n	80080e4 <UART_SetConfig+0x348>
 80080c8:	2302      	movs	r3, #2
 80080ca:	77fb      	strb	r3, [r7, #31]
 80080cc:	e00a      	b.n	80080e4 <UART_SetConfig+0x348>
 80080ce:	2304      	movs	r3, #4
 80080d0:	77fb      	strb	r3, [r7, #31]
 80080d2:	e007      	b.n	80080e4 <UART_SetConfig+0x348>
 80080d4:	2308      	movs	r3, #8
 80080d6:	77fb      	strb	r3, [r7, #31]
 80080d8:	e004      	b.n	80080e4 <UART_SetConfig+0x348>
 80080da:	2310      	movs	r3, #16
 80080dc:	77fb      	strb	r3, [r7, #31]
 80080de:	e001      	b.n	80080e4 <UART_SetConfig+0x348>
 80080e0:	2310      	movs	r3, #16
 80080e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	69db      	ldr	r3, [r3, #28]
 80080e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080ec:	d15b      	bne.n	80081a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80080ee:	7ffb      	ldrb	r3, [r7, #31]
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	d828      	bhi.n	8008146 <UART_SetConfig+0x3aa>
 80080f4:	a201      	add	r2, pc, #4	@ (adr r2, 80080fc <UART_SetConfig+0x360>)
 80080f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fa:	bf00      	nop
 80080fc:	08008121 	.word	0x08008121
 8008100:	08008129 	.word	0x08008129
 8008104:	08008131 	.word	0x08008131
 8008108:	08008147 	.word	0x08008147
 800810c:	08008137 	.word	0x08008137
 8008110:	08008147 	.word	0x08008147
 8008114:	08008147 	.word	0x08008147
 8008118:	08008147 	.word	0x08008147
 800811c:	0800813f 	.word	0x0800813f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008120:	f7fd fb1c 	bl	800575c <HAL_RCC_GetPCLK1Freq>
 8008124:	61b8      	str	r0, [r7, #24]
        break;
 8008126:	e013      	b.n	8008150 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008128:	f7fd fb2c 	bl	8005784 <HAL_RCC_GetPCLK2Freq>
 800812c:	61b8      	str	r0, [r7, #24]
        break;
 800812e:	e00f      	b.n	8008150 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008130:	4b4b      	ldr	r3, [pc, #300]	@ (8008260 <UART_SetConfig+0x4c4>)
 8008132:	61bb      	str	r3, [r7, #24]
        break;
 8008134:	e00c      	b.n	8008150 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008136:	f7fd f9ff 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 800813a:	61b8      	str	r0, [r7, #24]
        break;
 800813c:	e008      	b.n	8008150 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800813e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008142:	61bb      	str	r3, [r7, #24]
        break;
 8008144:	e004      	b.n	8008150 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	77bb      	strb	r3, [r7, #30]
        break;
 800814e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d074      	beq.n	8008240 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	005a      	lsls	r2, r3, #1
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	085b      	lsrs	r3, r3, #1
 8008160:	441a      	add	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	fbb2 f3f3 	udiv	r3, r2, r3
 800816a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	2b0f      	cmp	r3, #15
 8008170:	d916      	bls.n	80081a0 <UART_SetConfig+0x404>
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008178:	d212      	bcs.n	80081a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	b29b      	uxth	r3, r3
 800817e:	f023 030f 	bic.w	r3, r3, #15
 8008182:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	085b      	lsrs	r3, r3, #1
 8008188:	b29b      	uxth	r3, r3
 800818a:	f003 0307 	and.w	r3, r3, #7
 800818e:	b29a      	uxth	r2, r3
 8008190:	89fb      	ldrh	r3, [r7, #14]
 8008192:	4313      	orrs	r3, r2
 8008194:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	89fa      	ldrh	r2, [r7, #14]
 800819c:	60da      	str	r2, [r3, #12]
 800819e:	e04f      	b.n	8008240 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	77bb      	strb	r3, [r7, #30]
 80081a4:	e04c      	b.n	8008240 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081a6:	7ffb      	ldrb	r3, [r7, #31]
 80081a8:	2b08      	cmp	r3, #8
 80081aa:	d828      	bhi.n	80081fe <UART_SetConfig+0x462>
 80081ac:	a201      	add	r2, pc, #4	@ (adr r2, 80081b4 <UART_SetConfig+0x418>)
 80081ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b2:	bf00      	nop
 80081b4:	080081d9 	.word	0x080081d9
 80081b8:	080081e1 	.word	0x080081e1
 80081bc:	080081e9 	.word	0x080081e9
 80081c0:	080081ff 	.word	0x080081ff
 80081c4:	080081ef 	.word	0x080081ef
 80081c8:	080081ff 	.word	0x080081ff
 80081cc:	080081ff 	.word	0x080081ff
 80081d0:	080081ff 	.word	0x080081ff
 80081d4:	080081f7 	.word	0x080081f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081d8:	f7fd fac0 	bl	800575c <HAL_RCC_GetPCLK1Freq>
 80081dc:	61b8      	str	r0, [r7, #24]
        break;
 80081de:	e013      	b.n	8008208 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081e0:	f7fd fad0 	bl	8005784 <HAL_RCC_GetPCLK2Freq>
 80081e4:	61b8      	str	r0, [r7, #24]
        break;
 80081e6:	e00f      	b.n	8008208 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008260 <UART_SetConfig+0x4c4>)
 80081ea:	61bb      	str	r3, [r7, #24]
        break;
 80081ec:	e00c      	b.n	8008208 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ee:	f7fd f9a3 	bl	8005538 <HAL_RCC_GetSysClockFreq>
 80081f2:	61b8      	str	r0, [r7, #24]
        break;
 80081f4:	e008      	b.n	8008208 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081fa:	61bb      	str	r3, [r7, #24]
        break;
 80081fc:	e004      	b.n	8008208 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80081fe:	2300      	movs	r3, #0
 8008200:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	77bb      	strb	r3, [r7, #30]
        break;
 8008206:	bf00      	nop
    }

    if (pclk != 0U)
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d018      	beq.n	8008240 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	085a      	lsrs	r2, r3, #1
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	441a      	add	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008220:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	2b0f      	cmp	r3, #15
 8008226:	d909      	bls.n	800823c <UART_SetConfig+0x4a0>
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800822e:	d205      	bcs.n	800823c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	b29a      	uxth	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	60da      	str	r2, [r3, #12]
 800823a:	e001      	b.n	8008240 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800824c:	7fbb      	ldrb	r3, [r7, #30]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3720      	adds	r7, #32
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	40007c00 	.word	0x40007c00
 800825c:	40023800 	.word	0x40023800
 8008260:	00f42400 	.word	0x00f42400

08008264 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008270:	f003 0308 	and.w	r3, r3, #8
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00a      	beq.n	800828e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	430a      	orrs	r2, r1
 800828c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00a      	beq.n	80082b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d6:	f003 0304 	and.w	r3, r3, #4
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f8:	f003 0310 	and.w	r3, r3, #16
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00a      	beq.n	8008316 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800831a:	f003 0320 	and.w	r3, r3, #32
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800833c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	d01a      	beq.n	800837a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800835e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008362:	d10a      	bne.n	800837a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00a      	beq.n	800839c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	605a      	str	r2, [r3, #4]
  }
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08c      	sub	sp, #48	@ 0x30
 80083ac:	af02      	add	r7, sp, #8
 80083ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083b8:	f7fa feb4 	bl	8003124 <HAL_GetTick>
 80083bc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0308 	and.w	r3, r3, #8
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d12e      	bne.n	800842a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d4:	2200      	movs	r2, #0
 80083d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f83b 	bl	8008456 <UART_WaitOnFlagUntilTimeout>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d021      	beq.n	800842a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	e853 3f00 	ldrex	r3, [r3]
 80083f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083fa:	623b      	str	r3, [r7, #32]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	461a      	mov	r2, r3
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	61fb      	str	r3, [r7, #28]
 8008406:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008408:	69b9      	ldr	r1, [r7, #24]
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	e841 2300 	strex	r3, r2, [r1]
 8008410:	617b      	str	r3, [r7, #20]
   return(result);
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1e6      	bne.n	80083e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2220      	movs	r2, #32
 800841c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e011      	b.n	800844e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2220      	movs	r2, #32
 800842e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2220      	movs	r2, #32
 8008434:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3728      	adds	r7, #40	@ 0x28
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b084      	sub	sp, #16
 800845a:	af00      	add	r7, sp, #0
 800845c:	60f8      	str	r0, [r7, #12]
 800845e:	60b9      	str	r1, [r7, #8]
 8008460:	603b      	str	r3, [r7, #0]
 8008462:	4613      	mov	r3, r2
 8008464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008466:	e04f      	b.n	8008508 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800846e:	d04b      	beq.n	8008508 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008470:	f7fa fe58 	bl	8003124 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	429a      	cmp	r2, r3
 800847e:	d302      	bcc.n	8008486 <UART_WaitOnFlagUntilTimeout+0x30>
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008486:	2303      	movs	r3, #3
 8008488:	e04e      	b.n	8008528 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0304 	and.w	r3, r3, #4
 8008494:	2b00      	cmp	r3, #0
 8008496:	d037      	beq.n	8008508 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2b80      	cmp	r3, #128	@ 0x80
 800849c:	d034      	beq.n	8008508 <UART_WaitOnFlagUntilTimeout+0xb2>
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2b40      	cmp	r3, #64	@ 0x40
 80084a2:	d031      	beq.n	8008508 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	69db      	ldr	r3, [r3, #28]
 80084aa:	f003 0308 	and.w	r3, r3, #8
 80084ae:	2b08      	cmp	r3, #8
 80084b0:	d110      	bne.n	80084d4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2208      	movs	r2, #8
 80084b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f000 f8fe 	bl	80086bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2208      	movs	r2, #8
 80084c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e029      	b.n	8008528 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80084e2:	d111      	bne.n	8008508 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80084ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 f8e4 	bl	80086bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008504:	2303      	movs	r3, #3
 8008506:	e00f      	b.n	8008528 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	69da      	ldr	r2, [r3, #28]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	4013      	ands	r3, r2
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	429a      	cmp	r2, r3
 8008516:	bf0c      	ite	eq
 8008518:	2301      	moveq	r3, #1
 800851a:	2300      	movne	r3, #0
 800851c:	b2db      	uxtb	r3, r3
 800851e:	461a      	mov	r2, r3
 8008520:	79fb      	ldrb	r3, [r7, #7]
 8008522:	429a      	cmp	r2, r3
 8008524:	d0a0      	beq.n	8008468 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008530:	b480      	push	{r7}
 8008532:	b097      	sub	sp, #92	@ 0x5c
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	4613      	mov	r3, r2
 800853c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	88fa      	ldrh	r2, [r7, #6]
 8008548:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	88fa      	ldrh	r2, [r7, #6]
 8008550:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008562:	d10e      	bne.n	8008582 <UART_Start_Receive_IT+0x52>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d105      	bne.n	8008578 <UART_Start_Receive_IT+0x48>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008572:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008576:	e02d      	b.n	80085d4 <UART_Start_Receive_IT+0xa4>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	22ff      	movs	r2, #255	@ 0xff
 800857c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008580:	e028      	b.n	80085d4 <UART_Start_Receive_IT+0xa4>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10d      	bne.n	80085a6 <UART_Start_Receive_IT+0x76>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d104      	bne.n	800859c <UART_Start_Receive_IT+0x6c>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	22ff      	movs	r2, #255	@ 0xff
 8008596:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800859a:	e01b      	b.n	80085d4 <UART_Start_Receive_IT+0xa4>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	227f      	movs	r2, #127	@ 0x7f
 80085a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80085a4:	e016      	b.n	80085d4 <UART_Start_Receive_IT+0xa4>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085ae:	d10d      	bne.n	80085cc <UART_Start_Receive_IT+0x9c>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d104      	bne.n	80085c2 <UART_Start_Receive_IT+0x92>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	227f      	movs	r2, #127	@ 0x7f
 80085bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80085c0:	e008      	b.n	80085d4 <UART_Start_Receive_IT+0xa4>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	223f      	movs	r2, #63	@ 0x3f
 80085c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80085ca:	e003      	b.n	80085d4 <UART_Start_Receive_IT+0xa4>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2222      	movs	r2, #34	@ 0x22
 80085e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3308      	adds	r3, #8
 80085ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085ee:	e853 3f00 	ldrex	r3, [r3]
 80085f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f6:	f043 0301 	orr.w	r3, r3, #1
 80085fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3308      	adds	r3, #8
 8008602:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008604:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008606:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008608:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800860a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800860c:	e841 2300 	strex	r3, r2, [r1]
 8008610:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1e5      	bne.n	80085e4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008620:	d107      	bne.n	8008632 <UART_Start_Receive_IT+0x102>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d103      	bne.n	8008632 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	4a21      	ldr	r2, [pc, #132]	@ (80086b4 <UART_Start_Receive_IT+0x184>)
 800862e:	669a      	str	r2, [r3, #104]	@ 0x68
 8008630:	e002      	b.n	8008638 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	4a20      	ldr	r2, [pc, #128]	@ (80086b8 <UART_Start_Receive_IT+0x188>)
 8008636:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d019      	beq.n	8008674 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008654:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800865e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008660:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008664:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800866c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e6      	bne.n	8008640 <UART_Start_Receive_IT+0x110>
 8008672:	e018      	b.n	80086a6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	613b      	str	r3, [r7, #16]
   return(result);
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	f043 0320 	orr.w	r3, r3, #32
 8008688:	653b      	str	r3, [r7, #80]	@ 0x50
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008692:	623b      	str	r3, [r7, #32]
 8008694:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008696:	69f9      	ldr	r1, [r7, #28]
 8008698:	6a3a      	ldr	r2, [r7, #32]
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	61bb      	str	r3, [r7, #24]
   return(result);
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1e6      	bne.n	8008674 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	375c      	adds	r7, #92	@ 0x5c
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr
 80086b4:	080089ad 	.word	0x080089ad
 80086b8:	08008805 	.word	0x08008805

080086bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086bc:	b480      	push	{r7}
 80086be:	b095      	sub	sp, #84	@ 0x54
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086cc:	e853 3f00 	ldrex	r3, [r3]
 80086d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80086e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086ea:	e841 2300 	strex	r3, r2, [r1]
 80086ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e6      	bne.n	80086c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3308      	adds	r3, #8
 80086fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	e853 3f00 	ldrex	r3, [r3]
 8008704:	61fb      	str	r3, [r7, #28]
   return(result);
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	f023 0301 	bic.w	r3, r3, #1
 800870c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3308      	adds	r3, #8
 8008714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008718:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800871c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800871e:	e841 2300 	strex	r3, r2, [r1]
 8008722:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1e5      	bne.n	80086f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800872e:	2b01      	cmp	r3, #1
 8008730:	d118      	bne.n	8008764 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	e853 3f00 	ldrex	r3, [r3]
 800873e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f023 0310 	bic.w	r3, r3, #16
 8008746:	647b      	str	r3, [r7, #68]	@ 0x44
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	461a      	mov	r2, r3
 800874e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008750:	61bb      	str	r3, [r7, #24]
 8008752:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	6979      	ldr	r1, [r7, #20]
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	613b      	str	r3, [r7, #16]
   return(result);
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e6      	bne.n	8008732 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2220      	movs	r2, #32
 8008768:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008778:	bf00      	nop
 800877a:	3754      	adds	r7, #84	@ 0x54
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008790:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f7ff fae4 	bl	8007d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087a8:	bf00      	nop
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b088      	sub	sp, #32
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	e853 3f00 	ldrex	r3, [r3]
 80087c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087cc:	61fb      	str	r3, [r7, #28]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	61bb      	str	r3, [r7, #24]
 80087d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087da:	6979      	ldr	r1, [r7, #20]
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	613b      	str	r3, [r7, #16]
   return(result);
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e6      	bne.n	80087b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2220      	movs	r2, #32
 80087ee:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff fab0 	bl	8007d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087fc:	bf00      	nop
 80087fe:	3720      	adds	r7, #32
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b09c      	sub	sp, #112	@ 0x70
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008812:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800881c:	2b22      	cmp	r3, #34	@ 0x22
 800881e:	f040 80b9 	bne.w	8008994 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008828:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800882c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008830:	b2d9      	uxtb	r1, r3
 8008832:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008836:	b2da      	uxtb	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800883c:	400a      	ands	r2, r1
 800883e:	b2d2      	uxtb	r2, r2
 8008840:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008852:	b29b      	uxth	r3, r3
 8008854:	3b01      	subs	r3, #1
 8008856:	b29a      	uxth	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008864:	b29b      	uxth	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	f040 809c 	bne.w	80089a4 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008872:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800887a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800887c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800888a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800888c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008890:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1e6      	bne.n	800886c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3308      	adds	r3, #8
 80088a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088b0:	f023 0301 	bic.w	r3, r3, #1
 80088b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	3308      	adds	r3, #8
 80088bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80088be:	647a      	str	r2, [r7, #68]	@ 0x44
 80088c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e5      	bne.n	800889e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2220      	movs	r2, #32
 80088d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d018      	beq.n	8008926 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fc:	e853 3f00 	ldrex	r3, [r3]
 8008900:	623b      	str	r3, [r7, #32]
   return(result);
 8008902:	6a3b      	ldr	r3, [r7, #32]
 8008904:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008908:	663b      	str	r3, [r7, #96]	@ 0x60
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008912:	633b      	str	r3, [r7, #48]	@ 0x30
 8008914:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1e6      	bne.n	80088f4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800892a:	2b01      	cmp	r3, #1
 800892c:	d12e      	bne.n	800898c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	e853 3f00 	ldrex	r3, [r3]
 8008940:	60fb      	str	r3, [r7, #12]
   return(result);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f023 0310 	bic.w	r3, r3, #16
 8008948:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	461a      	mov	r2, r3
 8008950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008952:	61fb      	str	r3, [r7, #28]
 8008954:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008956:	69b9      	ldr	r1, [r7, #24]
 8008958:	69fa      	ldr	r2, [r7, #28]
 800895a:	e841 2300 	strex	r3, r2, [r1]
 800895e:	617b      	str	r3, [r7, #20]
   return(result);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d1e6      	bne.n	8008934 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	69db      	ldr	r3, [r3, #28]
 800896c:	f003 0310 	and.w	r3, r3, #16
 8008970:	2b10      	cmp	r3, #16
 8008972:	d103      	bne.n	800897c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2210      	movs	r2, #16
 800897a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008982:	4619      	mov	r1, r3
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7ff f9fd 	bl	8007d84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800898a:	e00b      	b.n	80089a4 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7f9 fd17 	bl	80023c0 <HAL_UART_RxCpltCallback>
}
 8008992:	e007      	b.n	80089a4 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	699a      	ldr	r2, [r3, #24]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f042 0208 	orr.w	r2, r2, #8
 80089a2:	619a      	str	r2, [r3, #24]
}
 80089a4:	bf00      	nop
 80089a6:	3770      	adds	r7, #112	@ 0x70
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b09c      	sub	sp, #112	@ 0x70
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089c4:	2b22      	cmp	r3, #34	@ 0x22
 80089c6:	f040 80b9 	bne.w	8008b3c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80089da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80089de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80089e2:	4013      	ands	r3, r2
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ee:	1c9a      	adds	r2, r3, #2
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	3b01      	subs	r3, #1
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f040 809c 	bne.w	8008b4c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a28:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a32:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a34:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a38:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e6      	bne.n	8008a14 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a58:	f023 0301 	bic.w	r3, r3, #1
 8008a5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3308      	adds	r3, #8
 8008a64:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008a66:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e5      	bne.n	8008a46 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d018      	beq.n	8008ace <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008abc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e6      	bne.n	8008a9c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d12e      	bne.n	8008b34 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	e853 3f00 	ldrex	r3, [r3]
 8008ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f023 0310 	bic.w	r3, r3, #16
 8008af0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	461a      	mov	r2, r3
 8008af8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008afa:	61bb      	str	r3, [r7, #24]
 8008afc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afe:	6979      	ldr	r1, [r7, #20]
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	e841 2300 	strex	r3, r2, [r1]
 8008b06:	613b      	str	r3, [r7, #16]
   return(result);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1e6      	bne.n	8008adc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	f003 0310 	and.w	r3, r3, #16
 8008b18:	2b10      	cmp	r3, #16
 8008b1a:	d103      	bne.n	8008b24 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2210      	movs	r2, #16
 8008b22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff f929 	bl	8007d84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b32:	e00b      	b.n	8008b4c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7f9 fc43 	bl	80023c0 <HAL_UART_RxCpltCallback>
}
 8008b3a:	e007      	b.n	8008b4c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	699a      	ldr	r2, [r3, #24]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f042 0208 	orr.w	r2, r2, #8
 8008b4a:	619a      	str	r2, [r3, #24]
}
 8008b4c:	bf00      	nop
 8008b4e:	3770      	adds	r7, #112	@ 0x70
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b54:	b084      	sub	sp, #16
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b084      	sub	sp, #16
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
 8008b5e:	f107 001c 	add.w	r0, r7, #28
 8008b62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d121      	bne.n	8008bb2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	4b21      	ldr	r3, [pc, #132]	@ (8008c04 <USB_CoreInit+0xb0>)
 8008b80:	4013      	ands	r3, r2
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d105      	bne.n	8008ba6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fa92 	bl	80090d0 <USB_CoreReset>
 8008bac:	4603      	mov	r3, r0
 8008bae:	73fb      	strb	r3, [r7, #15]
 8008bb0:	e010      	b.n	8008bd4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fa86 	bl	80090d0 <USB_CoreReset>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bcc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8008bd4:	7fbb      	ldrb	r3, [r7, #30]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d10b      	bne.n	8008bf2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f043 0206 	orr.w	r2, r3, #6
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f043 0220 	orr.w	r2, r3, #32
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bfe:	b004      	add	sp, #16
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	ffbdffbf 	.word	0xffbdffbf

08008c08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f023 0201 	bic.w	r2, r3, #1
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	370c      	adds	r7, #12
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	460b      	mov	r3, r1
 8008c34:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c36:	2300      	movs	r3, #0
 8008c38:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c46:	78fb      	ldrb	r3, [r7, #3]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d115      	bne.n	8008c78 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008c58:	200a      	movs	r0, #10
 8008c5a:	f7fa fa6f 	bl	800313c <HAL_Delay>
      ms += 10U;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	330a      	adds	r3, #10
 8008c62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fa25 	bl	80090b4 <USB_GetMode>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d01e      	beq.n	8008cae <USB_SetCurrentMode+0x84>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2bc7      	cmp	r3, #199	@ 0xc7
 8008c74:	d9f0      	bls.n	8008c58 <USB_SetCurrentMode+0x2e>
 8008c76:	e01a      	b.n	8008cae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c78:	78fb      	ldrb	r3, [r7, #3]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d115      	bne.n	8008caa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008c8a:	200a      	movs	r0, #10
 8008c8c:	f7fa fa56 	bl	800313c <HAL_Delay>
      ms += 10U;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	330a      	adds	r3, #10
 8008c94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fa0c 	bl	80090b4 <USB_GetMode>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d005      	beq.n	8008cae <USB_SetCurrentMode+0x84>
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2bc7      	cmp	r3, #199	@ 0xc7
 8008ca6:	d9f0      	bls.n	8008c8a <USB_SetCurrentMode+0x60>
 8008ca8:	e001      	b.n	8008cae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e005      	b.n	8008cba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2bc8      	cmp	r3, #200	@ 0xc8
 8008cb2:	d101      	bne.n	8008cb8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e000      	b.n	8008cba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
	...

08008cc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b086      	sub	sp, #24
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008cde:	2300      	movs	r3, #0
 8008ce0:	613b      	str	r3, [r7, #16]
 8008ce2:	e009      	b.n	8008cf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	3340      	adds	r3, #64	@ 0x40
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	4413      	add	r3, r2
 8008cee:	2200      	movs	r2, #0
 8008cf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	613b      	str	r3, [r7, #16]
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	2b0e      	cmp	r3, #14
 8008cfc:	d9f2      	bls.n	8008ce4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008cfe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d11c      	bne.n	8008d40 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d14:	f043 0302 	orr.w	r3, r3, #2
 8008d18:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d1e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	e005      	b.n	8008d4c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008d52:	461a      	mov	r2, r3
 8008d54:	2300      	movs	r3, #0
 8008d56:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d58:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d10d      	bne.n	8008d7c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d104      	bne.n	8008d72 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d68:	2100      	movs	r1, #0
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f968 	bl	8009040 <USB_SetDevSpeed>
 8008d70:	e008      	b.n	8008d84 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d72:	2101      	movs	r1, #1
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f963 	bl	8009040 <USB_SetDevSpeed>
 8008d7a:	e003      	b.n	8008d84 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d7c:	2103      	movs	r1, #3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f95e 	bl	8009040 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d84:	2110      	movs	r1, #16
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f8fa 	bl	8008f80 <USB_FlushTxFifo>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f924 	bl	8008fe4 <USB_FlushRxFifo>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dac:	461a      	mov	r2, r3
 8008dae:	2300      	movs	r3, #0
 8008db0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008db8:	461a      	mov	r2, r3
 8008dba:	2300      	movs	r3, #0
 8008dbc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008dca:	2300      	movs	r3, #0
 8008dcc:	613b      	str	r3, [r7, #16]
 8008dce:	e043      	b.n	8008e58 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008de2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008de6:	d118      	bne.n	8008e1a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10a      	bne.n	8008e04 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	015a      	lsls	r2, r3, #5
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4413      	add	r3, r2
 8008df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	e013      	b.n	8008e2c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e10:	461a      	mov	r2, r3
 8008e12:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008e16:	6013      	str	r3, [r2, #0]
 8008e18:	e008      	b.n	8008e2c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	015a      	lsls	r2, r3, #5
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e26:	461a      	mov	r2, r3
 8008e28:	2300      	movs	r3, #0
 8008e2a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e38:	461a      	mov	r2, r3
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	015a      	lsls	r2, r3, #5
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008e50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	3301      	adds	r3, #1
 8008e56:	613b      	str	r3, [r7, #16]
 8008e58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d3b5      	bcc.n	8008dd0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e64:	2300      	movs	r3, #0
 8008e66:	613b      	str	r3, [r7, #16]
 8008e68:	e043      	b.n	8008ef2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e80:	d118      	bne.n	8008eb4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10a      	bne.n	8008e9e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	015a      	lsls	r2, r3, #5
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4413      	add	r3, r2
 8008e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e94:	461a      	mov	r2, r3
 8008e96:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	e013      	b.n	8008ec6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	e008      	b.n	8008ec6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008eea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	613b      	str	r3, [r7, #16]
 8008ef2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d3b5      	bcc.n	8008e6a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f10:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008f1e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d105      	bne.n	8008f34 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	f043 0210 	orr.w	r2, r3, #16
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	699a      	ldr	r2, [r3, #24]
 8008f38:	4b0f      	ldr	r3, [pc, #60]	@ (8008f78 <USB_DevInit+0x2b4>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f40:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d005      	beq.n	8008f54 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	f043 0208 	orr.w	r2, r3, #8
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d105      	bne.n	8008f68 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	699a      	ldr	r2, [r3, #24]
 8008f60:	4b06      	ldr	r3, [pc, #24]	@ (8008f7c <USB_DevInit+0x2b8>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f74:	b004      	add	sp, #16
 8008f76:	4770      	bx	lr
 8008f78:	803c3800 	.word	0x803c3800
 8008f7c:	40000004 	.word	0x40000004

08008f80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3301      	adds	r3, #1
 8008f92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f9a:	d901      	bls.n	8008fa0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	e01b      	b.n	8008fd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	daf2      	bge.n	8008f8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	019b      	lsls	r3, r3, #6
 8008fb0:	f043 0220 	orr.w	r2, r3, #32
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008fc4:	d901      	bls.n	8008fca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e006      	b.n	8008fd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	f003 0320 	and.w	r3, r3, #32
 8008fd2:	2b20      	cmp	r3, #32
 8008fd4:	d0f0      	beq.n	8008fb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ffc:	d901      	bls.n	8009002 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	e018      	b.n	8009034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	691b      	ldr	r3, [r3, #16]
 8009006:	2b00      	cmp	r3, #0
 8009008:	daf2      	bge.n	8008ff0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800900a:	2300      	movs	r3, #0
 800900c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2210      	movs	r2, #16
 8009012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3301      	adds	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009020:	d901      	bls.n	8009026 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e006      	b.n	8009034 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	f003 0310 	and.w	r3, r3, #16
 800902e:	2b10      	cmp	r3, #16
 8009030:	d0f0      	beq.n	8009014 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	460b      	mov	r3, r1
 800904a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	78fb      	ldrb	r3, [r7, #3]
 800905a:	68f9      	ldr	r1, [r7, #12]
 800905c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009060:	4313      	orrs	r3, r2
 8009062:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr

08009072 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009072:	b480      	push	{r7}
 8009074:	b085      	sub	sp, #20
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800908c:	f023 0303 	bic.w	r3, r3, #3
 8009090:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090a0:	f043 0302 	orr.w	r3, r3, #2
 80090a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3714      	adds	r7, #20
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	695b      	ldr	r3, [r3, #20]
 80090c0:	f003 0301 	and.w	r3, r3, #1
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3301      	adds	r3, #1
 80090e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090e8:	d901      	bls.n	80090ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e01b      	b.n	8009126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	daf2      	bge.n	80090dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80090f6:	2300      	movs	r3, #0
 80090f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	f043 0201 	orr.w	r2, r3, #1
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	3301      	adds	r3, #1
 800910a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009112:	d901      	bls.n	8009118 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e006      	b.n	8009126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	f003 0301 	and.w	r3, r3, #1
 8009120:	2b01      	cmp	r3, #1
 8009122:	d0f0      	beq.n	8009106 <USB_CoreReset+0x36>

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <atof>:
 8009132:	2100      	movs	r1, #0
 8009134:	f000 be08 	b.w	8009d48 <strtod>

08009138 <atoi>:
 8009138:	220a      	movs	r2, #10
 800913a:	2100      	movs	r1, #0
 800913c:	f000 be8a 	b.w	8009e54 <strtol>

08009140 <sulp>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	4604      	mov	r4, r0
 8009144:	460d      	mov	r5, r1
 8009146:	ec45 4b10 	vmov	d0, r4, r5
 800914a:	4616      	mov	r6, r2
 800914c:	f003 fb14 	bl	800c778 <__ulp>
 8009150:	ec51 0b10 	vmov	r0, r1, d0
 8009154:	b17e      	cbz	r6, 8009176 <sulp+0x36>
 8009156:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800915a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800915e:	2b00      	cmp	r3, #0
 8009160:	dd09      	ble.n	8009176 <sulp+0x36>
 8009162:	051b      	lsls	r3, r3, #20
 8009164:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009168:	2400      	movs	r4, #0
 800916a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800916e:	4622      	mov	r2, r4
 8009170:	462b      	mov	r3, r5
 8009172:	f7f7 fa61 	bl	8000638 <__aeabi_dmul>
 8009176:	ec41 0b10 	vmov	d0, r0, r1
 800917a:	bd70      	pop	{r4, r5, r6, pc}
 800917c:	0000      	movs	r0, r0
	...

08009180 <_strtod_l>:
 8009180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009184:	b09f      	sub	sp, #124	@ 0x7c
 8009186:	460c      	mov	r4, r1
 8009188:	9217      	str	r2, [sp, #92]	@ 0x5c
 800918a:	2200      	movs	r2, #0
 800918c:	921a      	str	r2, [sp, #104]	@ 0x68
 800918e:	9005      	str	r0, [sp, #20]
 8009190:	f04f 0a00 	mov.w	sl, #0
 8009194:	f04f 0b00 	mov.w	fp, #0
 8009198:	460a      	mov	r2, r1
 800919a:	9219      	str	r2, [sp, #100]	@ 0x64
 800919c:	7811      	ldrb	r1, [r2, #0]
 800919e:	292b      	cmp	r1, #43	@ 0x2b
 80091a0:	d04a      	beq.n	8009238 <_strtod_l+0xb8>
 80091a2:	d838      	bhi.n	8009216 <_strtod_l+0x96>
 80091a4:	290d      	cmp	r1, #13
 80091a6:	d832      	bhi.n	800920e <_strtod_l+0x8e>
 80091a8:	2908      	cmp	r1, #8
 80091aa:	d832      	bhi.n	8009212 <_strtod_l+0x92>
 80091ac:	2900      	cmp	r1, #0
 80091ae:	d03b      	beq.n	8009228 <_strtod_l+0xa8>
 80091b0:	2200      	movs	r2, #0
 80091b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80091b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80091b6:	782a      	ldrb	r2, [r5, #0]
 80091b8:	2a30      	cmp	r2, #48	@ 0x30
 80091ba:	f040 80b3 	bne.w	8009324 <_strtod_l+0x1a4>
 80091be:	786a      	ldrb	r2, [r5, #1]
 80091c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80091c4:	2a58      	cmp	r2, #88	@ 0x58
 80091c6:	d16e      	bne.n	80092a6 <_strtod_l+0x126>
 80091c8:	9302      	str	r3, [sp, #8]
 80091ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091cc:	9301      	str	r3, [sp, #4]
 80091ce:	ab1a      	add	r3, sp, #104	@ 0x68
 80091d0:	9300      	str	r3, [sp, #0]
 80091d2:	4a8e      	ldr	r2, [pc, #568]	@ (800940c <_strtod_l+0x28c>)
 80091d4:	9805      	ldr	r0, [sp, #20]
 80091d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80091d8:	a919      	add	r1, sp, #100	@ 0x64
 80091da:	f002 fbbf 	bl	800b95c <__gethex>
 80091de:	f010 060f 	ands.w	r6, r0, #15
 80091e2:	4604      	mov	r4, r0
 80091e4:	d005      	beq.n	80091f2 <_strtod_l+0x72>
 80091e6:	2e06      	cmp	r6, #6
 80091e8:	d128      	bne.n	800923c <_strtod_l+0xbc>
 80091ea:	3501      	adds	r5, #1
 80091ec:	2300      	movs	r3, #0
 80091ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80091f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f040 858e 	bne.w	8009d16 <_strtod_l+0xb96>
 80091fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091fc:	b1cb      	cbz	r3, 8009232 <_strtod_l+0xb2>
 80091fe:	4652      	mov	r2, sl
 8009200:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009204:	ec43 2b10 	vmov	d0, r2, r3
 8009208:	b01f      	add	sp, #124	@ 0x7c
 800920a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920e:	2920      	cmp	r1, #32
 8009210:	d1ce      	bne.n	80091b0 <_strtod_l+0x30>
 8009212:	3201      	adds	r2, #1
 8009214:	e7c1      	b.n	800919a <_strtod_l+0x1a>
 8009216:	292d      	cmp	r1, #45	@ 0x2d
 8009218:	d1ca      	bne.n	80091b0 <_strtod_l+0x30>
 800921a:	2101      	movs	r1, #1
 800921c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800921e:	1c51      	adds	r1, r2, #1
 8009220:	9119      	str	r1, [sp, #100]	@ 0x64
 8009222:	7852      	ldrb	r2, [r2, #1]
 8009224:	2a00      	cmp	r2, #0
 8009226:	d1c5      	bne.n	80091b4 <_strtod_l+0x34>
 8009228:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800922a:	9419      	str	r4, [sp, #100]	@ 0x64
 800922c:	2b00      	cmp	r3, #0
 800922e:	f040 8570 	bne.w	8009d12 <_strtod_l+0xb92>
 8009232:	4652      	mov	r2, sl
 8009234:	465b      	mov	r3, fp
 8009236:	e7e5      	b.n	8009204 <_strtod_l+0x84>
 8009238:	2100      	movs	r1, #0
 800923a:	e7ef      	b.n	800921c <_strtod_l+0x9c>
 800923c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800923e:	b13a      	cbz	r2, 8009250 <_strtod_l+0xd0>
 8009240:	2135      	movs	r1, #53	@ 0x35
 8009242:	a81c      	add	r0, sp, #112	@ 0x70
 8009244:	f003 fb92 	bl	800c96c <__copybits>
 8009248:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800924a:	9805      	ldr	r0, [sp, #20]
 800924c:	f002 ff60 	bl	800c110 <_Bfree>
 8009250:	3e01      	subs	r6, #1
 8009252:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009254:	2e04      	cmp	r6, #4
 8009256:	d806      	bhi.n	8009266 <_strtod_l+0xe6>
 8009258:	e8df f006 	tbb	[pc, r6]
 800925c:	201d0314 	.word	0x201d0314
 8009260:	14          	.byte	0x14
 8009261:	00          	.byte	0x00
 8009262:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009266:	05e1      	lsls	r1, r4, #23
 8009268:	bf48      	it	mi
 800926a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800926e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009272:	0d1b      	lsrs	r3, r3, #20
 8009274:	051b      	lsls	r3, r3, #20
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1bb      	bne.n	80091f2 <_strtod_l+0x72>
 800927a:	f001 fc2b 	bl	800aad4 <__errno>
 800927e:	2322      	movs	r3, #34	@ 0x22
 8009280:	6003      	str	r3, [r0, #0]
 8009282:	e7b6      	b.n	80091f2 <_strtod_l+0x72>
 8009284:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009288:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800928c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009290:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009294:	e7e7      	b.n	8009266 <_strtod_l+0xe6>
 8009296:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009414 <_strtod_l+0x294>
 800929a:	e7e4      	b.n	8009266 <_strtod_l+0xe6>
 800929c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80092a0:	f04f 3aff 	mov.w	sl, #4294967295
 80092a4:	e7df      	b.n	8009266 <_strtod_l+0xe6>
 80092a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80092ac:	785b      	ldrb	r3, [r3, #1]
 80092ae:	2b30      	cmp	r3, #48	@ 0x30
 80092b0:	d0f9      	beq.n	80092a6 <_strtod_l+0x126>
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d09d      	beq.n	80091f2 <_strtod_l+0x72>
 80092b6:	2301      	movs	r3, #1
 80092b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80092be:	2300      	movs	r3, #0
 80092c0:	9308      	str	r3, [sp, #32]
 80092c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80092c4:	461f      	mov	r7, r3
 80092c6:	220a      	movs	r2, #10
 80092c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80092ca:	7805      	ldrb	r5, [r0, #0]
 80092cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80092d0:	b2d9      	uxtb	r1, r3
 80092d2:	2909      	cmp	r1, #9
 80092d4:	d928      	bls.n	8009328 <_strtod_l+0x1a8>
 80092d6:	494e      	ldr	r1, [pc, #312]	@ (8009410 <_strtod_l+0x290>)
 80092d8:	2201      	movs	r2, #1
 80092da:	f001 fb9f 	bl	800aa1c <strncmp>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d032      	beq.n	8009348 <_strtod_l+0x1c8>
 80092e2:	2000      	movs	r0, #0
 80092e4:	462a      	mov	r2, r5
 80092e6:	4681      	mov	r9, r0
 80092e8:	463d      	mov	r5, r7
 80092ea:	4603      	mov	r3, r0
 80092ec:	2a65      	cmp	r2, #101	@ 0x65
 80092ee:	d001      	beq.n	80092f4 <_strtod_l+0x174>
 80092f0:	2a45      	cmp	r2, #69	@ 0x45
 80092f2:	d114      	bne.n	800931e <_strtod_l+0x19e>
 80092f4:	b91d      	cbnz	r5, 80092fe <_strtod_l+0x17e>
 80092f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092f8:	4302      	orrs	r2, r0
 80092fa:	d095      	beq.n	8009228 <_strtod_l+0xa8>
 80092fc:	2500      	movs	r5, #0
 80092fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009300:	1c62      	adds	r2, r4, #1
 8009302:	9219      	str	r2, [sp, #100]	@ 0x64
 8009304:	7862      	ldrb	r2, [r4, #1]
 8009306:	2a2b      	cmp	r2, #43	@ 0x2b
 8009308:	d077      	beq.n	80093fa <_strtod_l+0x27a>
 800930a:	2a2d      	cmp	r2, #45	@ 0x2d
 800930c:	d07b      	beq.n	8009406 <_strtod_l+0x286>
 800930e:	f04f 0c00 	mov.w	ip, #0
 8009312:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009316:	2909      	cmp	r1, #9
 8009318:	f240 8082 	bls.w	8009420 <_strtod_l+0x2a0>
 800931c:	9419      	str	r4, [sp, #100]	@ 0x64
 800931e:	f04f 0800 	mov.w	r8, #0
 8009322:	e0a2      	b.n	800946a <_strtod_l+0x2ea>
 8009324:	2300      	movs	r3, #0
 8009326:	e7c7      	b.n	80092b8 <_strtod_l+0x138>
 8009328:	2f08      	cmp	r7, #8
 800932a:	bfd5      	itete	le
 800932c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800932e:	9908      	ldrgt	r1, [sp, #32]
 8009330:	fb02 3301 	mlale	r3, r2, r1, r3
 8009334:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009338:	f100 0001 	add.w	r0, r0, #1
 800933c:	bfd4      	ite	le
 800933e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009340:	9308      	strgt	r3, [sp, #32]
 8009342:	3701      	adds	r7, #1
 8009344:	9019      	str	r0, [sp, #100]	@ 0x64
 8009346:	e7bf      	b.n	80092c8 <_strtod_l+0x148>
 8009348:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800934a:	1c5a      	adds	r2, r3, #1
 800934c:	9219      	str	r2, [sp, #100]	@ 0x64
 800934e:	785a      	ldrb	r2, [r3, #1]
 8009350:	b37f      	cbz	r7, 80093b2 <_strtod_l+0x232>
 8009352:	4681      	mov	r9, r0
 8009354:	463d      	mov	r5, r7
 8009356:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800935a:	2b09      	cmp	r3, #9
 800935c:	d912      	bls.n	8009384 <_strtod_l+0x204>
 800935e:	2301      	movs	r3, #1
 8009360:	e7c4      	b.n	80092ec <_strtod_l+0x16c>
 8009362:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009364:	1c5a      	adds	r2, r3, #1
 8009366:	9219      	str	r2, [sp, #100]	@ 0x64
 8009368:	785a      	ldrb	r2, [r3, #1]
 800936a:	3001      	adds	r0, #1
 800936c:	2a30      	cmp	r2, #48	@ 0x30
 800936e:	d0f8      	beq.n	8009362 <_strtod_l+0x1e2>
 8009370:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009374:	2b08      	cmp	r3, #8
 8009376:	f200 84d3 	bhi.w	8009d20 <_strtod_l+0xba0>
 800937a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800937c:	930c      	str	r3, [sp, #48]	@ 0x30
 800937e:	4681      	mov	r9, r0
 8009380:	2000      	movs	r0, #0
 8009382:	4605      	mov	r5, r0
 8009384:	3a30      	subs	r2, #48	@ 0x30
 8009386:	f100 0301 	add.w	r3, r0, #1
 800938a:	d02a      	beq.n	80093e2 <_strtod_l+0x262>
 800938c:	4499      	add	r9, r3
 800938e:	eb00 0c05 	add.w	ip, r0, r5
 8009392:	462b      	mov	r3, r5
 8009394:	210a      	movs	r1, #10
 8009396:	4563      	cmp	r3, ip
 8009398:	d10d      	bne.n	80093b6 <_strtod_l+0x236>
 800939a:	1c69      	adds	r1, r5, #1
 800939c:	4401      	add	r1, r0
 800939e:	4428      	add	r0, r5
 80093a0:	2808      	cmp	r0, #8
 80093a2:	dc16      	bgt.n	80093d2 <_strtod_l+0x252>
 80093a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80093a6:	230a      	movs	r3, #10
 80093a8:	fb03 2300 	mla	r3, r3, r0, r2
 80093ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80093ae:	2300      	movs	r3, #0
 80093b0:	e018      	b.n	80093e4 <_strtod_l+0x264>
 80093b2:	4638      	mov	r0, r7
 80093b4:	e7da      	b.n	800936c <_strtod_l+0x1ec>
 80093b6:	2b08      	cmp	r3, #8
 80093b8:	f103 0301 	add.w	r3, r3, #1
 80093bc:	dc03      	bgt.n	80093c6 <_strtod_l+0x246>
 80093be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80093c0:	434e      	muls	r6, r1
 80093c2:	960a      	str	r6, [sp, #40]	@ 0x28
 80093c4:	e7e7      	b.n	8009396 <_strtod_l+0x216>
 80093c6:	2b10      	cmp	r3, #16
 80093c8:	bfde      	ittt	le
 80093ca:	9e08      	ldrle	r6, [sp, #32]
 80093cc:	434e      	mulle	r6, r1
 80093ce:	9608      	strle	r6, [sp, #32]
 80093d0:	e7e1      	b.n	8009396 <_strtod_l+0x216>
 80093d2:	280f      	cmp	r0, #15
 80093d4:	dceb      	bgt.n	80093ae <_strtod_l+0x22e>
 80093d6:	9808      	ldr	r0, [sp, #32]
 80093d8:	230a      	movs	r3, #10
 80093da:	fb03 2300 	mla	r3, r3, r0, r2
 80093de:	9308      	str	r3, [sp, #32]
 80093e0:	e7e5      	b.n	80093ae <_strtod_l+0x22e>
 80093e2:	4629      	mov	r1, r5
 80093e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093e6:	1c50      	adds	r0, r2, #1
 80093e8:	9019      	str	r0, [sp, #100]	@ 0x64
 80093ea:	7852      	ldrb	r2, [r2, #1]
 80093ec:	4618      	mov	r0, r3
 80093ee:	460d      	mov	r5, r1
 80093f0:	e7b1      	b.n	8009356 <_strtod_l+0x1d6>
 80093f2:	f04f 0900 	mov.w	r9, #0
 80093f6:	2301      	movs	r3, #1
 80093f8:	e77d      	b.n	80092f6 <_strtod_l+0x176>
 80093fa:	f04f 0c00 	mov.w	ip, #0
 80093fe:	1ca2      	adds	r2, r4, #2
 8009400:	9219      	str	r2, [sp, #100]	@ 0x64
 8009402:	78a2      	ldrb	r2, [r4, #2]
 8009404:	e785      	b.n	8009312 <_strtod_l+0x192>
 8009406:	f04f 0c01 	mov.w	ip, #1
 800940a:	e7f8      	b.n	80093fe <_strtod_l+0x27e>
 800940c:	0800d6d0 	.word	0x0800d6d0
 8009410:	0800d6b8 	.word	0x0800d6b8
 8009414:	7ff00000 	.word	0x7ff00000
 8009418:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800941a:	1c51      	adds	r1, r2, #1
 800941c:	9119      	str	r1, [sp, #100]	@ 0x64
 800941e:	7852      	ldrb	r2, [r2, #1]
 8009420:	2a30      	cmp	r2, #48	@ 0x30
 8009422:	d0f9      	beq.n	8009418 <_strtod_l+0x298>
 8009424:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009428:	2908      	cmp	r1, #8
 800942a:	f63f af78 	bhi.w	800931e <_strtod_l+0x19e>
 800942e:	3a30      	subs	r2, #48	@ 0x30
 8009430:	920e      	str	r2, [sp, #56]	@ 0x38
 8009432:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009434:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009436:	f04f 080a 	mov.w	r8, #10
 800943a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800943c:	1c56      	adds	r6, r2, #1
 800943e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009440:	7852      	ldrb	r2, [r2, #1]
 8009442:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009446:	f1be 0f09 	cmp.w	lr, #9
 800944a:	d939      	bls.n	80094c0 <_strtod_l+0x340>
 800944c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800944e:	1a76      	subs	r6, r6, r1
 8009450:	2e08      	cmp	r6, #8
 8009452:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009456:	dc03      	bgt.n	8009460 <_strtod_l+0x2e0>
 8009458:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800945a:	4588      	cmp	r8, r1
 800945c:	bfa8      	it	ge
 800945e:	4688      	movge	r8, r1
 8009460:	f1bc 0f00 	cmp.w	ip, #0
 8009464:	d001      	beq.n	800946a <_strtod_l+0x2ea>
 8009466:	f1c8 0800 	rsb	r8, r8, #0
 800946a:	2d00      	cmp	r5, #0
 800946c:	d14e      	bne.n	800950c <_strtod_l+0x38c>
 800946e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009470:	4308      	orrs	r0, r1
 8009472:	f47f aebe 	bne.w	80091f2 <_strtod_l+0x72>
 8009476:	2b00      	cmp	r3, #0
 8009478:	f47f aed6 	bne.w	8009228 <_strtod_l+0xa8>
 800947c:	2a69      	cmp	r2, #105	@ 0x69
 800947e:	d028      	beq.n	80094d2 <_strtod_l+0x352>
 8009480:	dc25      	bgt.n	80094ce <_strtod_l+0x34e>
 8009482:	2a49      	cmp	r2, #73	@ 0x49
 8009484:	d025      	beq.n	80094d2 <_strtod_l+0x352>
 8009486:	2a4e      	cmp	r2, #78	@ 0x4e
 8009488:	f47f aece 	bne.w	8009228 <_strtod_l+0xa8>
 800948c:	499b      	ldr	r1, [pc, #620]	@ (80096fc <_strtod_l+0x57c>)
 800948e:	a819      	add	r0, sp, #100	@ 0x64
 8009490:	f002 fc86 	bl	800bda0 <__match>
 8009494:	2800      	cmp	r0, #0
 8009496:	f43f aec7 	beq.w	8009228 <_strtod_l+0xa8>
 800949a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b28      	cmp	r3, #40	@ 0x28
 80094a0:	d12e      	bne.n	8009500 <_strtod_l+0x380>
 80094a2:	4997      	ldr	r1, [pc, #604]	@ (8009700 <_strtod_l+0x580>)
 80094a4:	aa1c      	add	r2, sp, #112	@ 0x70
 80094a6:	a819      	add	r0, sp, #100	@ 0x64
 80094a8:	f002 fc8e 	bl	800bdc8 <__hexnan>
 80094ac:	2805      	cmp	r0, #5
 80094ae:	d127      	bne.n	8009500 <_strtod_l+0x380>
 80094b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80094b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80094ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80094be:	e698      	b.n	80091f2 <_strtod_l+0x72>
 80094c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80094c2:	fb08 2101 	mla	r1, r8, r1, r2
 80094c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80094ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80094cc:	e7b5      	b.n	800943a <_strtod_l+0x2ba>
 80094ce:	2a6e      	cmp	r2, #110	@ 0x6e
 80094d0:	e7da      	b.n	8009488 <_strtod_l+0x308>
 80094d2:	498c      	ldr	r1, [pc, #560]	@ (8009704 <_strtod_l+0x584>)
 80094d4:	a819      	add	r0, sp, #100	@ 0x64
 80094d6:	f002 fc63 	bl	800bda0 <__match>
 80094da:	2800      	cmp	r0, #0
 80094dc:	f43f aea4 	beq.w	8009228 <_strtod_l+0xa8>
 80094e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094e2:	4989      	ldr	r1, [pc, #548]	@ (8009708 <_strtod_l+0x588>)
 80094e4:	3b01      	subs	r3, #1
 80094e6:	a819      	add	r0, sp, #100	@ 0x64
 80094e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80094ea:	f002 fc59 	bl	800bda0 <__match>
 80094ee:	b910      	cbnz	r0, 80094f6 <_strtod_l+0x376>
 80094f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094f2:	3301      	adds	r3, #1
 80094f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80094f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009718 <_strtod_l+0x598>
 80094fa:	f04f 0a00 	mov.w	sl, #0
 80094fe:	e678      	b.n	80091f2 <_strtod_l+0x72>
 8009500:	4882      	ldr	r0, [pc, #520]	@ (800970c <_strtod_l+0x58c>)
 8009502:	f001 fb25 	bl	800ab50 <nan>
 8009506:	ec5b ab10 	vmov	sl, fp, d0
 800950a:	e672      	b.n	80091f2 <_strtod_l+0x72>
 800950c:	eba8 0309 	sub.w	r3, r8, r9
 8009510:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009512:	9309      	str	r3, [sp, #36]	@ 0x24
 8009514:	2f00      	cmp	r7, #0
 8009516:	bf08      	it	eq
 8009518:	462f      	moveq	r7, r5
 800951a:	2d10      	cmp	r5, #16
 800951c:	462c      	mov	r4, r5
 800951e:	bfa8      	it	ge
 8009520:	2410      	movge	r4, #16
 8009522:	f7f7 f80f 	bl	8000544 <__aeabi_ui2d>
 8009526:	2d09      	cmp	r5, #9
 8009528:	4682      	mov	sl, r0
 800952a:	468b      	mov	fp, r1
 800952c:	dc13      	bgt.n	8009556 <_strtod_l+0x3d6>
 800952e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009530:	2b00      	cmp	r3, #0
 8009532:	f43f ae5e 	beq.w	80091f2 <_strtod_l+0x72>
 8009536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009538:	dd78      	ble.n	800962c <_strtod_l+0x4ac>
 800953a:	2b16      	cmp	r3, #22
 800953c:	dc5f      	bgt.n	80095fe <_strtod_l+0x47e>
 800953e:	4974      	ldr	r1, [pc, #464]	@ (8009710 <_strtod_l+0x590>)
 8009540:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009544:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009548:	4652      	mov	r2, sl
 800954a:	465b      	mov	r3, fp
 800954c:	f7f7 f874 	bl	8000638 <__aeabi_dmul>
 8009550:	4682      	mov	sl, r0
 8009552:	468b      	mov	fp, r1
 8009554:	e64d      	b.n	80091f2 <_strtod_l+0x72>
 8009556:	4b6e      	ldr	r3, [pc, #440]	@ (8009710 <_strtod_l+0x590>)
 8009558:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800955c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009560:	f7f7 f86a 	bl	8000638 <__aeabi_dmul>
 8009564:	4682      	mov	sl, r0
 8009566:	9808      	ldr	r0, [sp, #32]
 8009568:	468b      	mov	fp, r1
 800956a:	f7f6 ffeb 	bl	8000544 <__aeabi_ui2d>
 800956e:	4602      	mov	r2, r0
 8009570:	460b      	mov	r3, r1
 8009572:	4650      	mov	r0, sl
 8009574:	4659      	mov	r1, fp
 8009576:	f7f6 fea9 	bl	80002cc <__adddf3>
 800957a:	2d0f      	cmp	r5, #15
 800957c:	4682      	mov	sl, r0
 800957e:	468b      	mov	fp, r1
 8009580:	ddd5      	ble.n	800952e <_strtod_l+0x3ae>
 8009582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009584:	1b2c      	subs	r4, r5, r4
 8009586:	441c      	add	r4, r3
 8009588:	2c00      	cmp	r4, #0
 800958a:	f340 8096 	ble.w	80096ba <_strtod_l+0x53a>
 800958e:	f014 030f 	ands.w	r3, r4, #15
 8009592:	d00a      	beq.n	80095aa <_strtod_l+0x42a>
 8009594:	495e      	ldr	r1, [pc, #376]	@ (8009710 <_strtod_l+0x590>)
 8009596:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800959a:	4652      	mov	r2, sl
 800959c:	465b      	mov	r3, fp
 800959e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095a2:	f7f7 f849 	bl	8000638 <__aeabi_dmul>
 80095a6:	4682      	mov	sl, r0
 80095a8:	468b      	mov	fp, r1
 80095aa:	f034 040f 	bics.w	r4, r4, #15
 80095ae:	d073      	beq.n	8009698 <_strtod_l+0x518>
 80095b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80095b4:	dd48      	ble.n	8009648 <_strtod_l+0x4c8>
 80095b6:	2400      	movs	r4, #0
 80095b8:	46a0      	mov	r8, r4
 80095ba:	940a      	str	r4, [sp, #40]	@ 0x28
 80095bc:	46a1      	mov	r9, r4
 80095be:	9a05      	ldr	r2, [sp, #20]
 80095c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009718 <_strtod_l+0x598>
 80095c4:	2322      	movs	r3, #34	@ 0x22
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	f04f 0a00 	mov.w	sl, #0
 80095cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f43f ae0f 	beq.w	80091f2 <_strtod_l+0x72>
 80095d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095d6:	9805      	ldr	r0, [sp, #20]
 80095d8:	f002 fd9a 	bl	800c110 <_Bfree>
 80095dc:	9805      	ldr	r0, [sp, #20]
 80095de:	4649      	mov	r1, r9
 80095e0:	f002 fd96 	bl	800c110 <_Bfree>
 80095e4:	9805      	ldr	r0, [sp, #20]
 80095e6:	4641      	mov	r1, r8
 80095e8:	f002 fd92 	bl	800c110 <_Bfree>
 80095ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80095ee:	9805      	ldr	r0, [sp, #20]
 80095f0:	f002 fd8e 	bl	800c110 <_Bfree>
 80095f4:	9805      	ldr	r0, [sp, #20]
 80095f6:	4621      	mov	r1, r4
 80095f8:	f002 fd8a 	bl	800c110 <_Bfree>
 80095fc:	e5f9      	b.n	80091f2 <_strtod_l+0x72>
 80095fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009600:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009604:	4293      	cmp	r3, r2
 8009606:	dbbc      	blt.n	8009582 <_strtod_l+0x402>
 8009608:	4c41      	ldr	r4, [pc, #260]	@ (8009710 <_strtod_l+0x590>)
 800960a:	f1c5 050f 	rsb	r5, r5, #15
 800960e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009612:	4652      	mov	r2, sl
 8009614:	465b      	mov	r3, fp
 8009616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800961a:	f7f7 f80d 	bl	8000638 <__aeabi_dmul>
 800961e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009620:	1b5d      	subs	r5, r3, r5
 8009622:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009626:	e9d4 2300 	ldrd	r2, r3, [r4]
 800962a:	e78f      	b.n	800954c <_strtod_l+0x3cc>
 800962c:	3316      	adds	r3, #22
 800962e:	dba8      	blt.n	8009582 <_strtod_l+0x402>
 8009630:	4b37      	ldr	r3, [pc, #220]	@ (8009710 <_strtod_l+0x590>)
 8009632:	eba9 0808 	sub.w	r8, r9, r8
 8009636:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800963a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800963e:	4650      	mov	r0, sl
 8009640:	4659      	mov	r1, fp
 8009642:	f7f7 f923 	bl	800088c <__aeabi_ddiv>
 8009646:	e783      	b.n	8009550 <_strtod_l+0x3d0>
 8009648:	4b32      	ldr	r3, [pc, #200]	@ (8009714 <_strtod_l+0x594>)
 800964a:	9308      	str	r3, [sp, #32]
 800964c:	2300      	movs	r3, #0
 800964e:	1124      	asrs	r4, r4, #4
 8009650:	4650      	mov	r0, sl
 8009652:	4659      	mov	r1, fp
 8009654:	461e      	mov	r6, r3
 8009656:	2c01      	cmp	r4, #1
 8009658:	dc21      	bgt.n	800969e <_strtod_l+0x51e>
 800965a:	b10b      	cbz	r3, 8009660 <_strtod_l+0x4e0>
 800965c:	4682      	mov	sl, r0
 800965e:	468b      	mov	fp, r1
 8009660:	492c      	ldr	r1, [pc, #176]	@ (8009714 <_strtod_l+0x594>)
 8009662:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009666:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800966a:	4652      	mov	r2, sl
 800966c:	465b      	mov	r3, fp
 800966e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009672:	f7f6 ffe1 	bl	8000638 <__aeabi_dmul>
 8009676:	4b28      	ldr	r3, [pc, #160]	@ (8009718 <_strtod_l+0x598>)
 8009678:	460a      	mov	r2, r1
 800967a:	400b      	ands	r3, r1
 800967c:	4927      	ldr	r1, [pc, #156]	@ (800971c <_strtod_l+0x59c>)
 800967e:	428b      	cmp	r3, r1
 8009680:	4682      	mov	sl, r0
 8009682:	d898      	bhi.n	80095b6 <_strtod_l+0x436>
 8009684:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009688:	428b      	cmp	r3, r1
 800968a:	bf86      	itte	hi
 800968c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009720 <_strtod_l+0x5a0>
 8009690:	f04f 3aff 	movhi.w	sl, #4294967295
 8009694:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009698:	2300      	movs	r3, #0
 800969a:	9308      	str	r3, [sp, #32]
 800969c:	e07a      	b.n	8009794 <_strtod_l+0x614>
 800969e:	07e2      	lsls	r2, r4, #31
 80096a0:	d505      	bpl.n	80096ae <_strtod_l+0x52e>
 80096a2:	9b08      	ldr	r3, [sp, #32]
 80096a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a8:	f7f6 ffc6 	bl	8000638 <__aeabi_dmul>
 80096ac:	2301      	movs	r3, #1
 80096ae:	9a08      	ldr	r2, [sp, #32]
 80096b0:	3208      	adds	r2, #8
 80096b2:	3601      	adds	r6, #1
 80096b4:	1064      	asrs	r4, r4, #1
 80096b6:	9208      	str	r2, [sp, #32]
 80096b8:	e7cd      	b.n	8009656 <_strtod_l+0x4d6>
 80096ba:	d0ed      	beq.n	8009698 <_strtod_l+0x518>
 80096bc:	4264      	negs	r4, r4
 80096be:	f014 020f 	ands.w	r2, r4, #15
 80096c2:	d00a      	beq.n	80096da <_strtod_l+0x55a>
 80096c4:	4b12      	ldr	r3, [pc, #72]	@ (8009710 <_strtod_l+0x590>)
 80096c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096ca:	4650      	mov	r0, sl
 80096cc:	4659      	mov	r1, fp
 80096ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d2:	f7f7 f8db 	bl	800088c <__aeabi_ddiv>
 80096d6:	4682      	mov	sl, r0
 80096d8:	468b      	mov	fp, r1
 80096da:	1124      	asrs	r4, r4, #4
 80096dc:	d0dc      	beq.n	8009698 <_strtod_l+0x518>
 80096de:	2c1f      	cmp	r4, #31
 80096e0:	dd20      	ble.n	8009724 <_strtod_l+0x5a4>
 80096e2:	2400      	movs	r4, #0
 80096e4:	46a0      	mov	r8, r4
 80096e6:	940a      	str	r4, [sp, #40]	@ 0x28
 80096e8:	46a1      	mov	r9, r4
 80096ea:	9a05      	ldr	r2, [sp, #20]
 80096ec:	2322      	movs	r3, #34	@ 0x22
 80096ee:	f04f 0a00 	mov.w	sl, #0
 80096f2:	f04f 0b00 	mov.w	fp, #0
 80096f6:	6013      	str	r3, [r2, #0]
 80096f8:	e768      	b.n	80095cc <_strtod_l+0x44c>
 80096fa:	bf00      	nop
 80096fc:	0800d81e 	.word	0x0800d81e
 8009700:	0800d6bc 	.word	0x0800d6bc
 8009704:	0800d816 	.word	0x0800d816
 8009708:	0800d850 	.word	0x0800d850
 800970c:	0800dadc 	.word	0x0800dadc
 8009710:	0800d9c8 	.word	0x0800d9c8
 8009714:	0800d9a0 	.word	0x0800d9a0
 8009718:	7ff00000 	.word	0x7ff00000
 800971c:	7ca00000 	.word	0x7ca00000
 8009720:	7fefffff 	.word	0x7fefffff
 8009724:	f014 0310 	ands.w	r3, r4, #16
 8009728:	bf18      	it	ne
 800972a:	236a      	movne	r3, #106	@ 0x6a
 800972c:	4ea9      	ldr	r6, [pc, #676]	@ (80099d4 <_strtod_l+0x854>)
 800972e:	9308      	str	r3, [sp, #32]
 8009730:	4650      	mov	r0, sl
 8009732:	4659      	mov	r1, fp
 8009734:	2300      	movs	r3, #0
 8009736:	07e2      	lsls	r2, r4, #31
 8009738:	d504      	bpl.n	8009744 <_strtod_l+0x5c4>
 800973a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800973e:	f7f6 ff7b 	bl	8000638 <__aeabi_dmul>
 8009742:	2301      	movs	r3, #1
 8009744:	1064      	asrs	r4, r4, #1
 8009746:	f106 0608 	add.w	r6, r6, #8
 800974a:	d1f4      	bne.n	8009736 <_strtod_l+0x5b6>
 800974c:	b10b      	cbz	r3, 8009752 <_strtod_l+0x5d2>
 800974e:	4682      	mov	sl, r0
 8009750:	468b      	mov	fp, r1
 8009752:	9b08      	ldr	r3, [sp, #32]
 8009754:	b1b3      	cbz	r3, 8009784 <_strtod_l+0x604>
 8009756:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800975a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800975e:	2b00      	cmp	r3, #0
 8009760:	4659      	mov	r1, fp
 8009762:	dd0f      	ble.n	8009784 <_strtod_l+0x604>
 8009764:	2b1f      	cmp	r3, #31
 8009766:	dd55      	ble.n	8009814 <_strtod_l+0x694>
 8009768:	2b34      	cmp	r3, #52	@ 0x34
 800976a:	bfde      	ittt	le
 800976c:	f04f 33ff 	movle.w	r3, #4294967295
 8009770:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009774:	4093      	lslle	r3, r2
 8009776:	f04f 0a00 	mov.w	sl, #0
 800977a:	bfcc      	ite	gt
 800977c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009780:	ea03 0b01 	andle.w	fp, r3, r1
 8009784:	2200      	movs	r2, #0
 8009786:	2300      	movs	r3, #0
 8009788:	4650      	mov	r0, sl
 800978a:	4659      	mov	r1, fp
 800978c:	f7f7 f9bc 	bl	8000b08 <__aeabi_dcmpeq>
 8009790:	2800      	cmp	r0, #0
 8009792:	d1a6      	bne.n	80096e2 <_strtod_l+0x562>
 8009794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800979a:	9805      	ldr	r0, [sp, #20]
 800979c:	462b      	mov	r3, r5
 800979e:	463a      	mov	r2, r7
 80097a0:	f002 fd1e 	bl	800c1e0 <__s2b>
 80097a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f43f af05 	beq.w	80095b6 <_strtod_l+0x436>
 80097ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097ae:	2a00      	cmp	r2, #0
 80097b0:	eba9 0308 	sub.w	r3, r9, r8
 80097b4:	bfa8      	it	ge
 80097b6:	2300      	movge	r3, #0
 80097b8:	9312      	str	r3, [sp, #72]	@ 0x48
 80097ba:	2400      	movs	r4, #0
 80097bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80097c0:	9316      	str	r3, [sp, #88]	@ 0x58
 80097c2:	46a0      	mov	r8, r4
 80097c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097c6:	9805      	ldr	r0, [sp, #20]
 80097c8:	6859      	ldr	r1, [r3, #4]
 80097ca:	f002 fc61 	bl	800c090 <_Balloc>
 80097ce:	4681      	mov	r9, r0
 80097d0:	2800      	cmp	r0, #0
 80097d2:	f43f aef4 	beq.w	80095be <_strtod_l+0x43e>
 80097d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097d8:	691a      	ldr	r2, [r3, #16]
 80097da:	3202      	adds	r2, #2
 80097dc:	f103 010c 	add.w	r1, r3, #12
 80097e0:	0092      	lsls	r2, r2, #2
 80097e2:	300c      	adds	r0, #12
 80097e4:	f001 f9a3 	bl	800ab2e <memcpy>
 80097e8:	ec4b ab10 	vmov	d0, sl, fp
 80097ec:	9805      	ldr	r0, [sp, #20]
 80097ee:	aa1c      	add	r2, sp, #112	@ 0x70
 80097f0:	a91b      	add	r1, sp, #108	@ 0x6c
 80097f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80097f6:	f003 f82f 	bl	800c858 <__d2b>
 80097fa:	901a      	str	r0, [sp, #104]	@ 0x68
 80097fc:	2800      	cmp	r0, #0
 80097fe:	f43f aede 	beq.w	80095be <_strtod_l+0x43e>
 8009802:	9805      	ldr	r0, [sp, #20]
 8009804:	2101      	movs	r1, #1
 8009806:	f002 fd81 	bl	800c30c <__i2b>
 800980a:	4680      	mov	r8, r0
 800980c:	b948      	cbnz	r0, 8009822 <_strtod_l+0x6a2>
 800980e:	f04f 0800 	mov.w	r8, #0
 8009812:	e6d4      	b.n	80095be <_strtod_l+0x43e>
 8009814:	f04f 32ff 	mov.w	r2, #4294967295
 8009818:	fa02 f303 	lsl.w	r3, r2, r3
 800981c:	ea03 0a0a 	and.w	sl, r3, sl
 8009820:	e7b0      	b.n	8009784 <_strtod_l+0x604>
 8009822:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009824:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009826:	2d00      	cmp	r5, #0
 8009828:	bfab      	itete	ge
 800982a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800982c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800982e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009830:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009832:	bfac      	ite	ge
 8009834:	18ef      	addge	r7, r5, r3
 8009836:	1b5e      	sublt	r6, r3, r5
 8009838:	9b08      	ldr	r3, [sp, #32]
 800983a:	1aed      	subs	r5, r5, r3
 800983c:	4415      	add	r5, r2
 800983e:	4b66      	ldr	r3, [pc, #408]	@ (80099d8 <_strtod_l+0x858>)
 8009840:	3d01      	subs	r5, #1
 8009842:	429d      	cmp	r5, r3
 8009844:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009848:	da50      	bge.n	80098ec <_strtod_l+0x76c>
 800984a:	1b5b      	subs	r3, r3, r5
 800984c:	2b1f      	cmp	r3, #31
 800984e:	eba2 0203 	sub.w	r2, r2, r3
 8009852:	f04f 0101 	mov.w	r1, #1
 8009856:	dc3d      	bgt.n	80098d4 <_strtod_l+0x754>
 8009858:	fa01 f303 	lsl.w	r3, r1, r3
 800985c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800985e:	2300      	movs	r3, #0
 8009860:	9310      	str	r3, [sp, #64]	@ 0x40
 8009862:	18bd      	adds	r5, r7, r2
 8009864:	9b08      	ldr	r3, [sp, #32]
 8009866:	42af      	cmp	r7, r5
 8009868:	4416      	add	r6, r2
 800986a:	441e      	add	r6, r3
 800986c:	463b      	mov	r3, r7
 800986e:	bfa8      	it	ge
 8009870:	462b      	movge	r3, r5
 8009872:	42b3      	cmp	r3, r6
 8009874:	bfa8      	it	ge
 8009876:	4633      	movge	r3, r6
 8009878:	2b00      	cmp	r3, #0
 800987a:	bfc2      	ittt	gt
 800987c:	1aed      	subgt	r5, r5, r3
 800987e:	1af6      	subgt	r6, r6, r3
 8009880:	1aff      	subgt	r7, r7, r3
 8009882:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009884:	2b00      	cmp	r3, #0
 8009886:	dd16      	ble.n	80098b6 <_strtod_l+0x736>
 8009888:	4641      	mov	r1, r8
 800988a:	9805      	ldr	r0, [sp, #20]
 800988c:	461a      	mov	r2, r3
 800988e:	f002 fdfd 	bl	800c48c <__pow5mult>
 8009892:	4680      	mov	r8, r0
 8009894:	2800      	cmp	r0, #0
 8009896:	d0ba      	beq.n	800980e <_strtod_l+0x68e>
 8009898:	4601      	mov	r1, r0
 800989a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800989c:	9805      	ldr	r0, [sp, #20]
 800989e:	f002 fd4b 	bl	800c338 <__multiply>
 80098a2:	900e      	str	r0, [sp, #56]	@ 0x38
 80098a4:	2800      	cmp	r0, #0
 80098a6:	f43f ae8a 	beq.w	80095be <_strtod_l+0x43e>
 80098aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098ac:	9805      	ldr	r0, [sp, #20]
 80098ae:	f002 fc2f 	bl	800c110 <_Bfree>
 80098b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80098b6:	2d00      	cmp	r5, #0
 80098b8:	dc1d      	bgt.n	80098f6 <_strtod_l+0x776>
 80098ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098bc:	2b00      	cmp	r3, #0
 80098be:	dd23      	ble.n	8009908 <_strtod_l+0x788>
 80098c0:	4649      	mov	r1, r9
 80098c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80098c4:	9805      	ldr	r0, [sp, #20]
 80098c6:	f002 fde1 	bl	800c48c <__pow5mult>
 80098ca:	4681      	mov	r9, r0
 80098cc:	b9e0      	cbnz	r0, 8009908 <_strtod_l+0x788>
 80098ce:	f04f 0900 	mov.w	r9, #0
 80098d2:	e674      	b.n	80095be <_strtod_l+0x43e>
 80098d4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80098d8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80098dc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80098e0:	35e2      	adds	r5, #226	@ 0xe2
 80098e2:	fa01 f305 	lsl.w	r3, r1, r5
 80098e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80098e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80098ea:	e7ba      	b.n	8009862 <_strtod_l+0x6e2>
 80098ec:	2300      	movs	r3, #0
 80098ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80098f0:	2301      	movs	r3, #1
 80098f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098f4:	e7b5      	b.n	8009862 <_strtod_l+0x6e2>
 80098f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098f8:	9805      	ldr	r0, [sp, #20]
 80098fa:	462a      	mov	r2, r5
 80098fc:	f002 fe20 	bl	800c540 <__lshift>
 8009900:	901a      	str	r0, [sp, #104]	@ 0x68
 8009902:	2800      	cmp	r0, #0
 8009904:	d1d9      	bne.n	80098ba <_strtod_l+0x73a>
 8009906:	e65a      	b.n	80095be <_strtod_l+0x43e>
 8009908:	2e00      	cmp	r6, #0
 800990a:	dd07      	ble.n	800991c <_strtod_l+0x79c>
 800990c:	4649      	mov	r1, r9
 800990e:	9805      	ldr	r0, [sp, #20]
 8009910:	4632      	mov	r2, r6
 8009912:	f002 fe15 	bl	800c540 <__lshift>
 8009916:	4681      	mov	r9, r0
 8009918:	2800      	cmp	r0, #0
 800991a:	d0d8      	beq.n	80098ce <_strtod_l+0x74e>
 800991c:	2f00      	cmp	r7, #0
 800991e:	dd08      	ble.n	8009932 <_strtod_l+0x7b2>
 8009920:	4641      	mov	r1, r8
 8009922:	9805      	ldr	r0, [sp, #20]
 8009924:	463a      	mov	r2, r7
 8009926:	f002 fe0b 	bl	800c540 <__lshift>
 800992a:	4680      	mov	r8, r0
 800992c:	2800      	cmp	r0, #0
 800992e:	f43f ae46 	beq.w	80095be <_strtod_l+0x43e>
 8009932:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009934:	9805      	ldr	r0, [sp, #20]
 8009936:	464a      	mov	r2, r9
 8009938:	f002 fe8a 	bl	800c650 <__mdiff>
 800993c:	4604      	mov	r4, r0
 800993e:	2800      	cmp	r0, #0
 8009940:	f43f ae3d 	beq.w	80095be <_strtod_l+0x43e>
 8009944:	68c3      	ldr	r3, [r0, #12]
 8009946:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009948:	2300      	movs	r3, #0
 800994a:	60c3      	str	r3, [r0, #12]
 800994c:	4641      	mov	r1, r8
 800994e:	f002 fe63 	bl	800c618 <__mcmp>
 8009952:	2800      	cmp	r0, #0
 8009954:	da46      	bge.n	80099e4 <_strtod_l+0x864>
 8009956:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009958:	ea53 030a 	orrs.w	r3, r3, sl
 800995c:	d16c      	bne.n	8009a38 <_strtod_l+0x8b8>
 800995e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009962:	2b00      	cmp	r3, #0
 8009964:	d168      	bne.n	8009a38 <_strtod_l+0x8b8>
 8009966:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800996a:	0d1b      	lsrs	r3, r3, #20
 800996c:	051b      	lsls	r3, r3, #20
 800996e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009972:	d961      	bls.n	8009a38 <_strtod_l+0x8b8>
 8009974:	6963      	ldr	r3, [r4, #20]
 8009976:	b913      	cbnz	r3, 800997e <_strtod_l+0x7fe>
 8009978:	6923      	ldr	r3, [r4, #16]
 800997a:	2b01      	cmp	r3, #1
 800997c:	dd5c      	ble.n	8009a38 <_strtod_l+0x8b8>
 800997e:	4621      	mov	r1, r4
 8009980:	2201      	movs	r2, #1
 8009982:	9805      	ldr	r0, [sp, #20]
 8009984:	f002 fddc 	bl	800c540 <__lshift>
 8009988:	4641      	mov	r1, r8
 800998a:	4604      	mov	r4, r0
 800998c:	f002 fe44 	bl	800c618 <__mcmp>
 8009990:	2800      	cmp	r0, #0
 8009992:	dd51      	ble.n	8009a38 <_strtod_l+0x8b8>
 8009994:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009998:	9a08      	ldr	r2, [sp, #32]
 800999a:	0d1b      	lsrs	r3, r3, #20
 800999c:	051b      	lsls	r3, r3, #20
 800999e:	2a00      	cmp	r2, #0
 80099a0:	d06b      	beq.n	8009a7a <_strtod_l+0x8fa>
 80099a2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80099a6:	d868      	bhi.n	8009a7a <_strtod_l+0x8fa>
 80099a8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80099ac:	f67f ae9d 	bls.w	80096ea <_strtod_l+0x56a>
 80099b0:	4b0a      	ldr	r3, [pc, #40]	@ (80099dc <_strtod_l+0x85c>)
 80099b2:	4650      	mov	r0, sl
 80099b4:	4659      	mov	r1, fp
 80099b6:	2200      	movs	r2, #0
 80099b8:	f7f6 fe3e 	bl	8000638 <__aeabi_dmul>
 80099bc:	4b08      	ldr	r3, [pc, #32]	@ (80099e0 <_strtod_l+0x860>)
 80099be:	400b      	ands	r3, r1
 80099c0:	4682      	mov	sl, r0
 80099c2:	468b      	mov	fp, r1
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f47f ae05 	bne.w	80095d4 <_strtod_l+0x454>
 80099ca:	9a05      	ldr	r2, [sp, #20]
 80099cc:	2322      	movs	r3, #34	@ 0x22
 80099ce:	6013      	str	r3, [r2, #0]
 80099d0:	e600      	b.n	80095d4 <_strtod_l+0x454>
 80099d2:	bf00      	nop
 80099d4:	0800d6e8 	.word	0x0800d6e8
 80099d8:	fffffc02 	.word	0xfffffc02
 80099dc:	39500000 	.word	0x39500000
 80099e0:	7ff00000 	.word	0x7ff00000
 80099e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80099e8:	d165      	bne.n	8009ab6 <_strtod_l+0x936>
 80099ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80099ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099f0:	b35a      	cbz	r2, 8009a4a <_strtod_l+0x8ca>
 80099f2:	4a9f      	ldr	r2, [pc, #636]	@ (8009c70 <_strtod_l+0xaf0>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d12b      	bne.n	8009a50 <_strtod_l+0x8d0>
 80099f8:	9b08      	ldr	r3, [sp, #32]
 80099fa:	4651      	mov	r1, sl
 80099fc:	b303      	cbz	r3, 8009a40 <_strtod_l+0x8c0>
 80099fe:	4b9d      	ldr	r3, [pc, #628]	@ (8009c74 <_strtod_l+0xaf4>)
 8009a00:	465a      	mov	r2, fp
 8009a02:	4013      	ands	r3, r2
 8009a04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009a08:	f04f 32ff 	mov.w	r2, #4294967295
 8009a0c:	d81b      	bhi.n	8009a46 <_strtod_l+0x8c6>
 8009a0e:	0d1b      	lsrs	r3, r3, #20
 8009a10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a14:	fa02 f303 	lsl.w	r3, r2, r3
 8009a18:	4299      	cmp	r1, r3
 8009a1a:	d119      	bne.n	8009a50 <_strtod_l+0x8d0>
 8009a1c:	4b96      	ldr	r3, [pc, #600]	@ (8009c78 <_strtod_l+0xaf8>)
 8009a1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d102      	bne.n	8009a2a <_strtod_l+0x8aa>
 8009a24:	3101      	adds	r1, #1
 8009a26:	f43f adca 	beq.w	80095be <_strtod_l+0x43e>
 8009a2a:	4b92      	ldr	r3, [pc, #584]	@ (8009c74 <_strtod_l+0xaf4>)
 8009a2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a2e:	401a      	ands	r2, r3
 8009a30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009a34:	f04f 0a00 	mov.w	sl, #0
 8009a38:	9b08      	ldr	r3, [sp, #32]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1b8      	bne.n	80099b0 <_strtod_l+0x830>
 8009a3e:	e5c9      	b.n	80095d4 <_strtod_l+0x454>
 8009a40:	f04f 33ff 	mov.w	r3, #4294967295
 8009a44:	e7e8      	b.n	8009a18 <_strtod_l+0x898>
 8009a46:	4613      	mov	r3, r2
 8009a48:	e7e6      	b.n	8009a18 <_strtod_l+0x898>
 8009a4a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a4e:	d0a1      	beq.n	8009994 <_strtod_l+0x814>
 8009a50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a52:	b1db      	cbz	r3, 8009a8c <_strtod_l+0x90c>
 8009a54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a56:	4213      	tst	r3, r2
 8009a58:	d0ee      	beq.n	8009a38 <_strtod_l+0x8b8>
 8009a5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a5c:	9a08      	ldr	r2, [sp, #32]
 8009a5e:	4650      	mov	r0, sl
 8009a60:	4659      	mov	r1, fp
 8009a62:	b1bb      	cbz	r3, 8009a94 <_strtod_l+0x914>
 8009a64:	f7ff fb6c 	bl	8009140 <sulp>
 8009a68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a6c:	ec53 2b10 	vmov	r2, r3, d0
 8009a70:	f7f6 fc2c 	bl	80002cc <__adddf3>
 8009a74:	4682      	mov	sl, r0
 8009a76:	468b      	mov	fp, r1
 8009a78:	e7de      	b.n	8009a38 <_strtod_l+0x8b8>
 8009a7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009a7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a86:	f04f 3aff 	mov.w	sl, #4294967295
 8009a8a:	e7d5      	b.n	8009a38 <_strtod_l+0x8b8>
 8009a8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a8e:	ea13 0f0a 	tst.w	r3, sl
 8009a92:	e7e1      	b.n	8009a58 <_strtod_l+0x8d8>
 8009a94:	f7ff fb54 	bl	8009140 <sulp>
 8009a98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a9c:	ec53 2b10 	vmov	r2, r3, d0
 8009aa0:	f7f6 fc12 	bl	80002c8 <__aeabi_dsub>
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	4682      	mov	sl, r0
 8009aaa:	468b      	mov	fp, r1
 8009aac:	f7f7 f82c 	bl	8000b08 <__aeabi_dcmpeq>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d0c1      	beq.n	8009a38 <_strtod_l+0x8b8>
 8009ab4:	e619      	b.n	80096ea <_strtod_l+0x56a>
 8009ab6:	4641      	mov	r1, r8
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f002 ff25 	bl	800c908 <__ratio>
 8009abe:	ec57 6b10 	vmov	r6, r7, d0
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f7 f830 	bl	8000b30 <__aeabi_dcmple>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d06f      	beq.n	8009bb4 <_strtod_l+0xa34>
 8009ad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d17a      	bne.n	8009bd0 <_strtod_l+0xa50>
 8009ada:	f1ba 0f00 	cmp.w	sl, #0
 8009ade:	d158      	bne.n	8009b92 <_strtod_l+0xa12>
 8009ae0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ae2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d15a      	bne.n	8009ba0 <_strtod_l+0xa20>
 8009aea:	4b64      	ldr	r3, [pc, #400]	@ (8009c7c <_strtod_l+0xafc>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	4630      	mov	r0, r6
 8009af0:	4639      	mov	r1, r7
 8009af2:	f7f7 f813 	bl	8000b1c <__aeabi_dcmplt>
 8009af6:	2800      	cmp	r0, #0
 8009af8:	d159      	bne.n	8009bae <_strtod_l+0xa2e>
 8009afa:	4630      	mov	r0, r6
 8009afc:	4639      	mov	r1, r7
 8009afe:	4b60      	ldr	r3, [pc, #384]	@ (8009c80 <_strtod_l+0xb00>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	f7f6 fd99 	bl	8000638 <__aeabi_dmul>
 8009b06:	4606      	mov	r6, r0
 8009b08:	460f      	mov	r7, r1
 8009b0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009b0e:	9606      	str	r6, [sp, #24]
 8009b10:	9307      	str	r3, [sp, #28]
 8009b12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b16:	4d57      	ldr	r5, [pc, #348]	@ (8009c74 <_strtod_l+0xaf4>)
 8009b18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b1e:	401d      	ands	r5, r3
 8009b20:	4b58      	ldr	r3, [pc, #352]	@ (8009c84 <_strtod_l+0xb04>)
 8009b22:	429d      	cmp	r5, r3
 8009b24:	f040 80b2 	bne.w	8009c8c <_strtod_l+0xb0c>
 8009b28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009b2e:	ec4b ab10 	vmov	d0, sl, fp
 8009b32:	f002 fe21 	bl	800c778 <__ulp>
 8009b36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b3a:	ec51 0b10 	vmov	r0, r1, d0
 8009b3e:	f7f6 fd7b 	bl	8000638 <__aeabi_dmul>
 8009b42:	4652      	mov	r2, sl
 8009b44:	465b      	mov	r3, fp
 8009b46:	f7f6 fbc1 	bl	80002cc <__adddf3>
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4949      	ldr	r1, [pc, #292]	@ (8009c74 <_strtod_l+0xaf4>)
 8009b4e:	4a4e      	ldr	r2, [pc, #312]	@ (8009c88 <_strtod_l+0xb08>)
 8009b50:	4019      	ands	r1, r3
 8009b52:	4291      	cmp	r1, r2
 8009b54:	4682      	mov	sl, r0
 8009b56:	d942      	bls.n	8009bde <_strtod_l+0xa5e>
 8009b58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b5a:	4b47      	ldr	r3, [pc, #284]	@ (8009c78 <_strtod_l+0xaf8>)
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d103      	bne.n	8009b68 <_strtod_l+0x9e8>
 8009b60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b62:	3301      	adds	r3, #1
 8009b64:	f43f ad2b 	beq.w	80095be <_strtod_l+0x43e>
 8009b68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009c78 <_strtod_l+0xaf8>
 8009b6c:	f04f 3aff 	mov.w	sl, #4294967295
 8009b70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b72:	9805      	ldr	r0, [sp, #20]
 8009b74:	f002 facc 	bl	800c110 <_Bfree>
 8009b78:	9805      	ldr	r0, [sp, #20]
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	f002 fac8 	bl	800c110 <_Bfree>
 8009b80:	9805      	ldr	r0, [sp, #20]
 8009b82:	4641      	mov	r1, r8
 8009b84:	f002 fac4 	bl	800c110 <_Bfree>
 8009b88:	9805      	ldr	r0, [sp, #20]
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	f002 fac0 	bl	800c110 <_Bfree>
 8009b90:	e618      	b.n	80097c4 <_strtod_l+0x644>
 8009b92:	f1ba 0f01 	cmp.w	sl, #1
 8009b96:	d103      	bne.n	8009ba0 <_strtod_l+0xa20>
 8009b98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f43f ada5 	beq.w	80096ea <_strtod_l+0x56a>
 8009ba0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009c50 <_strtod_l+0xad0>
 8009ba4:	4f35      	ldr	r7, [pc, #212]	@ (8009c7c <_strtod_l+0xafc>)
 8009ba6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009baa:	2600      	movs	r6, #0
 8009bac:	e7b1      	b.n	8009b12 <_strtod_l+0x992>
 8009bae:	4f34      	ldr	r7, [pc, #208]	@ (8009c80 <_strtod_l+0xb00>)
 8009bb0:	2600      	movs	r6, #0
 8009bb2:	e7aa      	b.n	8009b0a <_strtod_l+0x98a>
 8009bb4:	4b32      	ldr	r3, [pc, #200]	@ (8009c80 <_strtod_l+0xb00>)
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	4639      	mov	r1, r7
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f7f6 fd3c 	bl	8000638 <__aeabi_dmul>
 8009bc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	460f      	mov	r7, r1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d09f      	beq.n	8009b0a <_strtod_l+0x98a>
 8009bca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009bce:	e7a0      	b.n	8009b12 <_strtod_l+0x992>
 8009bd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009c58 <_strtod_l+0xad8>
 8009bd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009bd8:	ec57 6b17 	vmov	r6, r7, d7
 8009bdc:	e799      	b.n	8009b12 <_strtod_l+0x992>
 8009bde:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009be2:	9b08      	ldr	r3, [sp, #32]
 8009be4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1c1      	bne.n	8009b70 <_strtod_l+0x9f0>
 8009bec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bf0:	0d1b      	lsrs	r3, r3, #20
 8009bf2:	051b      	lsls	r3, r3, #20
 8009bf4:	429d      	cmp	r5, r3
 8009bf6:	d1bb      	bne.n	8009b70 <_strtod_l+0x9f0>
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	f7f7 f82c 	bl	8000c58 <__aeabi_d2lz>
 8009c00:	f7f6 fcec 	bl	80005dc <__aeabi_l2d>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	4630      	mov	r0, r6
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	f7f6 fb5c 	bl	80002c8 <__aeabi_dsub>
 8009c10:	460b      	mov	r3, r1
 8009c12:	4602      	mov	r2, r0
 8009c14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009c18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009c1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c1e:	ea46 060a 	orr.w	r6, r6, sl
 8009c22:	431e      	orrs	r6, r3
 8009c24:	d06f      	beq.n	8009d06 <_strtod_l+0xb86>
 8009c26:	a30e      	add	r3, pc, #56	@ (adr r3, 8009c60 <_strtod_l+0xae0>)
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	f7f6 ff76 	bl	8000b1c <__aeabi_dcmplt>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	f47f accf 	bne.w	80095d4 <_strtod_l+0x454>
 8009c36:	a30c      	add	r3, pc, #48	@ (adr r3, 8009c68 <_strtod_l+0xae8>)
 8009c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c40:	f7f6 ff8a 	bl	8000b58 <__aeabi_dcmpgt>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	d093      	beq.n	8009b70 <_strtod_l+0x9f0>
 8009c48:	e4c4      	b.n	80095d4 <_strtod_l+0x454>
 8009c4a:	bf00      	nop
 8009c4c:	f3af 8000 	nop.w
 8009c50:	00000000 	.word	0x00000000
 8009c54:	bff00000 	.word	0xbff00000
 8009c58:	00000000 	.word	0x00000000
 8009c5c:	3ff00000 	.word	0x3ff00000
 8009c60:	94a03595 	.word	0x94a03595
 8009c64:	3fdfffff 	.word	0x3fdfffff
 8009c68:	35afe535 	.word	0x35afe535
 8009c6c:	3fe00000 	.word	0x3fe00000
 8009c70:	000fffff 	.word	0x000fffff
 8009c74:	7ff00000 	.word	0x7ff00000
 8009c78:	7fefffff 	.word	0x7fefffff
 8009c7c:	3ff00000 	.word	0x3ff00000
 8009c80:	3fe00000 	.word	0x3fe00000
 8009c84:	7fe00000 	.word	0x7fe00000
 8009c88:	7c9fffff 	.word	0x7c9fffff
 8009c8c:	9b08      	ldr	r3, [sp, #32]
 8009c8e:	b323      	cbz	r3, 8009cda <_strtod_l+0xb5a>
 8009c90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009c94:	d821      	bhi.n	8009cda <_strtod_l+0xb5a>
 8009c96:	a328      	add	r3, pc, #160	@ (adr r3, 8009d38 <_strtod_l+0xbb8>)
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	4639      	mov	r1, r7
 8009ca0:	f7f6 ff46 	bl	8000b30 <__aeabi_dcmple>
 8009ca4:	b1a0      	cbz	r0, 8009cd0 <_strtod_l+0xb50>
 8009ca6:	4639      	mov	r1, r7
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f7f6 ff9d 	bl	8000be8 <__aeabi_d2uiz>
 8009cae:	2801      	cmp	r0, #1
 8009cb0:	bf38      	it	cc
 8009cb2:	2001      	movcc	r0, #1
 8009cb4:	f7f6 fc46 	bl	8000544 <__aeabi_ui2d>
 8009cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cba:	4606      	mov	r6, r0
 8009cbc:	460f      	mov	r7, r1
 8009cbe:	b9fb      	cbnz	r3, 8009d00 <_strtod_l+0xb80>
 8009cc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cc4:	9014      	str	r0, [sp, #80]	@ 0x50
 8009cc6:	9315      	str	r3, [sp, #84]	@ 0x54
 8009cc8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009ccc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009cd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009cd2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009cd6:	1b5b      	subs	r3, r3, r5
 8009cd8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009cda:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009cde:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009ce2:	f002 fd49 	bl	800c778 <__ulp>
 8009ce6:	4650      	mov	r0, sl
 8009ce8:	ec53 2b10 	vmov	r2, r3, d0
 8009cec:	4659      	mov	r1, fp
 8009cee:	f7f6 fca3 	bl	8000638 <__aeabi_dmul>
 8009cf2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009cf6:	f7f6 fae9 	bl	80002cc <__adddf3>
 8009cfa:	4682      	mov	sl, r0
 8009cfc:	468b      	mov	fp, r1
 8009cfe:	e770      	b.n	8009be2 <_strtod_l+0xa62>
 8009d00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009d04:	e7e0      	b.n	8009cc8 <_strtod_l+0xb48>
 8009d06:	a30e      	add	r3, pc, #56	@ (adr r3, 8009d40 <_strtod_l+0xbc0>)
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f7f6 ff06 	bl	8000b1c <__aeabi_dcmplt>
 8009d10:	e798      	b.n	8009c44 <_strtod_l+0xac4>
 8009d12:	2300      	movs	r3, #0
 8009d14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009d18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d1a:	6013      	str	r3, [r2, #0]
 8009d1c:	f7ff ba6d 	b.w	80091fa <_strtod_l+0x7a>
 8009d20:	2a65      	cmp	r2, #101	@ 0x65
 8009d22:	f43f ab66 	beq.w	80093f2 <_strtod_l+0x272>
 8009d26:	2a45      	cmp	r2, #69	@ 0x45
 8009d28:	f43f ab63 	beq.w	80093f2 <_strtod_l+0x272>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f7ff bb9e 	b.w	800946e <_strtod_l+0x2ee>
 8009d32:	bf00      	nop
 8009d34:	f3af 8000 	nop.w
 8009d38:	ffc00000 	.word	0xffc00000
 8009d3c:	41dfffff 	.word	0x41dfffff
 8009d40:	94a03595 	.word	0x94a03595
 8009d44:	3fcfffff 	.word	0x3fcfffff

08009d48 <strtod>:
 8009d48:	460a      	mov	r2, r1
 8009d4a:	4601      	mov	r1, r0
 8009d4c:	4802      	ldr	r0, [pc, #8]	@ (8009d58 <strtod+0x10>)
 8009d4e:	4b03      	ldr	r3, [pc, #12]	@ (8009d5c <strtod+0x14>)
 8009d50:	6800      	ldr	r0, [r0, #0]
 8009d52:	f7ff ba15 	b.w	8009180 <_strtod_l>
 8009d56:	bf00      	nop
 8009d58:	200001a4 	.word	0x200001a4
 8009d5c:	20000038 	.word	0x20000038

08009d60 <_strtol_l.constprop.0>:
 8009d60:	2b24      	cmp	r3, #36	@ 0x24
 8009d62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d66:	4686      	mov	lr, r0
 8009d68:	4690      	mov	r8, r2
 8009d6a:	d801      	bhi.n	8009d70 <_strtol_l.constprop.0+0x10>
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d106      	bne.n	8009d7e <_strtol_l.constprop.0+0x1e>
 8009d70:	f000 feb0 	bl	800aad4 <__errno>
 8009d74:	2316      	movs	r3, #22
 8009d76:	6003      	str	r3, [r0, #0]
 8009d78:	2000      	movs	r0, #0
 8009d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7e:	4834      	ldr	r0, [pc, #208]	@ (8009e50 <_strtol_l.constprop.0+0xf0>)
 8009d80:	460d      	mov	r5, r1
 8009d82:	462a      	mov	r2, r5
 8009d84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d88:	5d06      	ldrb	r6, [r0, r4]
 8009d8a:	f016 0608 	ands.w	r6, r6, #8
 8009d8e:	d1f8      	bne.n	8009d82 <_strtol_l.constprop.0+0x22>
 8009d90:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d92:	d12d      	bne.n	8009df0 <_strtol_l.constprop.0+0x90>
 8009d94:	782c      	ldrb	r4, [r5, #0]
 8009d96:	2601      	movs	r6, #1
 8009d98:	1c95      	adds	r5, r2, #2
 8009d9a:	f033 0210 	bics.w	r2, r3, #16
 8009d9e:	d109      	bne.n	8009db4 <_strtol_l.constprop.0+0x54>
 8009da0:	2c30      	cmp	r4, #48	@ 0x30
 8009da2:	d12a      	bne.n	8009dfa <_strtol_l.constprop.0+0x9a>
 8009da4:	782a      	ldrb	r2, [r5, #0]
 8009da6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009daa:	2a58      	cmp	r2, #88	@ 0x58
 8009dac:	d125      	bne.n	8009dfa <_strtol_l.constprop.0+0x9a>
 8009dae:	786c      	ldrb	r4, [r5, #1]
 8009db0:	2310      	movs	r3, #16
 8009db2:	3502      	adds	r5, #2
 8009db4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009db8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	fbbc f9f3 	udiv	r9, ip, r3
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	fb03 ca19 	mls	sl, r3, r9, ip
 8009dc8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009dcc:	2f09      	cmp	r7, #9
 8009dce:	d81b      	bhi.n	8009e08 <_strtol_l.constprop.0+0xa8>
 8009dd0:	463c      	mov	r4, r7
 8009dd2:	42a3      	cmp	r3, r4
 8009dd4:	dd27      	ble.n	8009e26 <_strtol_l.constprop.0+0xc6>
 8009dd6:	1c57      	adds	r7, r2, #1
 8009dd8:	d007      	beq.n	8009dea <_strtol_l.constprop.0+0x8a>
 8009dda:	4581      	cmp	r9, r0
 8009ddc:	d320      	bcc.n	8009e20 <_strtol_l.constprop.0+0xc0>
 8009dde:	d101      	bne.n	8009de4 <_strtol_l.constprop.0+0x84>
 8009de0:	45a2      	cmp	sl, r4
 8009de2:	db1d      	blt.n	8009e20 <_strtol_l.constprop.0+0xc0>
 8009de4:	fb00 4003 	mla	r0, r0, r3, r4
 8009de8:	2201      	movs	r2, #1
 8009dea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dee:	e7eb      	b.n	8009dc8 <_strtol_l.constprop.0+0x68>
 8009df0:	2c2b      	cmp	r4, #43	@ 0x2b
 8009df2:	bf04      	itt	eq
 8009df4:	782c      	ldrbeq	r4, [r5, #0]
 8009df6:	1c95      	addeq	r5, r2, #2
 8009df8:	e7cf      	b.n	8009d9a <_strtol_l.constprop.0+0x3a>
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1da      	bne.n	8009db4 <_strtol_l.constprop.0+0x54>
 8009dfe:	2c30      	cmp	r4, #48	@ 0x30
 8009e00:	bf0c      	ite	eq
 8009e02:	2308      	moveq	r3, #8
 8009e04:	230a      	movne	r3, #10
 8009e06:	e7d5      	b.n	8009db4 <_strtol_l.constprop.0+0x54>
 8009e08:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009e0c:	2f19      	cmp	r7, #25
 8009e0e:	d801      	bhi.n	8009e14 <_strtol_l.constprop.0+0xb4>
 8009e10:	3c37      	subs	r4, #55	@ 0x37
 8009e12:	e7de      	b.n	8009dd2 <_strtol_l.constprop.0+0x72>
 8009e14:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009e18:	2f19      	cmp	r7, #25
 8009e1a:	d804      	bhi.n	8009e26 <_strtol_l.constprop.0+0xc6>
 8009e1c:	3c57      	subs	r4, #87	@ 0x57
 8009e1e:	e7d8      	b.n	8009dd2 <_strtol_l.constprop.0+0x72>
 8009e20:	f04f 32ff 	mov.w	r2, #4294967295
 8009e24:	e7e1      	b.n	8009dea <_strtol_l.constprop.0+0x8a>
 8009e26:	1c53      	adds	r3, r2, #1
 8009e28:	d108      	bne.n	8009e3c <_strtol_l.constprop.0+0xdc>
 8009e2a:	2322      	movs	r3, #34	@ 0x22
 8009e2c:	f8ce 3000 	str.w	r3, [lr]
 8009e30:	4660      	mov	r0, ip
 8009e32:	f1b8 0f00 	cmp.w	r8, #0
 8009e36:	d0a0      	beq.n	8009d7a <_strtol_l.constprop.0+0x1a>
 8009e38:	1e69      	subs	r1, r5, #1
 8009e3a:	e006      	b.n	8009e4a <_strtol_l.constprop.0+0xea>
 8009e3c:	b106      	cbz	r6, 8009e40 <_strtol_l.constprop.0+0xe0>
 8009e3e:	4240      	negs	r0, r0
 8009e40:	f1b8 0f00 	cmp.w	r8, #0
 8009e44:	d099      	beq.n	8009d7a <_strtol_l.constprop.0+0x1a>
 8009e46:	2a00      	cmp	r2, #0
 8009e48:	d1f6      	bne.n	8009e38 <_strtol_l.constprop.0+0xd8>
 8009e4a:	f8c8 1000 	str.w	r1, [r8]
 8009e4e:	e794      	b.n	8009d7a <_strtol_l.constprop.0+0x1a>
 8009e50:	0800d711 	.word	0x0800d711

08009e54 <strtol>:
 8009e54:	4613      	mov	r3, r2
 8009e56:	460a      	mov	r2, r1
 8009e58:	4601      	mov	r1, r0
 8009e5a:	4802      	ldr	r0, [pc, #8]	@ (8009e64 <strtol+0x10>)
 8009e5c:	6800      	ldr	r0, [r0, #0]
 8009e5e:	f7ff bf7f 	b.w	8009d60 <_strtol_l.constprop.0>
 8009e62:	bf00      	nop
 8009e64:	200001a4 	.word	0x200001a4

08009e68 <__cvt>:
 8009e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e6c:	ec57 6b10 	vmov	r6, r7, d0
 8009e70:	2f00      	cmp	r7, #0
 8009e72:	460c      	mov	r4, r1
 8009e74:	4619      	mov	r1, r3
 8009e76:	463b      	mov	r3, r7
 8009e78:	bfbb      	ittet	lt
 8009e7a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009e7e:	461f      	movlt	r7, r3
 8009e80:	2300      	movge	r3, #0
 8009e82:	232d      	movlt	r3, #45	@ 0x2d
 8009e84:	700b      	strb	r3, [r1, #0]
 8009e86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e88:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009e8c:	4691      	mov	r9, r2
 8009e8e:	f023 0820 	bic.w	r8, r3, #32
 8009e92:	bfbc      	itt	lt
 8009e94:	4632      	movlt	r2, r6
 8009e96:	4616      	movlt	r6, r2
 8009e98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e9c:	d005      	beq.n	8009eaa <__cvt+0x42>
 8009e9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009ea2:	d100      	bne.n	8009ea6 <__cvt+0x3e>
 8009ea4:	3401      	adds	r4, #1
 8009ea6:	2102      	movs	r1, #2
 8009ea8:	e000      	b.n	8009eac <__cvt+0x44>
 8009eaa:	2103      	movs	r1, #3
 8009eac:	ab03      	add	r3, sp, #12
 8009eae:	9301      	str	r3, [sp, #4]
 8009eb0:	ab02      	add	r3, sp, #8
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	ec47 6b10 	vmov	d0, r6, r7
 8009eb8:	4653      	mov	r3, sl
 8009eba:	4622      	mov	r2, r4
 8009ebc:	f000 fed8 	bl	800ac70 <_dtoa_r>
 8009ec0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009ec4:	4605      	mov	r5, r0
 8009ec6:	d119      	bne.n	8009efc <__cvt+0x94>
 8009ec8:	f019 0f01 	tst.w	r9, #1
 8009ecc:	d00e      	beq.n	8009eec <__cvt+0x84>
 8009ece:	eb00 0904 	add.w	r9, r0, r4
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	4639      	mov	r1, r7
 8009eda:	f7f6 fe15 	bl	8000b08 <__aeabi_dcmpeq>
 8009ede:	b108      	cbz	r0, 8009ee4 <__cvt+0x7c>
 8009ee0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ee4:	2230      	movs	r2, #48	@ 0x30
 8009ee6:	9b03      	ldr	r3, [sp, #12]
 8009ee8:	454b      	cmp	r3, r9
 8009eea:	d31e      	bcc.n	8009f2a <__cvt+0xc2>
 8009eec:	9b03      	ldr	r3, [sp, #12]
 8009eee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ef0:	1b5b      	subs	r3, r3, r5
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	6013      	str	r3, [r2, #0]
 8009ef6:	b004      	add	sp, #16
 8009ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009efc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f00:	eb00 0904 	add.w	r9, r0, r4
 8009f04:	d1e5      	bne.n	8009ed2 <__cvt+0x6a>
 8009f06:	7803      	ldrb	r3, [r0, #0]
 8009f08:	2b30      	cmp	r3, #48	@ 0x30
 8009f0a:	d10a      	bne.n	8009f22 <__cvt+0xba>
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	2300      	movs	r3, #0
 8009f10:	4630      	mov	r0, r6
 8009f12:	4639      	mov	r1, r7
 8009f14:	f7f6 fdf8 	bl	8000b08 <__aeabi_dcmpeq>
 8009f18:	b918      	cbnz	r0, 8009f22 <__cvt+0xba>
 8009f1a:	f1c4 0401 	rsb	r4, r4, #1
 8009f1e:	f8ca 4000 	str.w	r4, [sl]
 8009f22:	f8da 3000 	ldr.w	r3, [sl]
 8009f26:	4499      	add	r9, r3
 8009f28:	e7d3      	b.n	8009ed2 <__cvt+0x6a>
 8009f2a:	1c59      	adds	r1, r3, #1
 8009f2c:	9103      	str	r1, [sp, #12]
 8009f2e:	701a      	strb	r2, [r3, #0]
 8009f30:	e7d9      	b.n	8009ee6 <__cvt+0x7e>

08009f32 <__exponent>:
 8009f32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f34:	2900      	cmp	r1, #0
 8009f36:	bfba      	itte	lt
 8009f38:	4249      	neglt	r1, r1
 8009f3a:	232d      	movlt	r3, #45	@ 0x2d
 8009f3c:	232b      	movge	r3, #43	@ 0x2b
 8009f3e:	2909      	cmp	r1, #9
 8009f40:	7002      	strb	r2, [r0, #0]
 8009f42:	7043      	strb	r3, [r0, #1]
 8009f44:	dd29      	ble.n	8009f9a <__exponent+0x68>
 8009f46:	f10d 0307 	add.w	r3, sp, #7
 8009f4a:	461d      	mov	r5, r3
 8009f4c:	270a      	movs	r7, #10
 8009f4e:	461a      	mov	r2, r3
 8009f50:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f54:	fb07 1416 	mls	r4, r7, r6, r1
 8009f58:	3430      	adds	r4, #48	@ 0x30
 8009f5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f5e:	460c      	mov	r4, r1
 8009f60:	2c63      	cmp	r4, #99	@ 0x63
 8009f62:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f66:	4631      	mov	r1, r6
 8009f68:	dcf1      	bgt.n	8009f4e <__exponent+0x1c>
 8009f6a:	3130      	adds	r1, #48	@ 0x30
 8009f6c:	1e94      	subs	r4, r2, #2
 8009f6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f72:	1c41      	adds	r1, r0, #1
 8009f74:	4623      	mov	r3, r4
 8009f76:	42ab      	cmp	r3, r5
 8009f78:	d30a      	bcc.n	8009f90 <__exponent+0x5e>
 8009f7a:	f10d 0309 	add.w	r3, sp, #9
 8009f7e:	1a9b      	subs	r3, r3, r2
 8009f80:	42ac      	cmp	r4, r5
 8009f82:	bf88      	it	hi
 8009f84:	2300      	movhi	r3, #0
 8009f86:	3302      	adds	r3, #2
 8009f88:	4403      	add	r3, r0
 8009f8a:	1a18      	subs	r0, r3, r0
 8009f8c:	b003      	add	sp, #12
 8009f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009f94:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009f98:	e7ed      	b.n	8009f76 <__exponent+0x44>
 8009f9a:	2330      	movs	r3, #48	@ 0x30
 8009f9c:	3130      	adds	r1, #48	@ 0x30
 8009f9e:	7083      	strb	r3, [r0, #2]
 8009fa0:	70c1      	strb	r1, [r0, #3]
 8009fa2:	1d03      	adds	r3, r0, #4
 8009fa4:	e7f1      	b.n	8009f8a <__exponent+0x58>
	...

08009fa8 <_printf_float>:
 8009fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fac:	b08d      	sub	sp, #52	@ 0x34
 8009fae:	460c      	mov	r4, r1
 8009fb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009fb4:	4616      	mov	r6, r2
 8009fb6:	461f      	mov	r7, r3
 8009fb8:	4605      	mov	r5, r0
 8009fba:	f000 fd41 	bl	800aa40 <_localeconv_r>
 8009fbe:	6803      	ldr	r3, [r0, #0]
 8009fc0:	9304      	str	r3, [sp, #16]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7f6 f974 	bl	80002b0 <strlen>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8009fd0:	9005      	str	r0, [sp, #20]
 8009fd2:	3307      	adds	r3, #7
 8009fd4:	f023 0307 	bic.w	r3, r3, #7
 8009fd8:	f103 0208 	add.w	r2, r3, #8
 8009fdc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009fe0:	f8d4 b000 	ldr.w	fp, [r4]
 8009fe4:	f8c8 2000 	str.w	r2, [r8]
 8009fe8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009ff0:	9307      	str	r3, [sp, #28]
 8009ff2:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ff6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009ffa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ffe:	4b9c      	ldr	r3, [pc, #624]	@ (800a270 <_printf_float+0x2c8>)
 800a000:	f04f 32ff 	mov.w	r2, #4294967295
 800a004:	f7f6 fdb2 	bl	8000b6c <__aeabi_dcmpun>
 800a008:	bb70      	cbnz	r0, 800a068 <_printf_float+0xc0>
 800a00a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a00e:	4b98      	ldr	r3, [pc, #608]	@ (800a270 <_printf_float+0x2c8>)
 800a010:	f04f 32ff 	mov.w	r2, #4294967295
 800a014:	f7f6 fd8c 	bl	8000b30 <__aeabi_dcmple>
 800a018:	bb30      	cbnz	r0, 800a068 <_printf_float+0xc0>
 800a01a:	2200      	movs	r2, #0
 800a01c:	2300      	movs	r3, #0
 800a01e:	4640      	mov	r0, r8
 800a020:	4649      	mov	r1, r9
 800a022:	f7f6 fd7b 	bl	8000b1c <__aeabi_dcmplt>
 800a026:	b110      	cbz	r0, 800a02e <_printf_float+0x86>
 800a028:	232d      	movs	r3, #45	@ 0x2d
 800a02a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a02e:	4a91      	ldr	r2, [pc, #580]	@ (800a274 <_printf_float+0x2cc>)
 800a030:	4b91      	ldr	r3, [pc, #580]	@ (800a278 <_printf_float+0x2d0>)
 800a032:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a036:	bf94      	ite	ls
 800a038:	4690      	movls	r8, r2
 800a03a:	4698      	movhi	r8, r3
 800a03c:	2303      	movs	r3, #3
 800a03e:	6123      	str	r3, [r4, #16]
 800a040:	f02b 0304 	bic.w	r3, fp, #4
 800a044:	6023      	str	r3, [r4, #0]
 800a046:	f04f 0900 	mov.w	r9, #0
 800a04a:	9700      	str	r7, [sp, #0]
 800a04c:	4633      	mov	r3, r6
 800a04e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a050:	4621      	mov	r1, r4
 800a052:	4628      	mov	r0, r5
 800a054:	f000 f9d2 	bl	800a3fc <_printf_common>
 800a058:	3001      	adds	r0, #1
 800a05a:	f040 808d 	bne.w	800a178 <_printf_float+0x1d0>
 800a05e:	f04f 30ff 	mov.w	r0, #4294967295
 800a062:	b00d      	add	sp, #52	@ 0x34
 800a064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a068:	4642      	mov	r2, r8
 800a06a:	464b      	mov	r3, r9
 800a06c:	4640      	mov	r0, r8
 800a06e:	4649      	mov	r1, r9
 800a070:	f7f6 fd7c 	bl	8000b6c <__aeabi_dcmpun>
 800a074:	b140      	cbz	r0, 800a088 <_printf_float+0xe0>
 800a076:	464b      	mov	r3, r9
 800a078:	2b00      	cmp	r3, #0
 800a07a:	bfbc      	itt	lt
 800a07c:	232d      	movlt	r3, #45	@ 0x2d
 800a07e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a082:	4a7e      	ldr	r2, [pc, #504]	@ (800a27c <_printf_float+0x2d4>)
 800a084:	4b7e      	ldr	r3, [pc, #504]	@ (800a280 <_printf_float+0x2d8>)
 800a086:	e7d4      	b.n	800a032 <_printf_float+0x8a>
 800a088:	6863      	ldr	r3, [r4, #4]
 800a08a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a08e:	9206      	str	r2, [sp, #24]
 800a090:	1c5a      	adds	r2, r3, #1
 800a092:	d13b      	bne.n	800a10c <_printf_float+0x164>
 800a094:	2306      	movs	r3, #6
 800a096:	6063      	str	r3, [r4, #4]
 800a098:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a09c:	2300      	movs	r3, #0
 800a09e:	6022      	str	r2, [r4, #0]
 800a0a0:	9303      	str	r3, [sp, #12]
 800a0a2:	ab0a      	add	r3, sp, #40	@ 0x28
 800a0a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a0a8:	ab09      	add	r3, sp, #36	@ 0x24
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	6861      	ldr	r1, [r4, #4]
 800a0ae:	ec49 8b10 	vmov	d0, r8, r9
 800a0b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	f7ff fed6 	bl	8009e68 <__cvt>
 800a0bc:	9b06      	ldr	r3, [sp, #24]
 800a0be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0c0:	2b47      	cmp	r3, #71	@ 0x47
 800a0c2:	4680      	mov	r8, r0
 800a0c4:	d129      	bne.n	800a11a <_printf_float+0x172>
 800a0c6:	1cc8      	adds	r0, r1, #3
 800a0c8:	db02      	blt.n	800a0d0 <_printf_float+0x128>
 800a0ca:	6863      	ldr	r3, [r4, #4]
 800a0cc:	4299      	cmp	r1, r3
 800a0ce:	dd41      	ble.n	800a154 <_printf_float+0x1ac>
 800a0d0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a0d4:	fa5f fa8a 	uxtb.w	sl, sl
 800a0d8:	3901      	subs	r1, #1
 800a0da:	4652      	mov	r2, sl
 800a0dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a0e0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0e2:	f7ff ff26 	bl	8009f32 <__exponent>
 800a0e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0e8:	1813      	adds	r3, r2, r0
 800a0ea:	2a01      	cmp	r2, #1
 800a0ec:	4681      	mov	r9, r0
 800a0ee:	6123      	str	r3, [r4, #16]
 800a0f0:	dc02      	bgt.n	800a0f8 <_printf_float+0x150>
 800a0f2:	6822      	ldr	r2, [r4, #0]
 800a0f4:	07d2      	lsls	r2, r2, #31
 800a0f6:	d501      	bpl.n	800a0fc <_printf_float+0x154>
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	6123      	str	r3, [r4, #16]
 800a0fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a100:	2b00      	cmp	r3, #0
 800a102:	d0a2      	beq.n	800a04a <_printf_float+0xa2>
 800a104:	232d      	movs	r3, #45	@ 0x2d
 800a106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a10a:	e79e      	b.n	800a04a <_printf_float+0xa2>
 800a10c:	9a06      	ldr	r2, [sp, #24]
 800a10e:	2a47      	cmp	r2, #71	@ 0x47
 800a110:	d1c2      	bne.n	800a098 <_printf_float+0xf0>
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1c0      	bne.n	800a098 <_printf_float+0xf0>
 800a116:	2301      	movs	r3, #1
 800a118:	e7bd      	b.n	800a096 <_printf_float+0xee>
 800a11a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a11e:	d9db      	bls.n	800a0d8 <_printf_float+0x130>
 800a120:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a124:	d118      	bne.n	800a158 <_printf_float+0x1b0>
 800a126:	2900      	cmp	r1, #0
 800a128:	6863      	ldr	r3, [r4, #4]
 800a12a:	dd0b      	ble.n	800a144 <_printf_float+0x19c>
 800a12c:	6121      	str	r1, [r4, #16]
 800a12e:	b913      	cbnz	r3, 800a136 <_printf_float+0x18e>
 800a130:	6822      	ldr	r2, [r4, #0]
 800a132:	07d0      	lsls	r0, r2, #31
 800a134:	d502      	bpl.n	800a13c <_printf_float+0x194>
 800a136:	3301      	adds	r3, #1
 800a138:	440b      	add	r3, r1
 800a13a:	6123      	str	r3, [r4, #16]
 800a13c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a13e:	f04f 0900 	mov.w	r9, #0
 800a142:	e7db      	b.n	800a0fc <_printf_float+0x154>
 800a144:	b913      	cbnz	r3, 800a14c <_printf_float+0x1a4>
 800a146:	6822      	ldr	r2, [r4, #0]
 800a148:	07d2      	lsls	r2, r2, #31
 800a14a:	d501      	bpl.n	800a150 <_printf_float+0x1a8>
 800a14c:	3302      	adds	r3, #2
 800a14e:	e7f4      	b.n	800a13a <_printf_float+0x192>
 800a150:	2301      	movs	r3, #1
 800a152:	e7f2      	b.n	800a13a <_printf_float+0x192>
 800a154:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a158:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a15a:	4299      	cmp	r1, r3
 800a15c:	db05      	blt.n	800a16a <_printf_float+0x1c2>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	6121      	str	r1, [r4, #16]
 800a162:	07d8      	lsls	r0, r3, #31
 800a164:	d5ea      	bpl.n	800a13c <_printf_float+0x194>
 800a166:	1c4b      	adds	r3, r1, #1
 800a168:	e7e7      	b.n	800a13a <_printf_float+0x192>
 800a16a:	2900      	cmp	r1, #0
 800a16c:	bfd4      	ite	le
 800a16e:	f1c1 0202 	rsble	r2, r1, #2
 800a172:	2201      	movgt	r2, #1
 800a174:	4413      	add	r3, r2
 800a176:	e7e0      	b.n	800a13a <_printf_float+0x192>
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	055a      	lsls	r2, r3, #21
 800a17c:	d407      	bmi.n	800a18e <_printf_float+0x1e6>
 800a17e:	6923      	ldr	r3, [r4, #16]
 800a180:	4642      	mov	r2, r8
 800a182:	4631      	mov	r1, r6
 800a184:	4628      	mov	r0, r5
 800a186:	47b8      	blx	r7
 800a188:	3001      	adds	r0, #1
 800a18a:	d12b      	bne.n	800a1e4 <_printf_float+0x23c>
 800a18c:	e767      	b.n	800a05e <_printf_float+0xb6>
 800a18e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a192:	f240 80dd 	bls.w	800a350 <_printf_float+0x3a8>
 800a196:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a19a:	2200      	movs	r2, #0
 800a19c:	2300      	movs	r3, #0
 800a19e:	f7f6 fcb3 	bl	8000b08 <__aeabi_dcmpeq>
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	d033      	beq.n	800a20e <_printf_float+0x266>
 800a1a6:	4a37      	ldr	r2, [pc, #220]	@ (800a284 <_printf_float+0x2dc>)
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	47b8      	blx	r7
 800a1b0:	3001      	adds	r0, #1
 800a1b2:	f43f af54 	beq.w	800a05e <_printf_float+0xb6>
 800a1b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a1ba:	4543      	cmp	r3, r8
 800a1bc:	db02      	blt.n	800a1c4 <_printf_float+0x21c>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	07d8      	lsls	r0, r3, #31
 800a1c2:	d50f      	bpl.n	800a1e4 <_printf_float+0x23c>
 800a1c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b8      	blx	r7
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	f43f af45 	beq.w	800a05e <_printf_float+0xb6>
 800a1d4:	f04f 0900 	mov.w	r9, #0
 800a1d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1dc:	f104 0a1a 	add.w	sl, r4, #26
 800a1e0:	45c8      	cmp	r8, r9
 800a1e2:	dc09      	bgt.n	800a1f8 <_printf_float+0x250>
 800a1e4:	6823      	ldr	r3, [r4, #0]
 800a1e6:	079b      	lsls	r3, r3, #30
 800a1e8:	f100 8103 	bmi.w	800a3f2 <_printf_float+0x44a>
 800a1ec:	68e0      	ldr	r0, [r4, #12]
 800a1ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1f0:	4298      	cmp	r0, r3
 800a1f2:	bfb8      	it	lt
 800a1f4:	4618      	movlt	r0, r3
 800a1f6:	e734      	b.n	800a062 <_printf_float+0xba>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	4652      	mov	r2, sl
 800a1fc:	4631      	mov	r1, r6
 800a1fe:	4628      	mov	r0, r5
 800a200:	47b8      	blx	r7
 800a202:	3001      	adds	r0, #1
 800a204:	f43f af2b 	beq.w	800a05e <_printf_float+0xb6>
 800a208:	f109 0901 	add.w	r9, r9, #1
 800a20c:	e7e8      	b.n	800a1e0 <_printf_float+0x238>
 800a20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a210:	2b00      	cmp	r3, #0
 800a212:	dc39      	bgt.n	800a288 <_printf_float+0x2e0>
 800a214:	4a1b      	ldr	r2, [pc, #108]	@ (800a284 <_printf_float+0x2dc>)
 800a216:	2301      	movs	r3, #1
 800a218:	4631      	mov	r1, r6
 800a21a:	4628      	mov	r0, r5
 800a21c:	47b8      	blx	r7
 800a21e:	3001      	adds	r0, #1
 800a220:	f43f af1d 	beq.w	800a05e <_printf_float+0xb6>
 800a224:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a228:	ea59 0303 	orrs.w	r3, r9, r3
 800a22c:	d102      	bne.n	800a234 <_printf_float+0x28c>
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	07d9      	lsls	r1, r3, #31
 800a232:	d5d7      	bpl.n	800a1e4 <_printf_float+0x23c>
 800a234:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a238:	4631      	mov	r1, r6
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b8      	blx	r7
 800a23e:	3001      	adds	r0, #1
 800a240:	f43f af0d 	beq.w	800a05e <_printf_float+0xb6>
 800a244:	f04f 0a00 	mov.w	sl, #0
 800a248:	f104 0b1a 	add.w	fp, r4, #26
 800a24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a24e:	425b      	negs	r3, r3
 800a250:	4553      	cmp	r3, sl
 800a252:	dc01      	bgt.n	800a258 <_printf_float+0x2b0>
 800a254:	464b      	mov	r3, r9
 800a256:	e793      	b.n	800a180 <_printf_float+0x1d8>
 800a258:	2301      	movs	r3, #1
 800a25a:	465a      	mov	r2, fp
 800a25c:	4631      	mov	r1, r6
 800a25e:	4628      	mov	r0, r5
 800a260:	47b8      	blx	r7
 800a262:	3001      	adds	r0, #1
 800a264:	f43f aefb 	beq.w	800a05e <_printf_float+0xb6>
 800a268:	f10a 0a01 	add.w	sl, sl, #1
 800a26c:	e7ee      	b.n	800a24c <_printf_float+0x2a4>
 800a26e:	bf00      	nop
 800a270:	7fefffff 	.word	0x7fefffff
 800a274:	0800d811 	.word	0x0800d811
 800a278:	0800d815 	.word	0x0800d815
 800a27c:	0800d819 	.word	0x0800d819
 800a280:	0800d81d 	.word	0x0800d81d
 800a284:	0800d821 	.word	0x0800d821
 800a288:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a28a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a28e:	4553      	cmp	r3, sl
 800a290:	bfa8      	it	ge
 800a292:	4653      	movge	r3, sl
 800a294:	2b00      	cmp	r3, #0
 800a296:	4699      	mov	r9, r3
 800a298:	dc36      	bgt.n	800a308 <_printf_float+0x360>
 800a29a:	f04f 0b00 	mov.w	fp, #0
 800a29e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2a2:	f104 021a 	add.w	r2, r4, #26
 800a2a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2a8:	9306      	str	r3, [sp, #24]
 800a2aa:	eba3 0309 	sub.w	r3, r3, r9
 800a2ae:	455b      	cmp	r3, fp
 800a2b0:	dc31      	bgt.n	800a316 <_printf_float+0x36e>
 800a2b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b4:	459a      	cmp	sl, r3
 800a2b6:	dc3a      	bgt.n	800a32e <_printf_float+0x386>
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	07da      	lsls	r2, r3, #31
 800a2bc:	d437      	bmi.n	800a32e <_printf_float+0x386>
 800a2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c0:	ebaa 0903 	sub.w	r9, sl, r3
 800a2c4:	9b06      	ldr	r3, [sp, #24]
 800a2c6:	ebaa 0303 	sub.w	r3, sl, r3
 800a2ca:	4599      	cmp	r9, r3
 800a2cc:	bfa8      	it	ge
 800a2ce:	4699      	movge	r9, r3
 800a2d0:	f1b9 0f00 	cmp.w	r9, #0
 800a2d4:	dc33      	bgt.n	800a33e <_printf_float+0x396>
 800a2d6:	f04f 0800 	mov.w	r8, #0
 800a2da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2de:	f104 0b1a 	add.w	fp, r4, #26
 800a2e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2e4:	ebaa 0303 	sub.w	r3, sl, r3
 800a2e8:	eba3 0309 	sub.w	r3, r3, r9
 800a2ec:	4543      	cmp	r3, r8
 800a2ee:	f77f af79 	ble.w	800a1e4 <_printf_float+0x23c>
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	465a      	mov	r2, fp
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	47b8      	blx	r7
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	f43f aeae 	beq.w	800a05e <_printf_float+0xb6>
 800a302:	f108 0801 	add.w	r8, r8, #1
 800a306:	e7ec      	b.n	800a2e2 <_printf_float+0x33a>
 800a308:	4642      	mov	r2, r8
 800a30a:	4631      	mov	r1, r6
 800a30c:	4628      	mov	r0, r5
 800a30e:	47b8      	blx	r7
 800a310:	3001      	adds	r0, #1
 800a312:	d1c2      	bne.n	800a29a <_printf_float+0x2f2>
 800a314:	e6a3      	b.n	800a05e <_printf_float+0xb6>
 800a316:	2301      	movs	r3, #1
 800a318:	4631      	mov	r1, r6
 800a31a:	4628      	mov	r0, r5
 800a31c:	9206      	str	r2, [sp, #24]
 800a31e:	47b8      	blx	r7
 800a320:	3001      	adds	r0, #1
 800a322:	f43f ae9c 	beq.w	800a05e <_printf_float+0xb6>
 800a326:	9a06      	ldr	r2, [sp, #24]
 800a328:	f10b 0b01 	add.w	fp, fp, #1
 800a32c:	e7bb      	b.n	800a2a6 <_printf_float+0x2fe>
 800a32e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a332:	4631      	mov	r1, r6
 800a334:	4628      	mov	r0, r5
 800a336:	47b8      	blx	r7
 800a338:	3001      	adds	r0, #1
 800a33a:	d1c0      	bne.n	800a2be <_printf_float+0x316>
 800a33c:	e68f      	b.n	800a05e <_printf_float+0xb6>
 800a33e:	9a06      	ldr	r2, [sp, #24]
 800a340:	464b      	mov	r3, r9
 800a342:	4442      	add	r2, r8
 800a344:	4631      	mov	r1, r6
 800a346:	4628      	mov	r0, r5
 800a348:	47b8      	blx	r7
 800a34a:	3001      	adds	r0, #1
 800a34c:	d1c3      	bne.n	800a2d6 <_printf_float+0x32e>
 800a34e:	e686      	b.n	800a05e <_printf_float+0xb6>
 800a350:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a354:	f1ba 0f01 	cmp.w	sl, #1
 800a358:	dc01      	bgt.n	800a35e <_printf_float+0x3b6>
 800a35a:	07db      	lsls	r3, r3, #31
 800a35c:	d536      	bpl.n	800a3cc <_printf_float+0x424>
 800a35e:	2301      	movs	r3, #1
 800a360:	4642      	mov	r2, r8
 800a362:	4631      	mov	r1, r6
 800a364:	4628      	mov	r0, r5
 800a366:	47b8      	blx	r7
 800a368:	3001      	adds	r0, #1
 800a36a:	f43f ae78 	beq.w	800a05e <_printf_float+0xb6>
 800a36e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a372:	4631      	mov	r1, r6
 800a374:	4628      	mov	r0, r5
 800a376:	47b8      	blx	r7
 800a378:	3001      	adds	r0, #1
 800a37a:	f43f ae70 	beq.w	800a05e <_printf_float+0xb6>
 800a37e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a382:	2200      	movs	r2, #0
 800a384:	2300      	movs	r3, #0
 800a386:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a38a:	f7f6 fbbd 	bl	8000b08 <__aeabi_dcmpeq>
 800a38e:	b9c0      	cbnz	r0, 800a3c2 <_printf_float+0x41a>
 800a390:	4653      	mov	r3, sl
 800a392:	f108 0201 	add.w	r2, r8, #1
 800a396:	4631      	mov	r1, r6
 800a398:	4628      	mov	r0, r5
 800a39a:	47b8      	blx	r7
 800a39c:	3001      	adds	r0, #1
 800a39e:	d10c      	bne.n	800a3ba <_printf_float+0x412>
 800a3a0:	e65d      	b.n	800a05e <_printf_float+0xb6>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	465a      	mov	r2, fp
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	47b8      	blx	r7
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	f43f ae56 	beq.w	800a05e <_printf_float+0xb6>
 800a3b2:	f108 0801 	add.w	r8, r8, #1
 800a3b6:	45d0      	cmp	r8, sl
 800a3b8:	dbf3      	blt.n	800a3a2 <_printf_float+0x3fa>
 800a3ba:	464b      	mov	r3, r9
 800a3bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a3c0:	e6df      	b.n	800a182 <_printf_float+0x1da>
 800a3c2:	f04f 0800 	mov.w	r8, #0
 800a3c6:	f104 0b1a 	add.w	fp, r4, #26
 800a3ca:	e7f4      	b.n	800a3b6 <_printf_float+0x40e>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	4642      	mov	r2, r8
 800a3d0:	e7e1      	b.n	800a396 <_printf_float+0x3ee>
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	464a      	mov	r2, r9
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	4628      	mov	r0, r5
 800a3da:	47b8      	blx	r7
 800a3dc:	3001      	adds	r0, #1
 800a3de:	f43f ae3e 	beq.w	800a05e <_printf_float+0xb6>
 800a3e2:	f108 0801 	add.w	r8, r8, #1
 800a3e6:	68e3      	ldr	r3, [r4, #12]
 800a3e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3ea:	1a5b      	subs	r3, r3, r1
 800a3ec:	4543      	cmp	r3, r8
 800a3ee:	dcf0      	bgt.n	800a3d2 <_printf_float+0x42a>
 800a3f0:	e6fc      	b.n	800a1ec <_printf_float+0x244>
 800a3f2:	f04f 0800 	mov.w	r8, #0
 800a3f6:	f104 0919 	add.w	r9, r4, #25
 800a3fa:	e7f4      	b.n	800a3e6 <_printf_float+0x43e>

0800a3fc <_printf_common>:
 800a3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a400:	4616      	mov	r6, r2
 800a402:	4698      	mov	r8, r3
 800a404:	688a      	ldr	r2, [r1, #8]
 800a406:	690b      	ldr	r3, [r1, #16]
 800a408:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a40c:	4293      	cmp	r3, r2
 800a40e:	bfb8      	it	lt
 800a410:	4613      	movlt	r3, r2
 800a412:	6033      	str	r3, [r6, #0]
 800a414:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a418:	4607      	mov	r7, r0
 800a41a:	460c      	mov	r4, r1
 800a41c:	b10a      	cbz	r2, 800a422 <_printf_common+0x26>
 800a41e:	3301      	adds	r3, #1
 800a420:	6033      	str	r3, [r6, #0]
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	0699      	lsls	r1, r3, #26
 800a426:	bf42      	ittt	mi
 800a428:	6833      	ldrmi	r3, [r6, #0]
 800a42a:	3302      	addmi	r3, #2
 800a42c:	6033      	strmi	r3, [r6, #0]
 800a42e:	6825      	ldr	r5, [r4, #0]
 800a430:	f015 0506 	ands.w	r5, r5, #6
 800a434:	d106      	bne.n	800a444 <_printf_common+0x48>
 800a436:	f104 0a19 	add.w	sl, r4, #25
 800a43a:	68e3      	ldr	r3, [r4, #12]
 800a43c:	6832      	ldr	r2, [r6, #0]
 800a43e:	1a9b      	subs	r3, r3, r2
 800a440:	42ab      	cmp	r3, r5
 800a442:	dc26      	bgt.n	800a492 <_printf_common+0x96>
 800a444:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a448:	6822      	ldr	r2, [r4, #0]
 800a44a:	3b00      	subs	r3, #0
 800a44c:	bf18      	it	ne
 800a44e:	2301      	movne	r3, #1
 800a450:	0692      	lsls	r2, r2, #26
 800a452:	d42b      	bmi.n	800a4ac <_printf_common+0xb0>
 800a454:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a458:	4641      	mov	r1, r8
 800a45a:	4638      	mov	r0, r7
 800a45c:	47c8      	blx	r9
 800a45e:	3001      	adds	r0, #1
 800a460:	d01e      	beq.n	800a4a0 <_printf_common+0xa4>
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	6922      	ldr	r2, [r4, #16]
 800a466:	f003 0306 	and.w	r3, r3, #6
 800a46a:	2b04      	cmp	r3, #4
 800a46c:	bf02      	ittt	eq
 800a46e:	68e5      	ldreq	r5, [r4, #12]
 800a470:	6833      	ldreq	r3, [r6, #0]
 800a472:	1aed      	subeq	r5, r5, r3
 800a474:	68a3      	ldr	r3, [r4, #8]
 800a476:	bf0c      	ite	eq
 800a478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a47c:	2500      	movne	r5, #0
 800a47e:	4293      	cmp	r3, r2
 800a480:	bfc4      	itt	gt
 800a482:	1a9b      	subgt	r3, r3, r2
 800a484:	18ed      	addgt	r5, r5, r3
 800a486:	2600      	movs	r6, #0
 800a488:	341a      	adds	r4, #26
 800a48a:	42b5      	cmp	r5, r6
 800a48c:	d11a      	bne.n	800a4c4 <_printf_common+0xc8>
 800a48e:	2000      	movs	r0, #0
 800a490:	e008      	b.n	800a4a4 <_printf_common+0xa8>
 800a492:	2301      	movs	r3, #1
 800a494:	4652      	mov	r2, sl
 800a496:	4641      	mov	r1, r8
 800a498:	4638      	mov	r0, r7
 800a49a:	47c8      	blx	r9
 800a49c:	3001      	adds	r0, #1
 800a49e:	d103      	bne.n	800a4a8 <_printf_common+0xac>
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4a8:	3501      	adds	r5, #1
 800a4aa:	e7c6      	b.n	800a43a <_printf_common+0x3e>
 800a4ac:	18e1      	adds	r1, r4, r3
 800a4ae:	1c5a      	adds	r2, r3, #1
 800a4b0:	2030      	movs	r0, #48	@ 0x30
 800a4b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4b6:	4422      	add	r2, r4
 800a4b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4c0:	3302      	adds	r3, #2
 800a4c2:	e7c7      	b.n	800a454 <_printf_common+0x58>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	4622      	mov	r2, r4
 800a4c8:	4641      	mov	r1, r8
 800a4ca:	4638      	mov	r0, r7
 800a4cc:	47c8      	blx	r9
 800a4ce:	3001      	adds	r0, #1
 800a4d0:	d0e6      	beq.n	800a4a0 <_printf_common+0xa4>
 800a4d2:	3601      	adds	r6, #1
 800a4d4:	e7d9      	b.n	800a48a <_printf_common+0x8e>
	...

0800a4d8 <_printf_i>:
 800a4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4dc:	7e0f      	ldrb	r7, [r1, #24]
 800a4de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4e0:	2f78      	cmp	r7, #120	@ 0x78
 800a4e2:	4691      	mov	r9, r2
 800a4e4:	4680      	mov	r8, r0
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	469a      	mov	sl, r3
 800a4ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4ee:	d807      	bhi.n	800a500 <_printf_i+0x28>
 800a4f0:	2f62      	cmp	r7, #98	@ 0x62
 800a4f2:	d80a      	bhi.n	800a50a <_printf_i+0x32>
 800a4f4:	2f00      	cmp	r7, #0
 800a4f6:	f000 80d2 	beq.w	800a69e <_printf_i+0x1c6>
 800a4fa:	2f58      	cmp	r7, #88	@ 0x58
 800a4fc:	f000 80b9 	beq.w	800a672 <_printf_i+0x19a>
 800a500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a504:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a508:	e03a      	b.n	800a580 <_printf_i+0xa8>
 800a50a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a50e:	2b15      	cmp	r3, #21
 800a510:	d8f6      	bhi.n	800a500 <_printf_i+0x28>
 800a512:	a101      	add	r1, pc, #4	@ (adr r1, 800a518 <_printf_i+0x40>)
 800a514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a518:	0800a571 	.word	0x0800a571
 800a51c:	0800a585 	.word	0x0800a585
 800a520:	0800a501 	.word	0x0800a501
 800a524:	0800a501 	.word	0x0800a501
 800a528:	0800a501 	.word	0x0800a501
 800a52c:	0800a501 	.word	0x0800a501
 800a530:	0800a585 	.word	0x0800a585
 800a534:	0800a501 	.word	0x0800a501
 800a538:	0800a501 	.word	0x0800a501
 800a53c:	0800a501 	.word	0x0800a501
 800a540:	0800a501 	.word	0x0800a501
 800a544:	0800a685 	.word	0x0800a685
 800a548:	0800a5af 	.word	0x0800a5af
 800a54c:	0800a63f 	.word	0x0800a63f
 800a550:	0800a501 	.word	0x0800a501
 800a554:	0800a501 	.word	0x0800a501
 800a558:	0800a6a7 	.word	0x0800a6a7
 800a55c:	0800a501 	.word	0x0800a501
 800a560:	0800a5af 	.word	0x0800a5af
 800a564:	0800a501 	.word	0x0800a501
 800a568:	0800a501 	.word	0x0800a501
 800a56c:	0800a647 	.word	0x0800a647
 800a570:	6833      	ldr	r3, [r6, #0]
 800a572:	1d1a      	adds	r2, r3, #4
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6032      	str	r2, [r6, #0]
 800a578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a57c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a580:	2301      	movs	r3, #1
 800a582:	e09d      	b.n	800a6c0 <_printf_i+0x1e8>
 800a584:	6833      	ldr	r3, [r6, #0]
 800a586:	6820      	ldr	r0, [r4, #0]
 800a588:	1d19      	adds	r1, r3, #4
 800a58a:	6031      	str	r1, [r6, #0]
 800a58c:	0606      	lsls	r6, r0, #24
 800a58e:	d501      	bpl.n	800a594 <_printf_i+0xbc>
 800a590:	681d      	ldr	r5, [r3, #0]
 800a592:	e003      	b.n	800a59c <_printf_i+0xc4>
 800a594:	0645      	lsls	r5, r0, #25
 800a596:	d5fb      	bpl.n	800a590 <_printf_i+0xb8>
 800a598:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a59c:	2d00      	cmp	r5, #0
 800a59e:	da03      	bge.n	800a5a8 <_printf_i+0xd0>
 800a5a0:	232d      	movs	r3, #45	@ 0x2d
 800a5a2:	426d      	negs	r5, r5
 800a5a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5a8:	4859      	ldr	r0, [pc, #356]	@ (800a710 <_printf_i+0x238>)
 800a5aa:	230a      	movs	r3, #10
 800a5ac:	e011      	b.n	800a5d2 <_printf_i+0xfa>
 800a5ae:	6821      	ldr	r1, [r4, #0]
 800a5b0:	6833      	ldr	r3, [r6, #0]
 800a5b2:	0608      	lsls	r0, r1, #24
 800a5b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5b8:	d402      	bmi.n	800a5c0 <_printf_i+0xe8>
 800a5ba:	0649      	lsls	r1, r1, #25
 800a5bc:	bf48      	it	mi
 800a5be:	b2ad      	uxthmi	r5, r5
 800a5c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5c2:	4853      	ldr	r0, [pc, #332]	@ (800a710 <_printf_i+0x238>)
 800a5c4:	6033      	str	r3, [r6, #0]
 800a5c6:	bf14      	ite	ne
 800a5c8:	230a      	movne	r3, #10
 800a5ca:	2308      	moveq	r3, #8
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5d2:	6866      	ldr	r6, [r4, #4]
 800a5d4:	60a6      	str	r6, [r4, #8]
 800a5d6:	2e00      	cmp	r6, #0
 800a5d8:	bfa2      	ittt	ge
 800a5da:	6821      	ldrge	r1, [r4, #0]
 800a5dc:	f021 0104 	bicge.w	r1, r1, #4
 800a5e0:	6021      	strge	r1, [r4, #0]
 800a5e2:	b90d      	cbnz	r5, 800a5e8 <_printf_i+0x110>
 800a5e4:	2e00      	cmp	r6, #0
 800a5e6:	d04b      	beq.n	800a680 <_printf_i+0x1a8>
 800a5e8:	4616      	mov	r6, r2
 800a5ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5ee:	fb03 5711 	mls	r7, r3, r1, r5
 800a5f2:	5dc7      	ldrb	r7, [r0, r7]
 800a5f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5f8:	462f      	mov	r7, r5
 800a5fa:	42bb      	cmp	r3, r7
 800a5fc:	460d      	mov	r5, r1
 800a5fe:	d9f4      	bls.n	800a5ea <_printf_i+0x112>
 800a600:	2b08      	cmp	r3, #8
 800a602:	d10b      	bne.n	800a61c <_printf_i+0x144>
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	07df      	lsls	r7, r3, #31
 800a608:	d508      	bpl.n	800a61c <_printf_i+0x144>
 800a60a:	6923      	ldr	r3, [r4, #16]
 800a60c:	6861      	ldr	r1, [r4, #4]
 800a60e:	4299      	cmp	r1, r3
 800a610:	bfde      	ittt	le
 800a612:	2330      	movle	r3, #48	@ 0x30
 800a614:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a618:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a61c:	1b92      	subs	r2, r2, r6
 800a61e:	6122      	str	r2, [r4, #16]
 800a620:	f8cd a000 	str.w	sl, [sp]
 800a624:	464b      	mov	r3, r9
 800a626:	aa03      	add	r2, sp, #12
 800a628:	4621      	mov	r1, r4
 800a62a:	4640      	mov	r0, r8
 800a62c:	f7ff fee6 	bl	800a3fc <_printf_common>
 800a630:	3001      	adds	r0, #1
 800a632:	d14a      	bne.n	800a6ca <_printf_i+0x1f2>
 800a634:	f04f 30ff 	mov.w	r0, #4294967295
 800a638:	b004      	add	sp, #16
 800a63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	f043 0320 	orr.w	r3, r3, #32
 800a644:	6023      	str	r3, [r4, #0]
 800a646:	4833      	ldr	r0, [pc, #204]	@ (800a714 <_printf_i+0x23c>)
 800a648:	2778      	movs	r7, #120	@ 0x78
 800a64a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	6831      	ldr	r1, [r6, #0]
 800a652:	061f      	lsls	r7, r3, #24
 800a654:	f851 5b04 	ldr.w	r5, [r1], #4
 800a658:	d402      	bmi.n	800a660 <_printf_i+0x188>
 800a65a:	065f      	lsls	r7, r3, #25
 800a65c:	bf48      	it	mi
 800a65e:	b2ad      	uxthmi	r5, r5
 800a660:	6031      	str	r1, [r6, #0]
 800a662:	07d9      	lsls	r1, r3, #31
 800a664:	bf44      	itt	mi
 800a666:	f043 0320 	orrmi.w	r3, r3, #32
 800a66a:	6023      	strmi	r3, [r4, #0]
 800a66c:	b11d      	cbz	r5, 800a676 <_printf_i+0x19e>
 800a66e:	2310      	movs	r3, #16
 800a670:	e7ac      	b.n	800a5cc <_printf_i+0xf4>
 800a672:	4827      	ldr	r0, [pc, #156]	@ (800a710 <_printf_i+0x238>)
 800a674:	e7e9      	b.n	800a64a <_printf_i+0x172>
 800a676:	6823      	ldr	r3, [r4, #0]
 800a678:	f023 0320 	bic.w	r3, r3, #32
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	e7f6      	b.n	800a66e <_printf_i+0x196>
 800a680:	4616      	mov	r6, r2
 800a682:	e7bd      	b.n	800a600 <_printf_i+0x128>
 800a684:	6833      	ldr	r3, [r6, #0]
 800a686:	6825      	ldr	r5, [r4, #0]
 800a688:	6961      	ldr	r1, [r4, #20]
 800a68a:	1d18      	adds	r0, r3, #4
 800a68c:	6030      	str	r0, [r6, #0]
 800a68e:	062e      	lsls	r6, r5, #24
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	d501      	bpl.n	800a698 <_printf_i+0x1c0>
 800a694:	6019      	str	r1, [r3, #0]
 800a696:	e002      	b.n	800a69e <_printf_i+0x1c6>
 800a698:	0668      	lsls	r0, r5, #25
 800a69a:	d5fb      	bpl.n	800a694 <_printf_i+0x1bc>
 800a69c:	8019      	strh	r1, [r3, #0]
 800a69e:	2300      	movs	r3, #0
 800a6a0:	6123      	str	r3, [r4, #16]
 800a6a2:	4616      	mov	r6, r2
 800a6a4:	e7bc      	b.n	800a620 <_printf_i+0x148>
 800a6a6:	6833      	ldr	r3, [r6, #0]
 800a6a8:	1d1a      	adds	r2, r3, #4
 800a6aa:	6032      	str	r2, [r6, #0]
 800a6ac:	681e      	ldr	r6, [r3, #0]
 800a6ae:	6862      	ldr	r2, [r4, #4]
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f7f5 fdac 	bl	8000210 <memchr>
 800a6b8:	b108      	cbz	r0, 800a6be <_printf_i+0x1e6>
 800a6ba:	1b80      	subs	r0, r0, r6
 800a6bc:	6060      	str	r0, [r4, #4]
 800a6be:	6863      	ldr	r3, [r4, #4]
 800a6c0:	6123      	str	r3, [r4, #16]
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6c8:	e7aa      	b.n	800a620 <_printf_i+0x148>
 800a6ca:	6923      	ldr	r3, [r4, #16]
 800a6cc:	4632      	mov	r2, r6
 800a6ce:	4649      	mov	r1, r9
 800a6d0:	4640      	mov	r0, r8
 800a6d2:	47d0      	blx	sl
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	d0ad      	beq.n	800a634 <_printf_i+0x15c>
 800a6d8:	6823      	ldr	r3, [r4, #0]
 800a6da:	079b      	lsls	r3, r3, #30
 800a6dc:	d413      	bmi.n	800a706 <_printf_i+0x22e>
 800a6de:	68e0      	ldr	r0, [r4, #12]
 800a6e0:	9b03      	ldr	r3, [sp, #12]
 800a6e2:	4298      	cmp	r0, r3
 800a6e4:	bfb8      	it	lt
 800a6e6:	4618      	movlt	r0, r3
 800a6e8:	e7a6      	b.n	800a638 <_printf_i+0x160>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	4632      	mov	r2, r6
 800a6ee:	4649      	mov	r1, r9
 800a6f0:	4640      	mov	r0, r8
 800a6f2:	47d0      	blx	sl
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	d09d      	beq.n	800a634 <_printf_i+0x15c>
 800a6f8:	3501      	adds	r5, #1
 800a6fa:	68e3      	ldr	r3, [r4, #12]
 800a6fc:	9903      	ldr	r1, [sp, #12]
 800a6fe:	1a5b      	subs	r3, r3, r1
 800a700:	42ab      	cmp	r3, r5
 800a702:	dcf2      	bgt.n	800a6ea <_printf_i+0x212>
 800a704:	e7eb      	b.n	800a6de <_printf_i+0x206>
 800a706:	2500      	movs	r5, #0
 800a708:	f104 0619 	add.w	r6, r4, #25
 800a70c:	e7f5      	b.n	800a6fa <_printf_i+0x222>
 800a70e:	bf00      	nop
 800a710:	0800d823 	.word	0x0800d823
 800a714:	0800d834 	.word	0x0800d834

0800a718 <std>:
 800a718:	2300      	movs	r3, #0
 800a71a:	b510      	push	{r4, lr}
 800a71c:	4604      	mov	r4, r0
 800a71e:	e9c0 3300 	strd	r3, r3, [r0]
 800a722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a726:	6083      	str	r3, [r0, #8]
 800a728:	8181      	strh	r1, [r0, #12]
 800a72a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a72c:	81c2      	strh	r2, [r0, #14]
 800a72e:	6183      	str	r3, [r0, #24]
 800a730:	4619      	mov	r1, r3
 800a732:	2208      	movs	r2, #8
 800a734:	305c      	adds	r0, #92	@ 0x5c
 800a736:	f000 f969 	bl	800aa0c <memset>
 800a73a:	4b0d      	ldr	r3, [pc, #52]	@ (800a770 <std+0x58>)
 800a73c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a73e:	4b0d      	ldr	r3, [pc, #52]	@ (800a774 <std+0x5c>)
 800a740:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a742:	4b0d      	ldr	r3, [pc, #52]	@ (800a778 <std+0x60>)
 800a744:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a746:	4b0d      	ldr	r3, [pc, #52]	@ (800a77c <std+0x64>)
 800a748:	6323      	str	r3, [r4, #48]	@ 0x30
 800a74a:	4b0d      	ldr	r3, [pc, #52]	@ (800a780 <std+0x68>)
 800a74c:	6224      	str	r4, [r4, #32]
 800a74e:	429c      	cmp	r4, r3
 800a750:	d006      	beq.n	800a760 <std+0x48>
 800a752:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a756:	4294      	cmp	r4, r2
 800a758:	d002      	beq.n	800a760 <std+0x48>
 800a75a:	33d0      	adds	r3, #208	@ 0xd0
 800a75c:	429c      	cmp	r4, r3
 800a75e:	d105      	bne.n	800a76c <std+0x54>
 800a760:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a768:	f000 b9de 	b.w	800ab28 <__retarget_lock_init_recursive>
 800a76c:	bd10      	pop	{r4, pc}
 800a76e:	bf00      	nop
 800a770:	0800a945 	.word	0x0800a945
 800a774:	0800a967 	.word	0x0800a967
 800a778:	0800a99f 	.word	0x0800a99f
 800a77c:	0800a9c3 	.word	0x0800a9c3
 800a780:	20000964 	.word	0x20000964

0800a784 <stdio_exit_handler>:
 800a784:	4a02      	ldr	r2, [pc, #8]	@ (800a790 <stdio_exit_handler+0xc>)
 800a786:	4903      	ldr	r1, [pc, #12]	@ (800a794 <stdio_exit_handler+0x10>)
 800a788:	4803      	ldr	r0, [pc, #12]	@ (800a798 <stdio_exit_handler+0x14>)
 800a78a:	f000 b869 	b.w	800a860 <_fwalk_sglue>
 800a78e:	bf00      	nop
 800a790:	2000002c 	.word	0x2000002c
 800a794:	0800cdc5 	.word	0x0800cdc5
 800a798:	200001a8 	.word	0x200001a8

0800a79c <cleanup_stdio>:
 800a79c:	6841      	ldr	r1, [r0, #4]
 800a79e:	4b0c      	ldr	r3, [pc, #48]	@ (800a7d0 <cleanup_stdio+0x34>)
 800a7a0:	4299      	cmp	r1, r3
 800a7a2:	b510      	push	{r4, lr}
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	d001      	beq.n	800a7ac <cleanup_stdio+0x10>
 800a7a8:	f002 fb0c 	bl	800cdc4 <_fflush_r>
 800a7ac:	68a1      	ldr	r1, [r4, #8]
 800a7ae:	4b09      	ldr	r3, [pc, #36]	@ (800a7d4 <cleanup_stdio+0x38>)
 800a7b0:	4299      	cmp	r1, r3
 800a7b2:	d002      	beq.n	800a7ba <cleanup_stdio+0x1e>
 800a7b4:	4620      	mov	r0, r4
 800a7b6:	f002 fb05 	bl	800cdc4 <_fflush_r>
 800a7ba:	68e1      	ldr	r1, [r4, #12]
 800a7bc:	4b06      	ldr	r3, [pc, #24]	@ (800a7d8 <cleanup_stdio+0x3c>)
 800a7be:	4299      	cmp	r1, r3
 800a7c0:	d004      	beq.n	800a7cc <cleanup_stdio+0x30>
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7c8:	f002 bafc 	b.w	800cdc4 <_fflush_r>
 800a7cc:	bd10      	pop	{r4, pc}
 800a7ce:	bf00      	nop
 800a7d0:	20000964 	.word	0x20000964
 800a7d4:	200009cc 	.word	0x200009cc
 800a7d8:	20000a34 	.word	0x20000a34

0800a7dc <global_stdio_init.part.0>:
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	4b0b      	ldr	r3, [pc, #44]	@ (800a80c <global_stdio_init.part.0+0x30>)
 800a7e0:	4c0b      	ldr	r4, [pc, #44]	@ (800a810 <global_stdio_init.part.0+0x34>)
 800a7e2:	4a0c      	ldr	r2, [pc, #48]	@ (800a814 <global_stdio_init.part.0+0x38>)
 800a7e4:	601a      	str	r2, [r3, #0]
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	2104      	movs	r1, #4
 800a7ec:	f7ff ff94 	bl	800a718 <std>
 800a7f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	2109      	movs	r1, #9
 800a7f8:	f7ff ff8e 	bl	800a718 <std>
 800a7fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a800:	2202      	movs	r2, #2
 800a802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a806:	2112      	movs	r1, #18
 800a808:	f7ff bf86 	b.w	800a718 <std>
 800a80c:	20000a9c 	.word	0x20000a9c
 800a810:	20000964 	.word	0x20000964
 800a814:	0800a785 	.word	0x0800a785

0800a818 <__sfp_lock_acquire>:
 800a818:	4801      	ldr	r0, [pc, #4]	@ (800a820 <__sfp_lock_acquire+0x8>)
 800a81a:	f000 b986 	b.w	800ab2a <__retarget_lock_acquire_recursive>
 800a81e:	bf00      	nop
 800a820:	20000aa5 	.word	0x20000aa5

0800a824 <__sfp_lock_release>:
 800a824:	4801      	ldr	r0, [pc, #4]	@ (800a82c <__sfp_lock_release+0x8>)
 800a826:	f000 b981 	b.w	800ab2c <__retarget_lock_release_recursive>
 800a82a:	bf00      	nop
 800a82c:	20000aa5 	.word	0x20000aa5

0800a830 <__sinit>:
 800a830:	b510      	push	{r4, lr}
 800a832:	4604      	mov	r4, r0
 800a834:	f7ff fff0 	bl	800a818 <__sfp_lock_acquire>
 800a838:	6a23      	ldr	r3, [r4, #32]
 800a83a:	b11b      	cbz	r3, 800a844 <__sinit+0x14>
 800a83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a840:	f7ff bff0 	b.w	800a824 <__sfp_lock_release>
 800a844:	4b04      	ldr	r3, [pc, #16]	@ (800a858 <__sinit+0x28>)
 800a846:	6223      	str	r3, [r4, #32]
 800a848:	4b04      	ldr	r3, [pc, #16]	@ (800a85c <__sinit+0x2c>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1f5      	bne.n	800a83c <__sinit+0xc>
 800a850:	f7ff ffc4 	bl	800a7dc <global_stdio_init.part.0>
 800a854:	e7f2      	b.n	800a83c <__sinit+0xc>
 800a856:	bf00      	nop
 800a858:	0800a79d 	.word	0x0800a79d
 800a85c:	20000a9c 	.word	0x20000a9c

0800a860 <_fwalk_sglue>:
 800a860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a864:	4607      	mov	r7, r0
 800a866:	4688      	mov	r8, r1
 800a868:	4614      	mov	r4, r2
 800a86a:	2600      	movs	r6, #0
 800a86c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a870:	f1b9 0901 	subs.w	r9, r9, #1
 800a874:	d505      	bpl.n	800a882 <_fwalk_sglue+0x22>
 800a876:	6824      	ldr	r4, [r4, #0]
 800a878:	2c00      	cmp	r4, #0
 800a87a:	d1f7      	bne.n	800a86c <_fwalk_sglue+0xc>
 800a87c:	4630      	mov	r0, r6
 800a87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a882:	89ab      	ldrh	r3, [r5, #12]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d907      	bls.n	800a898 <_fwalk_sglue+0x38>
 800a888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a88c:	3301      	adds	r3, #1
 800a88e:	d003      	beq.n	800a898 <_fwalk_sglue+0x38>
 800a890:	4629      	mov	r1, r5
 800a892:	4638      	mov	r0, r7
 800a894:	47c0      	blx	r8
 800a896:	4306      	orrs	r6, r0
 800a898:	3568      	adds	r5, #104	@ 0x68
 800a89a:	e7e9      	b.n	800a870 <_fwalk_sglue+0x10>

0800a89c <sniprintf>:
 800a89c:	b40c      	push	{r2, r3}
 800a89e:	b530      	push	{r4, r5, lr}
 800a8a0:	4b17      	ldr	r3, [pc, #92]	@ (800a900 <sniprintf+0x64>)
 800a8a2:	1e0c      	subs	r4, r1, #0
 800a8a4:	681d      	ldr	r5, [r3, #0]
 800a8a6:	b09d      	sub	sp, #116	@ 0x74
 800a8a8:	da08      	bge.n	800a8bc <sniprintf+0x20>
 800a8aa:	238b      	movs	r3, #139	@ 0x8b
 800a8ac:	602b      	str	r3, [r5, #0]
 800a8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b2:	b01d      	add	sp, #116	@ 0x74
 800a8b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8b8:	b002      	add	sp, #8
 800a8ba:	4770      	bx	lr
 800a8bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a8c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a8c4:	bf14      	ite	ne
 800a8c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a8ca:	4623      	moveq	r3, r4
 800a8cc:	9304      	str	r3, [sp, #16]
 800a8ce:	9307      	str	r3, [sp, #28]
 800a8d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a8d4:	9002      	str	r0, [sp, #8]
 800a8d6:	9006      	str	r0, [sp, #24]
 800a8d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a8dc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a8de:	ab21      	add	r3, sp, #132	@ 0x84
 800a8e0:	a902      	add	r1, sp, #8
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	9301      	str	r3, [sp, #4]
 800a8e6:	f002 f8ed 	bl	800cac4 <_svfiprintf_r>
 800a8ea:	1c43      	adds	r3, r0, #1
 800a8ec:	bfbc      	itt	lt
 800a8ee:	238b      	movlt	r3, #139	@ 0x8b
 800a8f0:	602b      	strlt	r3, [r5, #0]
 800a8f2:	2c00      	cmp	r4, #0
 800a8f4:	d0dd      	beq.n	800a8b2 <sniprintf+0x16>
 800a8f6:	9b02      	ldr	r3, [sp, #8]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	701a      	strb	r2, [r3, #0]
 800a8fc:	e7d9      	b.n	800a8b2 <sniprintf+0x16>
 800a8fe:	bf00      	nop
 800a900:	200001a4 	.word	0x200001a4

0800a904 <siprintf>:
 800a904:	b40e      	push	{r1, r2, r3}
 800a906:	b500      	push	{lr}
 800a908:	b09c      	sub	sp, #112	@ 0x70
 800a90a:	ab1d      	add	r3, sp, #116	@ 0x74
 800a90c:	9002      	str	r0, [sp, #8]
 800a90e:	9006      	str	r0, [sp, #24]
 800a910:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a914:	4809      	ldr	r0, [pc, #36]	@ (800a93c <siprintf+0x38>)
 800a916:	9107      	str	r1, [sp, #28]
 800a918:	9104      	str	r1, [sp, #16]
 800a91a:	4909      	ldr	r1, [pc, #36]	@ (800a940 <siprintf+0x3c>)
 800a91c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a920:	9105      	str	r1, [sp, #20]
 800a922:	6800      	ldr	r0, [r0, #0]
 800a924:	9301      	str	r3, [sp, #4]
 800a926:	a902      	add	r1, sp, #8
 800a928:	f002 f8cc 	bl	800cac4 <_svfiprintf_r>
 800a92c:	9b02      	ldr	r3, [sp, #8]
 800a92e:	2200      	movs	r2, #0
 800a930:	701a      	strb	r2, [r3, #0]
 800a932:	b01c      	add	sp, #112	@ 0x70
 800a934:	f85d eb04 	ldr.w	lr, [sp], #4
 800a938:	b003      	add	sp, #12
 800a93a:	4770      	bx	lr
 800a93c:	200001a4 	.word	0x200001a4
 800a940:	ffff0208 	.word	0xffff0208

0800a944 <__sread>:
 800a944:	b510      	push	{r4, lr}
 800a946:	460c      	mov	r4, r1
 800a948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a94c:	f000 f89e 	bl	800aa8c <_read_r>
 800a950:	2800      	cmp	r0, #0
 800a952:	bfab      	itete	ge
 800a954:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a956:	89a3      	ldrhlt	r3, [r4, #12]
 800a958:	181b      	addge	r3, r3, r0
 800a95a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a95e:	bfac      	ite	ge
 800a960:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a962:	81a3      	strhlt	r3, [r4, #12]
 800a964:	bd10      	pop	{r4, pc}

0800a966 <__swrite>:
 800a966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96a:	461f      	mov	r7, r3
 800a96c:	898b      	ldrh	r3, [r1, #12]
 800a96e:	05db      	lsls	r3, r3, #23
 800a970:	4605      	mov	r5, r0
 800a972:	460c      	mov	r4, r1
 800a974:	4616      	mov	r6, r2
 800a976:	d505      	bpl.n	800a984 <__swrite+0x1e>
 800a978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a97c:	2302      	movs	r3, #2
 800a97e:	2200      	movs	r2, #0
 800a980:	f000 f872 	bl	800aa68 <_lseek_r>
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a98a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a98e:	81a3      	strh	r3, [r4, #12]
 800a990:	4632      	mov	r2, r6
 800a992:	463b      	mov	r3, r7
 800a994:	4628      	mov	r0, r5
 800a996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a99a:	f000 b889 	b.w	800aab0 <_write_r>

0800a99e <__sseek>:
 800a99e:	b510      	push	{r4, lr}
 800a9a0:	460c      	mov	r4, r1
 800a9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a6:	f000 f85f 	bl	800aa68 <_lseek_r>
 800a9aa:	1c43      	adds	r3, r0, #1
 800a9ac:	89a3      	ldrh	r3, [r4, #12]
 800a9ae:	bf15      	itete	ne
 800a9b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a9b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a9b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a9ba:	81a3      	strheq	r3, [r4, #12]
 800a9bc:	bf18      	it	ne
 800a9be:	81a3      	strhne	r3, [r4, #12]
 800a9c0:	bd10      	pop	{r4, pc}

0800a9c2 <__sclose>:
 800a9c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c6:	f000 b83f 	b.w	800aa48 <_close_r>
	...

0800a9cc <_vsiprintf_r>:
 800a9cc:	b500      	push	{lr}
 800a9ce:	b09b      	sub	sp, #108	@ 0x6c
 800a9d0:	9100      	str	r1, [sp, #0]
 800a9d2:	9104      	str	r1, [sp, #16]
 800a9d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a9d8:	9105      	str	r1, [sp, #20]
 800a9da:	9102      	str	r1, [sp, #8]
 800a9dc:	4905      	ldr	r1, [pc, #20]	@ (800a9f4 <_vsiprintf_r+0x28>)
 800a9de:	9103      	str	r1, [sp, #12]
 800a9e0:	4669      	mov	r1, sp
 800a9e2:	f002 f86f 	bl	800cac4 <_svfiprintf_r>
 800a9e6:	9b00      	ldr	r3, [sp, #0]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	701a      	strb	r2, [r3, #0]
 800a9ec:	b01b      	add	sp, #108	@ 0x6c
 800a9ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9f2:	bf00      	nop
 800a9f4:	ffff0208 	.word	0xffff0208

0800a9f8 <vsiprintf>:
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	460a      	mov	r2, r1
 800a9fc:	4601      	mov	r1, r0
 800a9fe:	4802      	ldr	r0, [pc, #8]	@ (800aa08 <vsiprintf+0x10>)
 800aa00:	6800      	ldr	r0, [r0, #0]
 800aa02:	f7ff bfe3 	b.w	800a9cc <_vsiprintf_r>
 800aa06:	bf00      	nop
 800aa08:	200001a4 	.word	0x200001a4

0800aa0c <memset>:
 800aa0c:	4402      	add	r2, r0
 800aa0e:	4603      	mov	r3, r0
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d100      	bne.n	800aa16 <memset+0xa>
 800aa14:	4770      	bx	lr
 800aa16:	f803 1b01 	strb.w	r1, [r3], #1
 800aa1a:	e7f9      	b.n	800aa10 <memset+0x4>

0800aa1c <strncmp>:
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	b16a      	cbz	r2, 800aa3c <strncmp+0x20>
 800aa20:	3901      	subs	r1, #1
 800aa22:	1884      	adds	r4, r0, r2
 800aa24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d103      	bne.n	800aa38 <strncmp+0x1c>
 800aa30:	42a0      	cmp	r0, r4
 800aa32:	d001      	beq.n	800aa38 <strncmp+0x1c>
 800aa34:	2a00      	cmp	r2, #0
 800aa36:	d1f5      	bne.n	800aa24 <strncmp+0x8>
 800aa38:	1ad0      	subs	r0, r2, r3
 800aa3a:	bd10      	pop	{r4, pc}
 800aa3c:	4610      	mov	r0, r2
 800aa3e:	e7fc      	b.n	800aa3a <strncmp+0x1e>

0800aa40 <_localeconv_r>:
 800aa40:	4800      	ldr	r0, [pc, #0]	@ (800aa44 <_localeconv_r+0x4>)
 800aa42:	4770      	bx	lr
 800aa44:	20000128 	.word	0x20000128

0800aa48 <_close_r>:
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	4d06      	ldr	r5, [pc, #24]	@ (800aa64 <_close_r+0x1c>)
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	4604      	mov	r4, r0
 800aa50:	4608      	mov	r0, r1
 800aa52:	602b      	str	r3, [r5, #0]
 800aa54:	f7f7 ff6e 	bl	8002934 <_close>
 800aa58:	1c43      	adds	r3, r0, #1
 800aa5a:	d102      	bne.n	800aa62 <_close_r+0x1a>
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	b103      	cbz	r3, 800aa62 <_close_r+0x1a>
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	bd38      	pop	{r3, r4, r5, pc}
 800aa64:	20000aa0 	.word	0x20000aa0

0800aa68 <_lseek_r>:
 800aa68:	b538      	push	{r3, r4, r5, lr}
 800aa6a:	4d07      	ldr	r5, [pc, #28]	@ (800aa88 <_lseek_r+0x20>)
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	4608      	mov	r0, r1
 800aa70:	4611      	mov	r1, r2
 800aa72:	2200      	movs	r2, #0
 800aa74:	602a      	str	r2, [r5, #0]
 800aa76:	461a      	mov	r2, r3
 800aa78:	f7f7 ff83 	bl	8002982 <_lseek>
 800aa7c:	1c43      	adds	r3, r0, #1
 800aa7e:	d102      	bne.n	800aa86 <_lseek_r+0x1e>
 800aa80:	682b      	ldr	r3, [r5, #0]
 800aa82:	b103      	cbz	r3, 800aa86 <_lseek_r+0x1e>
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	bd38      	pop	{r3, r4, r5, pc}
 800aa88:	20000aa0 	.word	0x20000aa0

0800aa8c <_read_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4d07      	ldr	r5, [pc, #28]	@ (800aaac <_read_r+0x20>)
 800aa90:	4604      	mov	r4, r0
 800aa92:	4608      	mov	r0, r1
 800aa94:	4611      	mov	r1, r2
 800aa96:	2200      	movs	r2, #0
 800aa98:	602a      	str	r2, [r5, #0]
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f7f7 ff11 	bl	80028c2 <_read>
 800aaa0:	1c43      	adds	r3, r0, #1
 800aaa2:	d102      	bne.n	800aaaa <_read_r+0x1e>
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	b103      	cbz	r3, 800aaaa <_read_r+0x1e>
 800aaa8:	6023      	str	r3, [r4, #0]
 800aaaa:	bd38      	pop	{r3, r4, r5, pc}
 800aaac:	20000aa0 	.word	0x20000aa0

0800aab0 <_write_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4d07      	ldr	r5, [pc, #28]	@ (800aad0 <_write_r+0x20>)
 800aab4:	4604      	mov	r4, r0
 800aab6:	4608      	mov	r0, r1
 800aab8:	4611      	mov	r1, r2
 800aaba:	2200      	movs	r2, #0
 800aabc:	602a      	str	r2, [r5, #0]
 800aabe:	461a      	mov	r2, r3
 800aac0:	f7f7 ff1c 	bl	80028fc <_write>
 800aac4:	1c43      	adds	r3, r0, #1
 800aac6:	d102      	bne.n	800aace <_write_r+0x1e>
 800aac8:	682b      	ldr	r3, [r5, #0]
 800aaca:	b103      	cbz	r3, 800aace <_write_r+0x1e>
 800aacc:	6023      	str	r3, [r4, #0]
 800aace:	bd38      	pop	{r3, r4, r5, pc}
 800aad0:	20000aa0 	.word	0x20000aa0

0800aad4 <__errno>:
 800aad4:	4b01      	ldr	r3, [pc, #4]	@ (800aadc <__errno+0x8>)
 800aad6:	6818      	ldr	r0, [r3, #0]
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	200001a4 	.word	0x200001a4

0800aae0 <__libc_init_array>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	4d0d      	ldr	r5, [pc, #52]	@ (800ab18 <__libc_init_array+0x38>)
 800aae4:	4c0d      	ldr	r4, [pc, #52]	@ (800ab1c <__libc_init_array+0x3c>)
 800aae6:	1b64      	subs	r4, r4, r5
 800aae8:	10a4      	asrs	r4, r4, #2
 800aaea:	2600      	movs	r6, #0
 800aaec:	42a6      	cmp	r6, r4
 800aaee:	d109      	bne.n	800ab04 <__libc_init_array+0x24>
 800aaf0:	4d0b      	ldr	r5, [pc, #44]	@ (800ab20 <__libc_init_array+0x40>)
 800aaf2:	4c0c      	ldr	r4, [pc, #48]	@ (800ab24 <__libc_init_array+0x44>)
 800aaf4:	f002 fcd6 	bl	800d4a4 <_init>
 800aaf8:	1b64      	subs	r4, r4, r5
 800aafa:	10a4      	asrs	r4, r4, #2
 800aafc:	2600      	movs	r6, #0
 800aafe:	42a6      	cmp	r6, r4
 800ab00:	d105      	bne.n	800ab0e <__libc_init_array+0x2e>
 800ab02:	bd70      	pop	{r4, r5, r6, pc}
 800ab04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab08:	4798      	blx	r3
 800ab0a:	3601      	adds	r6, #1
 800ab0c:	e7ee      	b.n	800aaec <__libc_init_array+0xc>
 800ab0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab12:	4798      	blx	r3
 800ab14:	3601      	adds	r6, #1
 800ab16:	e7f2      	b.n	800aafe <__libc_init_array+0x1e>
 800ab18:	0800dae8 	.word	0x0800dae8
 800ab1c:	0800dae8 	.word	0x0800dae8
 800ab20:	0800dae8 	.word	0x0800dae8
 800ab24:	0800daec 	.word	0x0800daec

0800ab28 <__retarget_lock_init_recursive>:
 800ab28:	4770      	bx	lr

0800ab2a <__retarget_lock_acquire_recursive>:
 800ab2a:	4770      	bx	lr

0800ab2c <__retarget_lock_release_recursive>:
 800ab2c:	4770      	bx	lr

0800ab2e <memcpy>:
 800ab2e:	440a      	add	r2, r1
 800ab30:	4291      	cmp	r1, r2
 800ab32:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab36:	d100      	bne.n	800ab3a <memcpy+0xc>
 800ab38:	4770      	bx	lr
 800ab3a:	b510      	push	{r4, lr}
 800ab3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab44:	4291      	cmp	r1, r2
 800ab46:	d1f9      	bne.n	800ab3c <memcpy+0xe>
 800ab48:	bd10      	pop	{r4, pc}
 800ab4a:	0000      	movs	r0, r0
 800ab4c:	0000      	movs	r0, r0
	...

0800ab50 <nan>:
 800ab50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ab58 <nan+0x8>
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	00000000 	.word	0x00000000
 800ab5c:	7ff80000 	.word	0x7ff80000

0800ab60 <quorem>:
 800ab60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab64:	6903      	ldr	r3, [r0, #16]
 800ab66:	690c      	ldr	r4, [r1, #16]
 800ab68:	42a3      	cmp	r3, r4
 800ab6a:	4607      	mov	r7, r0
 800ab6c:	db7e      	blt.n	800ac6c <quorem+0x10c>
 800ab6e:	3c01      	subs	r4, #1
 800ab70:	f101 0814 	add.w	r8, r1, #20
 800ab74:	00a3      	lsls	r3, r4, #2
 800ab76:	f100 0514 	add.w	r5, r0, #20
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab80:	9301      	str	r3, [sp, #4]
 800ab82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ab86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ab92:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab96:	d32e      	bcc.n	800abf6 <quorem+0x96>
 800ab98:	f04f 0a00 	mov.w	sl, #0
 800ab9c:	46c4      	mov	ip, r8
 800ab9e:	46ae      	mov	lr, r5
 800aba0:	46d3      	mov	fp, sl
 800aba2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aba6:	b298      	uxth	r0, r3
 800aba8:	fb06 a000 	mla	r0, r6, r0, sl
 800abac:	0c02      	lsrs	r2, r0, #16
 800abae:	0c1b      	lsrs	r3, r3, #16
 800abb0:	fb06 2303 	mla	r3, r6, r3, r2
 800abb4:	f8de 2000 	ldr.w	r2, [lr]
 800abb8:	b280      	uxth	r0, r0
 800abba:	b292      	uxth	r2, r2
 800abbc:	1a12      	subs	r2, r2, r0
 800abbe:	445a      	add	r2, fp
 800abc0:	f8de 0000 	ldr.w	r0, [lr]
 800abc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abc8:	b29b      	uxth	r3, r3
 800abca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800abce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800abd2:	b292      	uxth	r2, r2
 800abd4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800abd8:	45e1      	cmp	r9, ip
 800abda:	f84e 2b04 	str.w	r2, [lr], #4
 800abde:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800abe2:	d2de      	bcs.n	800aba2 <quorem+0x42>
 800abe4:	9b00      	ldr	r3, [sp, #0]
 800abe6:	58eb      	ldr	r3, [r5, r3]
 800abe8:	b92b      	cbnz	r3, 800abf6 <quorem+0x96>
 800abea:	9b01      	ldr	r3, [sp, #4]
 800abec:	3b04      	subs	r3, #4
 800abee:	429d      	cmp	r5, r3
 800abf0:	461a      	mov	r2, r3
 800abf2:	d32f      	bcc.n	800ac54 <quorem+0xf4>
 800abf4:	613c      	str	r4, [r7, #16]
 800abf6:	4638      	mov	r0, r7
 800abf8:	f001 fd0e 	bl	800c618 <__mcmp>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	db25      	blt.n	800ac4c <quorem+0xec>
 800ac00:	4629      	mov	r1, r5
 800ac02:	2000      	movs	r0, #0
 800ac04:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac08:	f8d1 c000 	ldr.w	ip, [r1]
 800ac0c:	fa1f fe82 	uxth.w	lr, r2
 800ac10:	fa1f f38c 	uxth.w	r3, ip
 800ac14:	eba3 030e 	sub.w	r3, r3, lr
 800ac18:	4403      	add	r3, r0
 800ac1a:	0c12      	lsrs	r2, r2, #16
 800ac1c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ac20:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac2a:	45c1      	cmp	r9, r8
 800ac2c:	f841 3b04 	str.w	r3, [r1], #4
 800ac30:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac34:	d2e6      	bcs.n	800ac04 <quorem+0xa4>
 800ac36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac3e:	b922      	cbnz	r2, 800ac4a <quorem+0xea>
 800ac40:	3b04      	subs	r3, #4
 800ac42:	429d      	cmp	r5, r3
 800ac44:	461a      	mov	r2, r3
 800ac46:	d30b      	bcc.n	800ac60 <quorem+0x100>
 800ac48:	613c      	str	r4, [r7, #16]
 800ac4a:	3601      	adds	r6, #1
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	b003      	add	sp, #12
 800ac50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac54:	6812      	ldr	r2, [r2, #0]
 800ac56:	3b04      	subs	r3, #4
 800ac58:	2a00      	cmp	r2, #0
 800ac5a:	d1cb      	bne.n	800abf4 <quorem+0x94>
 800ac5c:	3c01      	subs	r4, #1
 800ac5e:	e7c6      	b.n	800abee <quorem+0x8e>
 800ac60:	6812      	ldr	r2, [r2, #0]
 800ac62:	3b04      	subs	r3, #4
 800ac64:	2a00      	cmp	r2, #0
 800ac66:	d1ef      	bne.n	800ac48 <quorem+0xe8>
 800ac68:	3c01      	subs	r4, #1
 800ac6a:	e7ea      	b.n	800ac42 <quorem+0xe2>
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	e7ee      	b.n	800ac4e <quorem+0xee>

0800ac70 <_dtoa_r>:
 800ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac74:	69c7      	ldr	r7, [r0, #28]
 800ac76:	b099      	sub	sp, #100	@ 0x64
 800ac78:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ac7c:	ec55 4b10 	vmov	r4, r5, d0
 800ac80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ac82:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac84:	4683      	mov	fp, r0
 800ac86:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac88:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac8a:	b97f      	cbnz	r7, 800acac <_dtoa_r+0x3c>
 800ac8c:	2010      	movs	r0, #16
 800ac8e:	f001 f937 	bl	800bf00 <malloc>
 800ac92:	4602      	mov	r2, r0
 800ac94:	f8cb 001c 	str.w	r0, [fp, #28]
 800ac98:	b920      	cbnz	r0, 800aca4 <_dtoa_r+0x34>
 800ac9a:	4ba7      	ldr	r3, [pc, #668]	@ (800af38 <_dtoa_r+0x2c8>)
 800ac9c:	21ef      	movs	r1, #239	@ 0xef
 800ac9e:	48a7      	ldr	r0, [pc, #668]	@ (800af3c <_dtoa_r+0x2cc>)
 800aca0:	f002 f8e2 	bl	800ce68 <__assert_func>
 800aca4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aca8:	6007      	str	r7, [r0, #0]
 800acaa:	60c7      	str	r7, [r0, #12]
 800acac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800acb0:	6819      	ldr	r1, [r3, #0]
 800acb2:	b159      	cbz	r1, 800accc <_dtoa_r+0x5c>
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	604a      	str	r2, [r1, #4]
 800acb8:	2301      	movs	r3, #1
 800acba:	4093      	lsls	r3, r2
 800acbc:	608b      	str	r3, [r1, #8]
 800acbe:	4658      	mov	r0, fp
 800acc0:	f001 fa26 	bl	800c110 <_Bfree>
 800acc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800acc8:	2200      	movs	r2, #0
 800acca:	601a      	str	r2, [r3, #0]
 800accc:	1e2b      	subs	r3, r5, #0
 800acce:	bfb9      	ittee	lt
 800acd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800acd4:	9303      	strlt	r3, [sp, #12]
 800acd6:	2300      	movge	r3, #0
 800acd8:	6033      	strge	r3, [r6, #0]
 800acda:	9f03      	ldr	r7, [sp, #12]
 800acdc:	4b98      	ldr	r3, [pc, #608]	@ (800af40 <_dtoa_r+0x2d0>)
 800acde:	bfbc      	itt	lt
 800ace0:	2201      	movlt	r2, #1
 800ace2:	6032      	strlt	r2, [r6, #0]
 800ace4:	43bb      	bics	r3, r7
 800ace6:	d112      	bne.n	800ad0e <_dtoa_r+0x9e>
 800ace8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800acea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800acee:	6013      	str	r3, [r2, #0]
 800acf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800acf4:	4323      	orrs	r3, r4
 800acf6:	f000 854d 	beq.w	800b794 <_dtoa_r+0xb24>
 800acfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800acfc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800af54 <_dtoa_r+0x2e4>
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f000 854f 	beq.w	800b7a4 <_dtoa_r+0xb34>
 800ad06:	f10a 0303 	add.w	r3, sl, #3
 800ad0a:	f000 bd49 	b.w	800b7a0 <_dtoa_r+0xb30>
 800ad0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad12:	2200      	movs	r2, #0
 800ad14:	ec51 0b17 	vmov	r0, r1, d7
 800ad18:	2300      	movs	r3, #0
 800ad1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ad1e:	f7f5 fef3 	bl	8000b08 <__aeabi_dcmpeq>
 800ad22:	4680      	mov	r8, r0
 800ad24:	b158      	cbz	r0, 800ad3e <_dtoa_r+0xce>
 800ad26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad28:	2301      	movs	r3, #1
 800ad2a:	6013      	str	r3, [r2, #0]
 800ad2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad2e:	b113      	cbz	r3, 800ad36 <_dtoa_r+0xc6>
 800ad30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ad32:	4b84      	ldr	r3, [pc, #528]	@ (800af44 <_dtoa_r+0x2d4>)
 800ad34:	6013      	str	r3, [r2, #0]
 800ad36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800af58 <_dtoa_r+0x2e8>
 800ad3a:	f000 bd33 	b.w	800b7a4 <_dtoa_r+0xb34>
 800ad3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ad42:	aa16      	add	r2, sp, #88	@ 0x58
 800ad44:	a917      	add	r1, sp, #92	@ 0x5c
 800ad46:	4658      	mov	r0, fp
 800ad48:	f001 fd86 	bl	800c858 <__d2b>
 800ad4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ad50:	4681      	mov	r9, r0
 800ad52:	2e00      	cmp	r6, #0
 800ad54:	d077      	beq.n	800ae46 <_dtoa_r+0x1d6>
 800ad56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ad5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ad68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ad6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ad70:	4619      	mov	r1, r3
 800ad72:	2200      	movs	r2, #0
 800ad74:	4b74      	ldr	r3, [pc, #464]	@ (800af48 <_dtoa_r+0x2d8>)
 800ad76:	f7f5 faa7 	bl	80002c8 <__aeabi_dsub>
 800ad7a:	a369      	add	r3, pc, #420	@ (adr r3, 800af20 <_dtoa_r+0x2b0>)
 800ad7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad80:	f7f5 fc5a 	bl	8000638 <__aeabi_dmul>
 800ad84:	a368      	add	r3, pc, #416	@ (adr r3, 800af28 <_dtoa_r+0x2b8>)
 800ad86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8a:	f7f5 fa9f 	bl	80002cc <__adddf3>
 800ad8e:	4604      	mov	r4, r0
 800ad90:	4630      	mov	r0, r6
 800ad92:	460d      	mov	r5, r1
 800ad94:	f7f5 fbe6 	bl	8000564 <__aeabi_i2d>
 800ad98:	a365      	add	r3, pc, #404	@ (adr r3, 800af30 <_dtoa_r+0x2c0>)
 800ad9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9e:	f7f5 fc4b 	bl	8000638 <__aeabi_dmul>
 800ada2:	4602      	mov	r2, r0
 800ada4:	460b      	mov	r3, r1
 800ada6:	4620      	mov	r0, r4
 800ada8:	4629      	mov	r1, r5
 800adaa:	f7f5 fa8f 	bl	80002cc <__adddf3>
 800adae:	4604      	mov	r4, r0
 800adb0:	460d      	mov	r5, r1
 800adb2:	f7f5 fef1 	bl	8000b98 <__aeabi_d2iz>
 800adb6:	2200      	movs	r2, #0
 800adb8:	4607      	mov	r7, r0
 800adba:	2300      	movs	r3, #0
 800adbc:	4620      	mov	r0, r4
 800adbe:	4629      	mov	r1, r5
 800adc0:	f7f5 feac 	bl	8000b1c <__aeabi_dcmplt>
 800adc4:	b140      	cbz	r0, 800add8 <_dtoa_r+0x168>
 800adc6:	4638      	mov	r0, r7
 800adc8:	f7f5 fbcc 	bl	8000564 <__aeabi_i2d>
 800adcc:	4622      	mov	r2, r4
 800adce:	462b      	mov	r3, r5
 800add0:	f7f5 fe9a 	bl	8000b08 <__aeabi_dcmpeq>
 800add4:	b900      	cbnz	r0, 800add8 <_dtoa_r+0x168>
 800add6:	3f01      	subs	r7, #1
 800add8:	2f16      	cmp	r7, #22
 800adda:	d851      	bhi.n	800ae80 <_dtoa_r+0x210>
 800addc:	4b5b      	ldr	r3, [pc, #364]	@ (800af4c <_dtoa_r+0x2dc>)
 800adde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ade2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adea:	f7f5 fe97 	bl	8000b1c <__aeabi_dcmplt>
 800adee:	2800      	cmp	r0, #0
 800adf0:	d048      	beq.n	800ae84 <_dtoa_r+0x214>
 800adf2:	3f01      	subs	r7, #1
 800adf4:	2300      	movs	r3, #0
 800adf6:	9312      	str	r3, [sp, #72]	@ 0x48
 800adf8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800adfa:	1b9b      	subs	r3, r3, r6
 800adfc:	1e5a      	subs	r2, r3, #1
 800adfe:	bf44      	itt	mi
 800ae00:	f1c3 0801 	rsbmi	r8, r3, #1
 800ae04:	2300      	movmi	r3, #0
 800ae06:	9208      	str	r2, [sp, #32]
 800ae08:	bf54      	ite	pl
 800ae0a:	f04f 0800 	movpl.w	r8, #0
 800ae0e:	9308      	strmi	r3, [sp, #32]
 800ae10:	2f00      	cmp	r7, #0
 800ae12:	db39      	blt.n	800ae88 <_dtoa_r+0x218>
 800ae14:	9b08      	ldr	r3, [sp, #32]
 800ae16:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ae18:	443b      	add	r3, r7
 800ae1a:	9308      	str	r3, [sp, #32]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae22:	2b09      	cmp	r3, #9
 800ae24:	d864      	bhi.n	800aef0 <_dtoa_r+0x280>
 800ae26:	2b05      	cmp	r3, #5
 800ae28:	bfc4      	itt	gt
 800ae2a:	3b04      	subgt	r3, #4
 800ae2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ae2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae30:	f1a3 0302 	sub.w	r3, r3, #2
 800ae34:	bfcc      	ite	gt
 800ae36:	2400      	movgt	r4, #0
 800ae38:	2401      	movle	r4, #1
 800ae3a:	2b03      	cmp	r3, #3
 800ae3c:	d863      	bhi.n	800af06 <_dtoa_r+0x296>
 800ae3e:	e8df f003 	tbb	[pc, r3]
 800ae42:	372a      	.short	0x372a
 800ae44:	5535      	.short	0x5535
 800ae46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ae4a:	441e      	add	r6, r3
 800ae4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ae50:	2b20      	cmp	r3, #32
 800ae52:	bfc1      	itttt	gt
 800ae54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ae58:	409f      	lslgt	r7, r3
 800ae5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ae5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ae62:	bfd6      	itet	le
 800ae64:	f1c3 0320 	rsble	r3, r3, #32
 800ae68:	ea47 0003 	orrgt.w	r0, r7, r3
 800ae6c:	fa04 f003 	lslle.w	r0, r4, r3
 800ae70:	f7f5 fb68 	bl	8000544 <__aeabi_ui2d>
 800ae74:	2201      	movs	r2, #1
 800ae76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ae7a:	3e01      	subs	r6, #1
 800ae7c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ae7e:	e777      	b.n	800ad70 <_dtoa_r+0x100>
 800ae80:	2301      	movs	r3, #1
 800ae82:	e7b8      	b.n	800adf6 <_dtoa_r+0x186>
 800ae84:	9012      	str	r0, [sp, #72]	@ 0x48
 800ae86:	e7b7      	b.n	800adf8 <_dtoa_r+0x188>
 800ae88:	427b      	negs	r3, r7
 800ae8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	eba8 0807 	sub.w	r8, r8, r7
 800ae92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae94:	e7c4      	b.n	800ae20 <_dtoa_r+0x1b0>
 800ae96:	2300      	movs	r3, #0
 800ae98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	dc35      	bgt.n	800af0c <_dtoa_r+0x29c>
 800aea0:	2301      	movs	r3, #1
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	9307      	str	r3, [sp, #28]
 800aea6:	461a      	mov	r2, r3
 800aea8:	920e      	str	r2, [sp, #56]	@ 0x38
 800aeaa:	e00b      	b.n	800aec4 <_dtoa_r+0x254>
 800aeac:	2301      	movs	r3, #1
 800aeae:	e7f3      	b.n	800ae98 <_dtoa_r+0x228>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aeb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aeb6:	18fb      	adds	r3, r7, r3
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	3301      	adds	r3, #1
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	9307      	str	r3, [sp, #28]
 800aec0:	bfb8      	it	lt
 800aec2:	2301      	movlt	r3, #1
 800aec4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aec8:	2100      	movs	r1, #0
 800aeca:	2204      	movs	r2, #4
 800aecc:	f102 0514 	add.w	r5, r2, #20
 800aed0:	429d      	cmp	r5, r3
 800aed2:	d91f      	bls.n	800af14 <_dtoa_r+0x2a4>
 800aed4:	6041      	str	r1, [r0, #4]
 800aed6:	4658      	mov	r0, fp
 800aed8:	f001 f8da 	bl	800c090 <_Balloc>
 800aedc:	4682      	mov	sl, r0
 800aede:	2800      	cmp	r0, #0
 800aee0:	d13c      	bne.n	800af5c <_dtoa_r+0x2ec>
 800aee2:	4b1b      	ldr	r3, [pc, #108]	@ (800af50 <_dtoa_r+0x2e0>)
 800aee4:	4602      	mov	r2, r0
 800aee6:	f240 11af 	movw	r1, #431	@ 0x1af
 800aeea:	e6d8      	b.n	800ac9e <_dtoa_r+0x2e>
 800aeec:	2301      	movs	r3, #1
 800aeee:	e7e0      	b.n	800aeb2 <_dtoa_r+0x242>
 800aef0:	2401      	movs	r4, #1
 800aef2:	2300      	movs	r3, #0
 800aef4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aef6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aef8:	f04f 33ff 	mov.w	r3, #4294967295
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	9307      	str	r3, [sp, #28]
 800af00:	2200      	movs	r2, #0
 800af02:	2312      	movs	r3, #18
 800af04:	e7d0      	b.n	800aea8 <_dtoa_r+0x238>
 800af06:	2301      	movs	r3, #1
 800af08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af0a:	e7f5      	b.n	800aef8 <_dtoa_r+0x288>
 800af0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	9307      	str	r3, [sp, #28]
 800af12:	e7d7      	b.n	800aec4 <_dtoa_r+0x254>
 800af14:	3101      	adds	r1, #1
 800af16:	0052      	lsls	r2, r2, #1
 800af18:	e7d8      	b.n	800aecc <_dtoa_r+0x25c>
 800af1a:	bf00      	nop
 800af1c:	f3af 8000 	nop.w
 800af20:	636f4361 	.word	0x636f4361
 800af24:	3fd287a7 	.word	0x3fd287a7
 800af28:	8b60c8b3 	.word	0x8b60c8b3
 800af2c:	3fc68a28 	.word	0x3fc68a28
 800af30:	509f79fb 	.word	0x509f79fb
 800af34:	3fd34413 	.word	0x3fd34413
 800af38:	0800d85a 	.word	0x0800d85a
 800af3c:	0800d871 	.word	0x0800d871
 800af40:	7ff00000 	.word	0x7ff00000
 800af44:	0800d822 	.word	0x0800d822
 800af48:	3ff80000 	.word	0x3ff80000
 800af4c:	0800d9c8 	.word	0x0800d9c8
 800af50:	0800d8c9 	.word	0x0800d8c9
 800af54:	0800d856 	.word	0x0800d856
 800af58:	0800d821 	.word	0x0800d821
 800af5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af60:	6018      	str	r0, [r3, #0]
 800af62:	9b07      	ldr	r3, [sp, #28]
 800af64:	2b0e      	cmp	r3, #14
 800af66:	f200 80a4 	bhi.w	800b0b2 <_dtoa_r+0x442>
 800af6a:	2c00      	cmp	r4, #0
 800af6c:	f000 80a1 	beq.w	800b0b2 <_dtoa_r+0x442>
 800af70:	2f00      	cmp	r7, #0
 800af72:	dd33      	ble.n	800afdc <_dtoa_r+0x36c>
 800af74:	4bad      	ldr	r3, [pc, #692]	@ (800b22c <_dtoa_r+0x5bc>)
 800af76:	f007 020f 	and.w	r2, r7, #15
 800af7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af7e:	ed93 7b00 	vldr	d7, [r3]
 800af82:	05f8      	lsls	r0, r7, #23
 800af84:	ed8d 7b04 	vstr	d7, [sp, #16]
 800af88:	ea4f 1427 	mov.w	r4, r7, asr #4
 800af8c:	d516      	bpl.n	800afbc <_dtoa_r+0x34c>
 800af8e:	4ba8      	ldr	r3, [pc, #672]	@ (800b230 <_dtoa_r+0x5c0>)
 800af90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af98:	f7f5 fc78 	bl	800088c <__aeabi_ddiv>
 800af9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afa0:	f004 040f 	and.w	r4, r4, #15
 800afa4:	2603      	movs	r6, #3
 800afa6:	4da2      	ldr	r5, [pc, #648]	@ (800b230 <_dtoa_r+0x5c0>)
 800afa8:	b954      	cbnz	r4, 800afc0 <_dtoa_r+0x350>
 800afaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afb2:	f7f5 fc6b 	bl	800088c <__aeabi_ddiv>
 800afb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afba:	e028      	b.n	800b00e <_dtoa_r+0x39e>
 800afbc:	2602      	movs	r6, #2
 800afbe:	e7f2      	b.n	800afa6 <_dtoa_r+0x336>
 800afc0:	07e1      	lsls	r1, r4, #31
 800afc2:	d508      	bpl.n	800afd6 <_dtoa_r+0x366>
 800afc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afcc:	f7f5 fb34 	bl	8000638 <__aeabi_dmul>
 800afd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afd4:	3601      	adds	r6, #1
 800afd6:	1064      	asrs	r4, r4, #1
 800afd8:	3508      	adds	r5, #8
 800afda:	e7e5      	b.n	800afa8 <_dtoa_r+0x338>
 800afdc:	f000 80d2 	beq.w	800b184 <_dtoa_r+0x514>
 800afe0:	427c      	negs	r4, r7
 800afe2:	4b92      	ldr	r3, [pc, #584]	@ (800b22c <_dtoa_r+0x5bc>)
 800afe4:	4d92      	ldr	r5, [pc, #584]	@ (800b230 <_dtoa_r+0x5c0>)
 800afe6:	f004 020f 	and.w	r2, r4, #15
 800afea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aff6:	f7f5 fb1f 	bl	8000638 <__aeabi_dmul>
 800affa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800affe:	1124      	asrs	r4, r4, #4
 800b000:	2300      	movs	r3, #0
 800b002:	2602      	movs	r6, #2
 800b004:	2c00      	cmp	r4, #0
 800b006:	f040 80b2 	bne.w	800b16e <_dtoa_r+0x4fe>
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1d3      	bne.n	800afb6 <_dtoa_r+0x346>
 800b00e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b010:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b014:	2b00      	cmp	r3, #0
 800b016:	f000 80b7 	beq.w	800b188 <_dtoa_r+0x518>
 800b01a:	4b86      	ldr	r3, [pc, #536]	@ (800b234 <_dtoa_r+0x5c4>)
 800b01c:	2200      	movs	r2, #0
 800b01e:	4620      	mov	r0, r4
 800b020:	4629      	mov	r1, r5
 800b022:	f7f5 fd7b 	bl	8000b1c <__aeabi_dcmplt>
 800b026:	2800      	cmp	r0, #0
 800b028:	f000 80ae 	beq.w	800b188 <_dtoa_r+0x518>
 800b02c:	9b07      	ldr	r3, [sp, #28]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	f000 80aa 	beq.w	800b188 <_dtoa_r+0x518>
 800b034:	9b00      	ldr	r3, [sp, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	dd37      	ble.n	800b0aa <_dtoa_r+0x43a>
 800b03a:	1e7b      	subs	r3, r7, #1
 800b03c:	9304      	str	r3, [sp, #16]
 800b03e:	4620      	mov	r0, r4
 800b040:	4b7d      	ldr	r3, [pc, #500]	@ (800b238 <_dtoa_r+0x5c8>)
 800b042:	2200      	movs	r2, #0
 800b044:	4629      	mov	r1, r5
 800b046:	f7f5 faf7 	bl	8000638 <__aeabi_dmul>
 800b04a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b04e:	9c00      	ldr	r4, [sp, #0]
 800b050:	3601      	adds	r6, #1
 800b052:	4630      	mov	r0, r6
 800b054:	f7f5 fa86 	bl	8000564 <__aeabi_i2d>
 800b058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b05c:	f7f5 faec 	bl	8000638 <__aeabi_dmul>
 800b060:	4b76      	ldr	r3, [pc, #472]	@ (800b23c <_dtoa_r+0x5cc>)
 800b062:	2200      	movs	r2, #0
 800b064:	f7f5 f932 	bl	80002cc <__adddf3>
 800b068:	4605      	mov	r5, r0
 800b06a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b06e:	2c00      	cmp	r4, #0
 800b070:	f040 808d 	bne.w	800b18e <_dtoa_r+0x51e>
 800b074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b078:	4b71      	ldr	r3, [pc, #452]	@ (800b240 <_dtoa_r+0x5d0>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	f7f5 f924 	bl	80002c8 <__aeabi_dsub>
 800b080:	4602      	mov	r2, r0
 800b082:	460b      	mov	r3, r1
 800b084:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b088:	462a      	mov	r2, r5
 800b08a:	4633      	mov	r3, r6
 800b08c:	f7f5 fd64 	bl	8000b58 <__aeabi_dcmpgt>
 800b090:	2800      	cmp	r0, #0
 800b092:	f040 828b 	bne.w	800b5ac <_dtoa_r+0x93c>
 800b096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b09a:	462a      	mov	r2, r5
 800b09c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b0a0:	f7f5 fd3c 	bl	8000b1c <__aeabi_dcmplt>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	f040 8128 	bne.w	800b2fa <_dtoa_r+0x68a>
 800b0aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b0ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b0b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f2c0 815a 	blt.w	800b36e <_dtoa_r+0x6fe>
 800b0ba:	2f0e      	cmp	r7, #14
 800b0bc:	f300 8157 	bgt.w	800b36e <_dtoa_r+0x6fe>
 800b0c0:	4b5a      	ldr	r3, [pc, #360]	@ (800b22c <_dtoa_r+0x5bc>)
 800b0c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b0c6:	ed93 7b00 	vldr	d7, [r3]
 800b0ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	ed8d 7b00 	vstr	d7, [sp]
 800b0d2:	da03      	bge.n	800b0dc <_dtoa_r+0x46c>
 800b0d4:	9b07      	ldr	r3, [sp, #28]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	f340 8101 	ble.w	800b2de <_dtoa_r+0x66e>
 800b0dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b0e0:	4656      	mov	r6, sl
 800b0e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	f7f5 fbcf 	bl	800088c <__aeabi_ddiv>
 800b0ee:	f7f5 fd53 	bl	8000b98 <__aeabi_d2iz>
 800b0f2:	4680      	mov	r8, r0
 800b0f4:	f7f5 fa36 	bl	8000564 <__aeabi_i2d>
 800b0f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0fc:	f7f5 fa9c 	bl	8000638 <__aeabi_dmul>
 800b100:	4602      	mov	r2, r0
 800b102:	460b      	mov	r3, r1
 800b104:	4620      	mov	r0, r4
 800b106:	4629      	mov	r1, r5
 800b108:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b10c:	f7f5 f8dc 	bl	80002c8 <__aeabi_dsub>
 800b110:	f806 4b01 	strb.w	r4, [r6], #1
 800b114:	9d07      	ldr	r5, [sp, #28]
 800b116:	eba6 040a 	sub.w	r4, r6, sl
 800b11a:	42a5      	cmp	r5, r4
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	f040 8117 	bne.w	800b352 <_dtoa_r+0x6e2>
 800b124:	f7f5 f8d2 	bl	80002cc <__adddf3>
 800b128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b12c:	4604      	mov	r4, r0
 800b12e:	460d      	mov	r5, r1
 800b130:	f7f5 fd12 	bl	8000b58 <__aeabi_dcmpgt>
 800b134:	2800      	cmp	r0, #0
 800b136:	f040 80f9 	bne.w	800b32c <_dtoa_r+0x6bc>
 800b13a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b13e:	4620      	mov	r0, r4
 800b140:	4629      	mov	r1, r5
 800b142:	f7f5 fce1 	bl	8000b08 <__aeabi_dcmpeq>
 800b146:	b118      	cbz	r0, 800b150 <_dtoa_r+0x4e0>
 800b148:	f018 0f01 	tst.w	r8, #1
 800b14c:	f040 80ee 	bne.w	800b32c <_dtoa_r+0x6bc>
 800b150:	4649      	mov	r1, r9
 800b152:	4658      	mov	r0, fp
 800b154:	f000 ffdc 	bl	800c110 <_Bfree>
 800b158:	2300      	movs	r3, #0
 800b15a:	7033      	strb	r3, [r6, #0]
 800b15c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b15e:	3701      	adds	r7, #1
 800b160:	601f      	str	r7, [r3, #0]
 800b162:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b164:	2b00      	cmp	r3, #0
 800b166:	f000 831d 	beq.w	800b7a4 <_dtoa_r+0xb34>
 800b16a:	601e      	str	r6, [r3, #0]
 800b16c:	e31a      	b.n	800b7a4 <_dtoa_r+0xb34>
 800b16e:	07e2      	lsls	r2, r4, #31
 800b170:	d505      	bpl.n	800b17e <_dtoa_r+0x50e>
 800b172:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b176:	f7f5 fa5f 	bl	8000638 <__aeabi_dmul>
 800b17a:	3601      	adds	r6, #1
 800b17c:	2301      	movs	r3, #1
 800b17e:	1064      	asrs	r4, r4, #1
 800b180:	3508      	adds	r5, #8
 800b182:	e73f      	b.n	800b004 <_dtoa_r+0x394>
 800b184:	2602      	movs	r6, #2
 800b186:	e742      	b.n	800b00e <_dtoa_r+0x39e>
 800b188:	9c07      	ldr	r4, [sp, #28]
 800b18a:	9704      	str	r7, [sp, #16]
 800b18c:	e761      	b.n	800b052 <_dtoa_r+0x3e2>
 800b18e:	4b27      	ldr	r3, [pc, #156]	@ (800b22c <_dtoa_r+0x5bc>)
 800b190:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b192:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b196:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b19a:	4454      	add	r4, sl
 800b19c:	2900      	cmp	r1, #0
 800b19e:	d053      	beq.n	800b248 <_dtoa_r+0x5d8>
 800b1a0:	4928      	ldr	r1, [pc, #160]	@ (800b244 <_dtoa_r+0x5d4>)
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	f7f5 fb72 	bl	800088c <__aeabi_ddiv>
 800b1a8:	4633      	mov	r3, r6
 800b1aa:	462a      	mov	r2, r5
 800b1ac:	f7f5 f88c 	bl	80002c8 <__aeabi_dsub>
 800b1b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b1b4:	4656      	mov	r6, sl
 800b1b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1ba:	f7f5 fced 	bl	8000b98 <__aeabi_d2iz>
 800b1be:	4605      	mov	r5, r0
 800b1c0:	f7f5 f9d0 	bl	8000564 <__aeabi_i2d>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1cc:	f7f5 f87c 	bl	80002c8 <__aeabi_dsub>
 800b1d0:	3530      	adds	r5, #48	@ 0x30
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1da:	f806 5b01 	strb.w	r5, [r6], #1
 800b1de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b1e2:	f7f5 fc9b 	bl	8000b1c <__aeabi_dcmplt>
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	d171      	bne.n	800b2ce <_dtoa_r+0x65e>
 800b1ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1ee:	4911      	ldr	r1, [pc, #68]	@ (800b234 <_dtoa_r+0x5c4>)
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	f7f5 f869 	bl	80002c8 <__aeabi_dsub>
 800b1f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b1fa:	f7f5 fc8f 	bl	8000b1c <__aeabi_dcmplt>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	f040 8095 	bne.w	800b32e <_dtoa_r+0x6be>
 800b204:	42a6      	cmp	r6, r4
 800b206:	f43f af50 	beq.w	800b0aa <_dtoa_r+0x43a>
 800b20a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b20e:	4b0a      	ldr	r3, [pc, #40]	@ (800b238 <_dtoa_r+0x5c8>)
 800b210:	2200      	movs	r2, #0
 800b212:	f7f5 fa11 	bl	8000638 <__aeabi_dmul>
 800b216:	4b08      	ldr	r3, [pc, #32]	@ (800b238 <_dtoa_r+0x5c8>)
 800b218:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b21c:	2200      	movs	r2, #0
 800b21e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b222:	f7f5 fa09 	bl	8000638 <__aeabi_dmul>
 800b226:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b22a:	e7c4      	b.n	800b1b6 <_dtoa_r+0x546>
 800b22c:	0800d9c8 	.word	0x0800d9c8
 800b230:	0800d9a0 	.word	0x0800d9a0
 800b234:	3ff00000 	.word	0x3ff00000
 800b238:	40240000 	.word	0x40240000
 800b23c:	401c0000 	.word	0x401c0000
 800b240:	40140000 	.word	0x40140000
 800b244:	3fe00000 	.word	0x3fe00000
 800b248:	4631      	mov	r1, r6
 800b24a:	4628      	mov	r0, r5
 800b24c:	f7f5 f9f4 	bl	8000638 <__aeabi_dmul>
 800b250:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b254:	9415      	str	r4, [sp, #84]	@ 0x54
 800b256:	4656      	mov	r6, sl
 800b258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b25c:	f7f5 fc9c 	bl	8000b98 <__aeabi_d2iz>
 800b260:	4605      	mov	r5, r0
 800b262:	f7f5 f97f 	bl	8000564 <__aeabi_i2d>
 800b266:	4602      	mov	r2, r0
 800b268:	460b      	mov	r3, r1
 800b26a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b26e:	f7f5 f82b 	bl	80002c8 <__aeabi_dsub>
 800b272:	3530      	adds	r5, #48	@ 0x30
 800b274:	f806 5b01 	strb.w	r5, [r6], #1
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	42a6      	cmp	r6, r4
 800b27e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b282:	f04f 0200 	mov.w	r2, #0
 800b286:	d124      	bne.n	800b2d2 <_dtoa_r+0x662>
 800b288:	4bac      	ldr	r3, [pc, #688]	@ (800b53c <_dtoa_r+0x8cc>)
 800b28a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b28e:	f7f5 f81d 	bl	80002cc <__adddf3>
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b29a:	f7f5 fc5d 	bl	8000b58 <__aeabi_dcmpgt>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d145      	bne.n	800b32e <_dtoa_r+0x6be>
 800b2a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b2a6:	49a5      	ldr	r1, [pc, #660]	@ (800b53c <_dtoa_r+0x8cc>)
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	f7f5 f80d 	bl	80002c8 <__aeabi_dsub>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2b6:	f7f5 fc31 	bl	8000b1c <__aeabi_dcmplt>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	f43f aef5 	beq.w	800b0aa <_dtoa_r+0x43a>
 800b2c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b2c2:	1e73      	subs	r3, r6, #1
 800b2c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b2c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2ca:	2b30      	cmp	r3, #48	@ 0x30
 800b2cc:	d0f8      	beq.n	800b2c0 <_dtoa_r+0x650>
 800b2ce:	9f04      	ldr	r7, [sp, #16]
 800b2d0:	e73e      	b.n	800b150 <_dtoa_r+0x4e0>
 800b2d2:	4b9b      	ldr	r3, [pc, #620]	@ (800b540 <_dtoa_r+0x8d0>)
 800b2d4:	f7f5 f9b0 	bl	8000638 <__aeabi_dmul>
 800b2d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2dc:	e7bc      	b.n	800b258 <_dtoa_r+0x5e8>
 800b2de:	d10c      	bne.n	800b2fa <_dtoa_r+0x68a>
 800b2e0:	4b98      	ldr	r3, [pc, #608]	@ (800b544 <_dtoa_r+0x8d4>)
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2e8:	f7f5 f9a6 	bl	8000638 <__aeabi_dmul>
 800b2ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2f0:	f7f5 fc28 	bl	8000b44 <__aeabi_dcmpge>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	f000 8157 	beq.w	800b5a8 <_dtoa_r+0x938>
 800b2fa:	2400      	movs	r4, #0
 800b2fc:	4625      	mov	r5, r4
 800b2fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b300:	43db      	mvns	r3, r3
 800b302:	9304      	str	r3, [sp, #16]
 800b304:	4656      	mov	r6, sl
 800b306:	2700      	movs	r7, #0
 800b308:	4621      	mov	r1, r4
 800b30a:	4658      	mov	r0, fp
 800b30c:	f000 ff00 	bl	800c110 <_Bfree>
 800b310:	2d00      	cmp	r5, #0
 800b312:	d0dc      	beq.n	800b2ce <_dtoa_r+0x65e>
 800b314:	b12f      	cbz	r7, 800b322 <_dtoa_r+0x6b2>
 800b316:	42af      	cmp	r7, r5
 800b318:	d003      	beq.n	800b322 <_dtoa_r+0x6b2>
 800b31a:	4639      	mov	r1, r7
 800b31c:	4658      	mov	r0, fp
 800b31e:	f000 fef7 	bl	800c110 <_Bfree>
 800b322:	4629      	mov	r1, r5
 800b324:	4658      	mov	r0, fp
 800b326:	f000 fef3 	bl	800c110 <_Bfree>
 800b32a:	e7d0      	b.n	800b2ce <_dtoa_r+0x65e>
 800b32c:	9704      	str	r7, [sp, #16]
 800b32e:	4633      	mov	r3, r6
 800b330:	461e      	mov	r6, r3
 800b332:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b336:	2a39      	cmp	r2, #57	@ 0x39
 800b338:	d107      	bne.n	800b34a <_dtoa_r+0x6da>
 800b33a:	459a      	cmp	sl, r3
 800b33c:	d1f8      	bne.n	800b330 <_dtoa_r+0x6c0>
 800b33e:	9a04      	ldr	r2, [sp, #16]
 800b340:	3201      	adds	r2, #1
 800b342:	9204      	str	r2, [sp, #16]
 800b344:	2230      	movs	r2, #48	@ 0x30
 800b346:	f88a 2000 	strb.w	r2, [sl]
 800b34a:	781a      	ldrb	r2, [r3, #0]
 800b34c:	3201      	adds	r2, #1
 800b34e:	701a      	strb	r2, [r3, #0]
 800b350:	e7bd      	b.n	800b2ce <_dtoa_r+0x65e>
 800b352:	4b7b      	ldr	r3, [pc, #492]	@ (800b540 <_dtoa_r+0x8d0>)
 800b354:	2200      	movs	r2, #0
 800b356:	f7f5 f96f 	bl	8000638 <__aeabi_dmul>
 800b35a:	2200      	movs	r2, #0
 800b35c:	2300      	movs	r3, #0
 800b35e:	4604      	mov	r4, r0
 800b360:	460d      	mov	r5, r1
 800b362:	f7f5 fbd1 	bl	8000b08 <__aeabi_dcmpeq>
 800b366:	2800      	cmp	r0, #0
 800b368:	f43f aebb 	beq.w	800b0e2 <_dtoa_r+0x472>
 800b36c:	e6f0      	b.n	800b150 <_dtoa_r+0x4e0>
 800b36e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b370:	2a00      	cmp	r2, #0
 800b372:	f000 80db 	beq.w	800b52c <_dtoa_r+0x8bc>
 800b376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b378:	2a01      	cmp	r2, #1
 800b37a:	f300 80bf 	bgt.w	800b4fc <_dtoa_r+0x88c>
 800b37e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b380:	2a00      	cmp	r2, #0
 800b382:	f000 80b7 	beq.w	800b4f4 <_dtoa_r+0x884>
 800b386:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b38a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b38c:	4646      	mov	r6, r8
 800b38e:	9a08      	ldr	r2, [sp, #32]
 800b390:	2101      	movs	r1, #1
 800b392:	441a      	add	r2, r3
 800b394:	4658      	mov	r0, fp
 800b396:	4498      	add	r8, r3
 800b398:	9208      	str	r2, [sp, #32]
 800b39a:	f000 ffb7 	bl	800c30c <__i2b>
 800b39e:	4605      	mov	r5, r0
 800b3a0:	b15e      	cbz	r6, 800b3ba <_dtoa_r+0x74a>
 800b3a2:	9b08      	ldr	r3, [sp, #32]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	dd08      	ble.n	800b3ba <_dtoa_r+0x74a>
 800b3a8:	42b3      	cmp	r3, r6
 800b3aa:	9a08      	ldr	r2, [sp, #32]
 800b3ac:	bfa8      	it	ge
 800b3ae:	4633      	movge	r3, r6
 800b3b0:	eba8 0803 	sub.w	r8, r8, r3
 800b3b4:	1af6      	subs	r6, r6, r3
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	9308      	str	r3, [sp, #32]
 800b3ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3bc:	b1f3      	cbz	r3, 800b3fc <_dtoa_r+0x78c>
 800b3be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 80b7 	beq.w	800b534 <_dtoa_r+0x8c4>
 800b3c6:	b18c      	cbz	r4, 800b3ec <_dtoa_r+0x77c>
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	4622      	mov	r2, r4
 800b3cc:	4658      	mov	r0, fp
 800b3ce:	f001 f85d 	bl	800c48c <__pow5mult>
 800b3d2:	464a      	mov	r2, r9
 800b3d4:	4601      	mov	r1, r0
 800b3d6:	4605      	mov	r5, r0
 800b3d8:	4658      	mov	r0, fp
 800b3da:	f000 ffad 	bl	800c338 <__multiply>
 800b3de:	4649      	mov	r1, r9
 800b3e0:	9004      	str	r0, [sp, #16]
 800b3e2:	4658      	mov	r0, fp
 800b3e4:	f000 fe94 	bl	800c110 <_Bfree>
 800b3e8:	9b04      	ldr	r3, [sp, #16]
 800b3ea:	4699      	mov	r9, r3
 800b3ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3ee:	1b1a      	subs	r2, r3, r4
 800b3f0:	d004      	beq.n	800b3fc <_dtoa_r+0x78c>
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	4658      	mov	r0, fp
 800b3f6:	f001 f849 	bl	800c48c <__pow5mult>
 800b3fa:	4681      	mov	r9, r0
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	4658      	mov	r0, fp
 800b400:	f000 ff84 	bl	800c30c <__i2b>
 800b404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b406:	4604      	mov	r4, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 81cf 	beq.w	800b7ac <_dtoa_r+0xb3c>
 800b40e:	461a      	mov	r2, r3
 800b410:	4601      	mov	r1, r0
 800b412:	4658      	mov	r0, fp
 800b414:	f001 f83a 	bl	800c48c <__pow5mult>
 800b418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	4604      	mov	r4, r0
 800b41e:	f300 8095 	bgt.w	800b54c <_dtoa_r+0x8dc>
 800b422:	9b02      	ldr	r3, [sp, #8]
 800b424:	2b00      	cmp	r3, #0
 800b426:	f040 8087 	bne.w	800b538 <_dtoa_r+0x8c8>
 800b42a:	9b03      	ldr	r3, [sp, #12]
 800b42c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b430:	2b00      	cmp	r3, #0
 800b432:	f040 8089 	bne.w	800b548 <_dtoa_r+0x8d8>
 800b436:	9b03      	ldr	r3, [sp, #12]
 800b438:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b43c:	0d1b      	lsrs	r3, r3, #20
 800b43e:	051b      	lsls	r3, r3, #20
 800b440:	b12b      	cbz	r3, 800b44e <_dtoa_r+0x7de>
 800b442:	9b08      	ldr	r3, [sp, #32]
 800b444:	3301      	adds	r3, #1
 800b446:	9308      	str	r3, [sp, #32]
 800b448:	f108 0801 	add.w	r8, r8, #1
 800b44c:	2301      	movs	r3, #1
 800b44e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b450:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b452:	2b00      	cmp	r3, #0
 800b454:	f000 81b0 	beq.w	800b7b8 <_dtoa_r+0xb48>
 800b458:	6923      	ldr	r3, [r4, #16]
 800b45a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b45e:	6918      	ldr	r0, [r3, #16]
 800b460:	f000 ff08 	bl	800c274 <__hi0bits>
 800b464:	f1c0 0020 	rsb	r0, r0, #32
 800b468:	9b08      	ldr	r3, [sp, #32]
 800b46a:	4418      	add	r0, r3
 800b46c:	f010 001f 	ands.w	r0, r0, #31
 800b470:	d077      	beq.n	800b562 <_dtoa_r+0x8f2>
 800b472:	f1c0 0320 	rsb	r3, r0, #32
 800b476:	2b04      	cmp	r3, #4
 800b478:	dd6b      	ble.n	800b552 <_dtoa_r+0x8e2>
 800b47a:	9b08      	ldr	r3, [sp, #32]
 800b47c:	f1c0 001c 	rsb	r0, r0, #28
 800b480:	4403      	add	r3, r0
 800b482:	4480      	add	r8, r0
 800b484:	4406      	add	r6, r0
 800b486:	9308      	str	r3, [sp, #32]
 800b488:	f1b8 0f00 	cmp.w	r8, #0
 800b48c:	dd05      	ble.n	800b49a <_dtoa_r+0x82a>
 800b48e:	4649      	mov	r1, r9
 800b490:	4642      	mov	r2, r8
 800b492:	4658      	mov	r0, fp
 800b494:	f001 f854 	bl	800c540 <__lshift>
 800b498:	4681      	mov	r9, r0
 800b49a:	9b08      	ldr	r3, [sp, #32]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	dd05      	ble.n	800b4ac <_dtoa_r+0x83c>
 800b4a0:	4621      	mov	r1, r4
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	4658      	mov	r0, fp
 800b4a6:	f001 f84b 	bl	800c540 <__lshift>
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d059      	beq.n	800b566 <_dtoa_r+0x8f6>
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	4648      	mov	r0, r9
 800b4b6:	f001 f8af 	bl	800c618 <__mcmp>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	da53      	bge.n	800b566 <_dtoa_r+0x8f6>
 800b4be:	1e7b      	subs	r3, r7, #1
 800b4c0:	9304      	str	r3, [sp, #16]
 800b4c2:	4649      	mov	r1, r9
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	220a      	movs	r2, #10
 800b4c8:	4658      	mov	r0, fp
 800b4ca:	f000 fe43 	bl	800c154 <__multadd>
 800b4ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4d0:	4681      	mov	r9, r0
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f000 8172 	beq.w	800b7bc <_dtoa_r+0xb4c>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	4629      	mov	r1, r5
 800b4dc:	220a      	movs	r2, #10
 800b4de:	4658      	mov	r0, fp
 800b4e0:	f000 fe38 	bl	800c154 <__multadd>
 800b4e4:	9b00      	ldr	r3, [sp, #0]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	dc67      	bgt.n	800b5bc <_dtoa_r+0x94c>
 800b4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	dc41      	bgt.n	800b576 <_dtoa_r+0x906>
 800b4f2:	e063      	b.n	800b5bc <_dtoa_r+0x94c>
 800b4f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b4f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b4fa:	e746      	b.n	800b38a <_dtoa_r+0x71a>
 800b4fc:	9b07      	ldr	r3, [sp, #28]
 800b4fe:	1e5c      	subs	r4, r3, #1
 800b500:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b502:	42a3      	cmp	r3, r4
 800b504:	bfbf      	itttt	lt
 800b506:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b508:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b50a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b50c:	1ae3      	sublt	r3, r4, r3
 800b50e:	bfb4      	ite	lt
 800b510:	18d2      	addlt	r2, r2, r3
 800b512:	1b1c      	subge	r4, r3, r4
 800b514:	9b07      	ldr	r3, [sp, #28]
 800b516:	bfbc      	itt	lt
 800b518:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b51a:	2400      	movlt	r4, #0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bfb5      	itete	lt
 800b520:	eba8 0603 	sublt.w	r6, r8, r3
 800b524:	9b07      	ldrge	r3, [sp, #28]
 800b526:	2300      	movlt	r3, #0
 800b528:	4646      	movge	r6, r8
 800b52a:	e730      	b.n	800b38e <_dtoa_r+0x71e>
 800b52c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b52e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b530:	4646      	mov	r6, r8
 800b532:	e735      	b.n	800b3a0 <_dtoa_r+0x730>
 800b534:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b536:	e75c      	b.n	800b3f2 <_dtoa_r+0x782>
 800b538:	2300      	movs	r3, #0
 800b53a:	e788      	b.n	800b44e <_dtoa_r+0x7de>
 800b53c:	3fe00000 	.word	0x3fe00000
 800b540:	40240000 	.word	0x40240000
 800b544:	40140000 	.word	0x40140000
 800b548:	9b02      	ldr	r3, [sp, #8]
 800b54a:	e780      	b.n	800b44e <_dtoa_r+0x7de>
 800b54c:	2300      	movs	r3, #0
 800b54e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b550:	e782      	b.n	800b458 <_dtoa_r+0x7e8>
 800b552:	d099      	beq.n	800b488 <_dtoa_r+0x818>
 800b554:	9a08      	ldr	r2, [sp, #32]
 800b556:	331c      	adds	r3, #28
 800b558:	441a      	add	r2, r3
 800b55a:	4498      	add	r8, r3
 800b55c:	441e      	add	r6, r3
 800b55e:	9208      	str	r2, [sp, #32]
 800b560:	e792      	b.n	800b488 <_dtoa_r+0x818>
 800b562:	4603      	mov	r3, r0
 800b564:	e7f6      	b.n	800b554 <_dtoa_r+0x8e4>
 800b566:	9b07      	ldr	r3, [sp, #28]
 800b568:	9704      	str	r7, [sp, #16]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	dc20      	bgt.n	800b5b0 <_dtoa_r+0x940>
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b572:	2b02      	cmp	r3, #2
 800b574:	dd1e      	ble.n	800b5b4 <_dtoa_r+0x944>
 800b576:	9b00      	ldr	r3, [sp, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f47f aec0 	bne.w	800b2fe <_dtoa_r+0x68e>
 800b57e:	4621      	mov	r1, r4
 800b580:	2205      	movs	r2, #5
 800b582:	4658      	mov	r0, fp
 800b584:	f000 fde6 	bl	800c154 <__multadd>
 800b588:	4601      	mov	r1, r0
 800b58a:	4604      	mov	r4, r0
 800b58c:	4648      	mov	r0, r9
 800b58e:	f001 f843 	bl	800c618 <__mcmp>
 800b592:	2800      	cmp	r0, #0
 800b594:	f77f aeb3 	ble.w	800b2fe <_dtoa_r+0x68e>
 800b598:	4656      	mov	r6, sl
 800b59a:	2331      	movs	r3, #49	@ 0x31
 800b59c:	f806 3b01 	strb.w	r3, [r6], #1
 800b5a0:	9b04      	ldr	r3, [sp, #16]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	9304      	str	r3, [sp, #16]
 800b5a6:	e6ae      	b.n	800b306 <_dtoa_r+0x696>
 800b5a8:	9c07      	ldr	r4, [sp, #28]
 800b5aa:	9704      	str	r7, [sp, #16]
 800b5ac:	4625      	mov	r5, r4
 800b5ae:	e7f3      	b.n	800b598 <_dtoa_r+0x928>
 800b5b0:	9b07      	ldr	r3, [sp, #28]
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f000 8104 	beq.w	800b7c4 <_dtoa_r+0xb54>
 800b5bc:	2e00      	cmp	r6, #0
 800b5be:	dd05      	ble.n	800b5cc <_dtoa_r+0x95c>
 800b5c0:	4629      	mov	r1, r5
 800b5c2:	4632      	mov	r2, r6
 800b5c4:	4658      	mov	r0, fp
 800b5c6:	f000 ffbb 	bl	800c540 <__lshift>
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d05a      	beq.n	800b688 <_dtoa_r+0xa18>
 800b5d2:	6869      	ldr	r1, [r5, #4]
 800b5d4:	4658      	mov	r0, fp
 800b5d6:	f000 fd5b 	bl	800c090 <_Balloc>
 800b5da:	4606      	mov	r6, r0
 800b5dc:	b928      	cbnz	r0, 800b5ea <_dtoa_r+0x97a>
 800b5de:	4b84      	ldr	r3, [pc, #528]	@ (800b7f0 <_dtoa_r+0xb80>)
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b5e6:	f7ff bb5a 	b.w	800ac9e <_dtoa_r+0x2e>
 800b5ea:	692a      	ldr	r2, [r5, #16]
 800b5ec:	3202      	adds	r2, #2
 800b5ee:	0092      	lsls	r2, r2, #2
 800b5f0:	f105 010c 	add.w	r1, r5, #12
 800b5f4:	300c      	adds	r0, #12
 800b5f6:	f7ff fa9a 	bl	800ab2e <memcpy>
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	4658      	mov	r0, fp
 800b600:	f000 ff9e 	bl	800c540 <__lshift>
 800b604:	f10a 0301 	add.w	r3, sl, #1
 800b608:	9307      	str	r3, [sp, #28]
 800b60a:	9b00      	ldr	r3, [sp, #0]
 800b60c:	4453      	add	r3, sl
 800b60e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b610:	9b02      	ldr	r3, [sp, #8]
 800b612:	f003 0301 	and.w	r3, r3, #1
 800b616:	462f      	mov	r7, r5
 800b618:	930a      	str	r3, [sp, #40]	@ 0x28
 800b61a:	4605      	mov	r5, r0
 800b61c:	9b07      	ldr	r3, [sp, #28]
 800b61e:	4621      	mov	r1, r4
 800b620:	3b01      	subs	r3, #1
 800b622:	4648      	mov	r0, r9
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	f7ff fa9b 	bl	800ab60 <quorem>
 800b62a:	4639      	mov	r1, r7
 800b62c:	9002      	str	r0, [sp, #8]
 800b62e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b632:	4648      	mov	r0, r9
 800b634:	f000 fff0 	bl	800c618 <__mcmp>
 800b638:	462a      	mov	r2, r5
 800b63a:	9008      	str	r0, [sp, #32]
 800b63c:	4621      	mov	r1, r4
 800b63e:	4658      	mov	r0, fp
 800b640:	f001 f806 	bl	800c650 <__mdiff>
 800b644:	68c2      	ldr	r2, [r0, #12]
 800b646:	4606      	mov	r6, r0
 800b648:	bb02      	cbnz	r2, 800b68c <_dtoa_r+0xa1c>
 800b64a:	4601      	mov	r1, r0
 800b64c:	4648      	mov	r0, r9
 800b64e:	f000 ffe3 	bl	800c618 <__mcmp>
 800b652:	4602      	mov	r2, r0
 800b654:	4631      	mov	r1, r6
 800b656:	4658      	mov	r0, fp
 800b658:	920e      	str	r2, [sp, #56]	@ 0x38
 800b65a:	f000 fd59 	bl	800c110 <_Bfree>
 800b65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b660:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b662:	9e07      	ldr	r6, [sp, #28]
 800b664:	ea43 0102 	orr.w	r1, r3, r2
 800b668:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b66a:	4319      	orrs	r1, r3
 800b66c:	d110      	bne.n	800b690 <_dtoa_r+0xa20>
 800b66e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b672:	d029      	beq.n	800b6c8 <_dtoa_r+0xa58>
 800b674:	9b08      	ldr	r3, [sp, #32]
 800b676:	2b00      	cmp	r3, #0
 800b678:	dd02      	ble.n	800b680 <_dtoa_r+0xa10>
 800b67a:	9b02      	ldr	r3, [sp, #8]
 800b67c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b680:	9b00      	ldr	r3, [sp, #0]
 800b682:	f883 8000 	strb.w	r8, [r3]
 800b686:	e63f      	b.n	800b308 <_dtoa_r+0x698>
 800b688:	4628      	mov	r0, r5
 800b68a:	e7bb      	b.n	800b604 <_dtoa_r+0x994>
 800b68c:	2201      	movs	r2, #1
 800b68e:	e7e1      	b.n	800b654 <_dtoa_r+0x9e4>
 800b690:	9b08      	ldr	r3, [sp, #32]
 800b692:	2b00      	cmp	r3, #0
 800b694:	db04      	blt.n	800b6a0 <_dtoa_r+0xa30>
 800b696:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b698:	430b      	orrs	r3, r1
 800b69a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b69c:	430b      	orrs	r3, r1
 800b69e:	d120      	bne.n	800b6e2 <_dtoa_r+0xa72>
 800b6a0:	2a00      	cmp	r2, #0
 800b6a2:	dded      	ble.n	800b680 <_dtoa_r+0xa10>
 800b6a4:	4649      	mov	r1, r9
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	4658      	mov	r0, fp
 800b6aa:	f000 ff49 	bl	800c540 <__lshift>
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	4681      	mov	r9, r0
 800b6b2:	f000 ffb1 	bl	800c618 <__mcmp>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	dc03      	bgt.n	800b6c2 <_dtoa_r+0xa52>
 800b6ba:	d1e1      	bne.n	800b680 <_dtoa_r+0xa10>
 800b6bc:	f018 0f01 	tst.w	r8, #1
 800b6c0:	d0de      	beq.n	800b680 <_dtoa_r+0xa10>
 800b6c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b6c6:	d1d8      	bne.n	800b67a <_dtoa_r+0xa0a>
 800b6c8:	9a00      	ldr	r2, [sp, #0]
 800b6ca:	2339      	movs	r3, #57	@ 0x39
 800b6cc:	7013      	strb	r3, [r2, #0]
 800b6ce:	4633      	mov	r3, r6
 800b6d0:	461e      	mov	r6, r3
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b6d8:	2a39      	cmp	r2, #57	@ 0x39
 800b6da:	d052      	beq.n	800b782 <_dtoa_r+0xb12>
 800b6dc:	3201      	adds	r2, #1
 800b6de:	701a      	strb	r2, [r3, #0]
 800b6e0:	e612      	b.n	800b308 <_dtoa_r+0x698>
 800b6e2:	2a00      	cmp	r2, #0
 800b6e4:	dd07      	ble.n	800b6f6 <_dtoa_r+0xa86>
 800b6e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b6ea:	d0ed      	beq.n	800b6c8 <_dtoa_r+0xa58>
 800b6ec:	9a00      	ldr	r2, [sp, #0]
 800b6ee:	f108 0301 	add.w	r3, r8, #1
 800b6f2:	7013      	strb	r3, [r2, #0]
 800b6f4:	e608      	b.n	800b308 <_dtoa_r+0x698>
 800b6f6:	9b07      	ldr	r3, [sp, #28]
 800b6f8:	9a07      	ldr	r2, [sp, #28]
 800b6fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b6fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b700:	4293      	cmp	r3, r2
 800b702:	d028      	beq.n	800b756 <_dtoa_r+0xae6>
 800b704:	4649      	mov	r1, r9
 800b706:	2300      	movs	r3, #0
 800b708:	220a      	movs	r2, #10
 800b70a:	4658      	mov	r0, fp
 800b70c:	f000 fd22 	bl	800c154 <__multadd>
 800b710:	42af      	cmp	r7, r5
 800b712:	4681      	mov	r9, r0
 800b714:	f04f 0300 	mov.w	r3, #0
 800b718:	f04f 020a 	mov.w	r2, #10
 800b71c:	4639      	mov	r1, r7
 800b71e:	4658      	mov	r0, fp
 800b720:	d107      	bne.n	800b732 <_dtoa_r+0xac2>
 800b722:	f000 fd17 	bl	800c154 <__multadd>
 800b726:	4607      	mov	r7, r0
 800b728:	4605      	mov	r5, r0
 800b72a:	9b07      	ldr	r3, [sp, #28]
 800b72c:	3301      	adds	r3, #1
 800b72e:	9307      	str	r3, [sp, #28]
 800b730:	e774      	b.n	800b61c <_dtoa_r+0x9ac>
 800b732:	f000 fd0f 	bl	800c154 <__multadd>
 800b736:	4629      	mov	r1, r5
 800b738:	4607      	mov	r7, r0
 800b73a:	2300      	movs	r3, #0
 800b73c:	220a      	movs	r2, #10
 800b73e:	4658      	mov	r0, fp
 800b740:	f000 fd08 	bl	800c154 <__multadd>
 800b744:	4605      	mov	r5, r0
 800b746:	e7f0      	b.n	800b72a <_dtoa_r+0xaba>
 800b748:	9b00      	ldr	r3, [sp, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	bfcc      	ite	gt
 800b74e:	461e      	movgt	r6, r3
 800b750:	2601      	movle	r6, #1
 800b752:	4456      	add	r6, sl
 800b754:	2700      	movs	r7, #0
 800b756:	4649      	mov	r1, r9
 800b758:	2201      	movs	r2, #1
 800b75a:	4658      	mov	r0, fp
 800b75c:	f000 fef0 	bl	800c540 <__lshift>
 800b760:	4621      	mov	r1, r4
 800b762:	4681      	mov	r9, r0
 800b764:	f000 ff58 	bl	800c618 <__mcmp>
 800b768:	2800      	cmp	r0, #0
 800b76a:	dcb0      	bgt.n	800b6ce <_dtoa_r+0xa5e>
 800b76c:	d102      	bne.n	800b774 <_dtoa_r+0xb04>
 800b76e:	f018 0f01 	tst.w	r8, #1
 800b772:	d1ac      	bne.n	800b6ce <_dtoa_r+0xa5e>
 800b774:	4633      	mov	r3, r6
 800b776:	461e      	mov	r6, r3
 800b778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b77c:	2a30      	cmp	r2, #48	@ 0x30
 800b77e:	d0fa      	beq.n	800b776 <_dtoa_r+0xb06>
 800b780:	e5c2      	b.n	800b308 <_dtoa_r+0x698>
 800b782:	459a      	cmp	sl, r3
 800b784:	d1a4      	bne.n	800b6d0 <_dtoa_r+0xa60>
 800b786:	9b04      	ldr	r3, [sp, #16]
 800b788:	3301      	adds	r3, #1
 800b78a:	9304      	str	r3, [sp, #16]
 800b78c:	2331      	movs	r3, #49	@ 0x31
 800b78e:	f88a 3000 	strb.w	r3, [sl]
 800b792:	e5b9      	b.n	800b308 <_dtoa_r+0x698>
 800b794:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b796:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b7f4 <_dtoa_r+0xb84>
 800b79a:	b11b      	cbz	r3, 800b7a4 <_dtoa_r+0xb34>
 800b79c:	f10a 0308 	add.w	r3, sl, #8
 800b7a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b7a2:	6013      	str	r3, [r2, #0]
 800b7a4:	4650      	mov	r0, sl
 800b7a6:	b019      	add	sp, #100	@ 0x64
 800b7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	f77f ae37 	ble.w	800b422 <_dtoa_r+0x7b2>
 800b7b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7b8:	2001      	movs	r0, #1
 800b7ba:	e655      	b.n	800b468 <_dtoa_r+0x7f8>
 800b7bc:	9b00      	ldr	r3, [sp, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f77f aed6 	ble.w	800b570 <_dtoa_r+0x900>
 800b7c4:	4656      	mov	r6, sl
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4648      	mov	r0, r9
 800b7ca:	f7ff f9c9 	bl	800ab60 <quorem>
 800b7ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b7d2:	f806 8b01 	strb.w	r8, [r6], #1
 800b7d6:	9b00      	ldr	r3, [sp, #0]
 800b7d8:	eba6 020a 	sub.w	r2, r6, sl
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	ddb3      	ble.n	800b748 <_dtoa_r+0xad8>
 800b7e0:	4649      	mov	r1, r9
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	220a      	movs	r2, #10
 800b7e6:	4658      	mov	r0, fp
 800b7e8:	f000 fcb4 	bl	800c154 <__multadd>
 800b7ec:	4681      	mov	r9, r0
 800b7ee:	e7ea      	b.n	800b7c6 <_dtoa_r+0xb56>
 800b7f0:	0800d8c9 	.word	0x0800d8c9
 800b7f4:	0800d84d 	.word	0x0800d84d

0800b7f8 <_free_r>:
 800b7f8:	b538      	push	{r3, r4, r5, lr}
 800b7fa:	4605      	mov	r5, r0
 800b7fc:	2900      	cmp	r1, #0
 800b7fe:	d041      	beq.n	800b884 <_free_r+0x8c>
 800b800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b804:	1f0c      	subs	r4, r1, #4
 800b806:	2b00      	cmp	r3, #0
 800b808:	bfb8      	it	lt
 800b80a:	18e4      	addlt	r4, r4, r3
 800b80c:	f000 fc34 	bl	800c078 <__malloc_lock>
 800b810:	4a1d      	ldr	r2, [pc, #116]	@ (800b888 <_free_r+0x90>)
 800b812:	6813      	ldr	r3, [r2, #0]
 800b814:	b933      	cbnz	r3, 800b824 <_free_r+0x2c>
 800b816:	6063      	str	r3, [r4, #4]
 800b818:	6014      	str	r4, [r2, #0]
 800b81a:	4628      	mov	r0, r5
 800b81c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b820:	f000 bc30 	b.w	800c084 <__malloc_unlock>
 800b824:	42a3      	cmp	r3, r4
 800b826:	d908      	bls.n	800b83a <_free_r+0x42>
 800b828:	6820      	ldr	r0, [r4, #0]
 800b82a:	1821      	adds	r1, r4, r0
 800b82c:	428b      	cmp	r3, r1
 800b82e:	bf01      	itttt	eq
 800b830:	6819      	ldreq	r1, [r3, #0]
 800b832:	685b      	ldreq	r3, [r3, #4]
 800b834:	1809      	addeq	r1, r1, r0
 800b836:	6021      	streq	r1, [r4, #0]
 800b838:	e7ed      	b.n	800b816 <_free_r+0x1e>
 800b83a:	461a      	mov	r2, r3
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	b10b      	cbz	r3, 800b844 <_free_r+0x4c>
 800b840:	42a3      	cmp	r3, r4
 800b842:	d9fa      	bls.n	800b83a <_free_r+0x42>
 800b844:	6811      	ldr	r1, [r2, #0]
 800b846:	1850      	adds	r0, r2, r1
 800b848:	42a0      	cmp	r0, r4
 800b84a:	d10b      	bne.n	800b864 <_free_r+0x6c>
 800b84c:	6820      	ldr	r0, [r4, #0]
 800b84e:	4401      	add	r1, r0
 800b850:	1850      	adds	r0, r2, r1
 800b852:	4283      	cmp	r3, r0
 800b854:	6011      	str	r1, [r2, #0]
 800b856:	d1e0      	bne.n	800b81a <_free_r+0x22>
 800b858:	6818      	ldr	r0, [r3, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	6053      	str	r3, [r2, #4]
 800b85e:	4408      	add	r0, r1
 800b860:	6010      	str	r0, [r2, #0]
 800b862:	e7da      	b.n	800b81a <_free_r+0x22>
 800b864:	d902      	bls.n	800b86c <_free_r+0x74>
 800b866:	230c      	movs	r3, #12
 800b868:	602b      	str	r3, [r5, #0]
 800b86a:	e7d6      	b.n	800b81a <_free_r+0x22>
 800b86c:	6820      	ldr	r0, [r4, #0]
 800b86e:	1821      	adds	r1, r4, r0
 800b870:	428b      	cmp	r3, r1
 800b872:	bf04      	itt	eq
 800b874:	6819      	ldreq	r1, [r3, #0]
 800b876:	685b      	ldreq	r3, [r3, #4]
 800b878:	6063      	str	r3, [r4, #4]
 800b87a:	bf04      	itt	eq
 800b87c:	1809      	addeq	r1, r1, r0
 800b87e:	6021      	streq	r1, [r4, #0]
 800b880:	6054      	str	r4, [r2, #4]
 800b882:	e7ca      	b.n	800b81a <_free_r+0x22>
 800b884:	bd38      	pop	{r3, r4, r5, pc}
 800b886:	bf00      	nop
 800b888:	20000aac 	.word	0x20000aac

0800b88c <rshift>:
 800b88c:	6903      	ldr	r3, [r0, #16]
 800b88e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b892:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b896:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b89a:	f100 0414 	add.w	r4, r0, #20
 800b89e:	dd45      	ble.n	800b92c <rshift+0xa0>
 800b8a0:	f011 011f 	ands.w	r1, r1, #31
 800b8a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b8a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b8ac:	d10c      	bne.n	800b8c8 <rshift+0x3c>
 800b8ae:	f100 0710 	add.w	r7, r0, #16
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	42b1      	cmp	r1, r6
 800b8b6:	d334      	bcc.n	800b922 <rshift+0x96>
 800b8b8:	1a9b      	subs	r3, r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	1eea      	subs	r2, r5, #3
 800b8be:	4296      	cmp	r6, r2
 800b8c0:	bf38      	it	cc
 800b8c2:	2300      	movcc	r3, #0
 800b8c4:	4423      	add	r3, r4
 800b8c6:	e015      	b.n	800b8f4 <rshift+0x68>
 800b8c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b8cc:	f1c1 0820 	rsb	r8, r1, #32
 800b8d0:	40cf      	lsrs	r7, r1
 800b8d2:	f105 0e04 	add.w	lr, r5, #4
 800b8d6:	46a1      	mov	r9, r4
 800b8d8:	4576      	cmp	r6, lr
 800b8da:	46f4      	mov	ip, lr
 800b8dc:	d815      	bhi.n	800b90a <rshift+0x7e>
 800b8de:	1a9a      	subs	r2, r3, r2
 800b8e0:	0092      	lsls	r2, r2, #2
 800b8e2:	3a04      	subs	r2, #4
 800b8e4:	3501      	adds	r5, #1
 800b8e6:	42ae      	cmp	r6, r5
 800b8e8:	bf38      	it	cc
 800b8ea:	2200      	movcc	r2, #0
 800b8ec:	18a3      	adds	r3, r4, r2
 800b8ee:	50a7      	str	r7, [r4, r2]
 800b8f0:	b107      	cbz	r7, 800b8f4 <rshift+0x68>
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	1b1a      	subs	r2, r3, r4
 800b8f6:	42a3      	cmp	r3, r4
 800b8f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b8fc:	bf08      	it	eq
 800b8fe:	2300      	moveq	r3, #0
 800b900:	6102      	str	r2, [r0, #16]
 800b902:	bf08      	it	eq
 800b904:	6143      	streq	r3, [r0, #20]
 800b906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b90a:	f8dc c000 	ldr.w	ip, [ip]
 800b90e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b912:	ea4c 0707 	orr.w	r7, ip, r7
 800b916:	f849 7b04 	str.w	r7, [r9], #4
 800b91a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b91e:	40cf      	lsrs	r7, r1
 800b920:	e7da      	b.n	800b8d8 <rshift+0x4c>
 800b922:	f851 cb04 	ldr.w	ip, [r1], #4
 800b926:	f847 cf04 	str.w	ip, [r7, #4]!
 800b92a:	e7c3      	b.n	800b8b4 <rshift+0x28>
 800b92c:	4623      	mov	r3, r4
 800b92e:	e7e1      	b.n	800b8f4 <rshift+0x68>

0800b930 <__hexdig_fun>:
 800b930:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b934:	2b09      	cmp	r3, #9
 800b936:	d802      	bhi.n	800b93e <__hexdig_fun+0xe>
 800b938:	3820      	subs	r0, #32
 800b93a:	b2c0      	uxtb	r0, r0
 800b93c:	4770      	bx	lr
 800b93e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b942:	2b05      	cmp	r3, #5
 800b944:	d801      	bhi.n	800b94a <__hexdig_fun+0x1a>
 800b946:	3847      	subs	r0, #71	@ 0x47
 800b948:	e7f7      	b.n	800b93a <__hexdig_fun+0xa>
 800b94a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b94e:	2b05      	cmp	r3, #5
 800b950:	d801      	bhi.n	800b956 <__hexdig_fun+0x26>
 800b952:	3827      	subs	r0, #39	@ 0x27
 800b954:	e7f1      	b.n	800b93a <__hexdig_fun+0xa>
 800b956:	2000      	movs	r0, #0
 800b958:	4770      	bx	lr
	...

0800b95c <__gethex>:
 800b95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b960:	b085      	sub	sp, #20
 800b962:	468a      	mov	sl, r1
 800b964:	9302      	str	r3, [sp, #8]
 800b966:	680b      	ldr	r3, [r1, #0]
 800b968:	9001      	str	r0, [sp, #4]
 800b96a:	4690      	mov	r8, r2
 800b96c:	1c9c      	adds	r4, r3, #2
 800b96e:	46a1      	mov	r9, r4
 800b970:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b974:	2830      	cmp	r0, #48	@ 0x30
 800b976:	d0fa      	beq.n	800b96e <__gethex+0x12>
 800b978:	eba9 0303 	sub.w	r3, r9, r3
 800b97c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b980:	f7ff ffd6 	bl	800b930 <__hexdig_fun>
 800b984:	4605      	mov	r5, r0
 800b986:	2800      	cmp	r0, #0
 800b988:	d168      	bne.n	800ba5c <__gethex+0x100>
 800b98a:	49a0      	ldr	r1, [pc, #640]	@ (800bc0c <__gethex+0x2b0>)
 800b98c:	2201      	movs	r2, #1
 800b98e:	4648      	mov	r0, r9
 800b990:	f7ff f844 	bl	800aa1c <strncmp>
 800b994:	4607      	mov	r7, r0
 800b996:	2800      	cmp	r0, #0
 800b998:	d167      	bne.n	800ba6a <__gethex+0x10e>
 800b99a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b99e:	4626      	mov	r6, r4
 800b9a0:	f7ff ffc6 	bl	800b930 <__hexdig_fun>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d062      	beq.n	800ba6e <__gethex+0x112>
 800b9a8:	4623      	mov	r3, r4
 800b9aa:	7818      	ldrb	r0, [r3, #0]
 800b9ac:	2830      	cmp	r0, #48	@ 0x30
 800b9ae:	4699      	mov	r9, r3
 800b9b0:	f103 0301 	add.w	r3, r3, #1
 800b9b4:	d0f9      	beq.n	800b9aa <__gethex+0x4e>
 800b9b6:	f7ff ffbb 	bl	800b930 <__hexdig_fun>
 800b9ba:	fab0 f580 	clz	r5, r0
 800b9be:	096d      	lsrs	r5, r5, #5
 800b9c0:	f04f 0b01 	mov.w	fp, #1
 800b9c4:	464a      	mov	r2, r9
 800b9c6:	4616      	mov	r6, r2
 800b9c8:	3201      	adds	r2, #1
 800b9ca:	7830      	ldrb	r0, [r6, #0]
 800b9cc:	f7ff ffb0 	bl	800b930 <__hexdig_fun>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d1f8      	bne.n	800b9c6 <__gethex+0x6a>
 800b9d4:	498d      	ldr	r1, [pc, #564]	@ (800bc0c <__gethex+0x2b0>)
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	4630      	mov	r0, r6
 800b9da:	f7ff f81f 	bl	800aa1c <strncmp>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	d13f      	bne.n	800ba62 <__gethex+0x106>
 800b9e2:	b944      	cbnz	r4, 800b9f6 <__gethex+0x9a>
 800b9e4:	1c74      	adds	r4, r6, #1
 800b9e6:	4622      	mov	r2, r4
 800b9e8:	4616      	mov	r6, r2
 800b9ea:	3201      	adds	r2, #1
 800b9ec:	7830      	ldrb	r0, [r6, #0]
 800b9ee:	f7ff ff9f 	bl	800b930 <__hexdig_fun>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d1f8      	bne.n	800b9e8 <__gethex+0x8c>
 800b9f6:	1ba4      	subs	r4, r4, r6
 800b9f8:	00a7      	lsls	r7, r4, #2
 800b9fa:	7833      	ldrb	r3, [r6, #0]
 800b9fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ba00:	2b50      	cmp	r3, #80	@ 0x50
 800ba02:	d13e      	bne.n	800ba82 <__gethex+0x126>
 800ba04:	7873      	ldrb	r3, [r6, #1]
 800ba06:	2b2b      	cmp	r3, #43	@ 0x2b
 800ba08:	d033      	beq.n	800ba72 <__gethex+0x116>
 800ba0a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ba0c:	d034      	beq.n	800ba78 <__gethex+0x11c>
 800ba0e:	1c71      	adds	r1, r6, #1
 800ba10:	2400      	movs	r4, #0
 800ba12:	7808      	ldrb	r0, [r1, #0]
 800ba14:	f7ff ff8c 	bl	800b930 <__hexdig_fun>
 800ba18:	1e43      	subs	r3, r0, #1
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	2b18      	cmp	r3, #24
 800ba1e:	d830      	bhi.n	800ba82 <__gethex+0x126>
 800ba20:	f1a0 0210 	sub.w	r2, r0, #16
 800ba24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ba28:	f7ff ff82 	bl	800b930 <__hexdig_fun>
 800ba2c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ba30:	fa5f fc8c 	uxtb.w	ip, ip
 800ba34:	f1bc 0f18 	cmp.w	ip, #24
 800ba38:	f04f 030a 	mov.w	r3, #10
 800ba3c:	d91e      	bls.n	800ba7c <__gethex+0x120>
 800ba3e:	b104      	cbz	r4, 800ba42 <__gethex+0xe6>
 800ba40:	4252      	negs	r2, r2
 800ba42:	4417      	add	r7, r2
 800ba44:	f8ca 1000 	str.w	r1, [sl]
 800ba48:	b1ed      	cbz	r5, 800ba86 <__gethex+0x12a>
 800ba4a:	f1bb 0f00 	cmp.w	fp, #0
 800ba4e:	bf0c      	ite	eq
 800ba50:	2506      	moveq	r5, #6
 800ba52:	2500      	movne	r5, #0
 800ba54:	4628      	mov	r0, r5
 800ba56:	b005      	add	sp, #20
 800ba58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba5c:	2500      	movs	r5, #0
 800ba5e:	462c      	mov	r4, r5
 800ba60:	e7b0      	b.n	800b9c4 <__gethex+0x68>
 800ba62:	2c00      	cmp	r4, #0
 800ba64:	d1c7      	bne.n	800b9f6 <__gethex+0x9a>
 800ba66:	4627      	mov	r7, r4
 800ba68:	e7c7      	b.n	800b9fa <__gethex+0x9e>
 800ba6a:	464e      	mov	r6, r9
 800ba6c:	462f      	mov	r7, r5
 800ba6e:	2501      	movs	r5, #1
 800ba70:	e7c3      	b.n	800b9fa <__gethex+0x9e>
 800ba72:	2400      	movs	r4, #0
 800ba74:	1cb1      	adds	r1, r6, #2
 800ba76:	e7cc      	b.n	800ba12 <__gethex+0xb6>
 800ba78:	2401      	movs	r4, #1
 800ba7a:	e7fb      	b.n	800ba74 <__gethex+0x118>
 800ba7c:	fb03 0002 	mla	r0, r3, r2, r0
 800ba80:	e7ce      	b.n	800ba20 <__gethex+0xc4>
 800ba82:	4631      	mov	r1, r6
 800ba84:	e7de      	b.n	800ba44 <__gethex+0xe8>
 800ba86:	eba6 0309 	sub.w	r3, r6, r9
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	4629      	mov	r1, r5
 800ba8e:	2b07      	cmp	r3, #7
 800ba90:	dc0a      	bgt.n	800baa8 <__gethex+0x14c>
 800ba92:	9801      	ldr	r0, [sp, #4]
 800ba94:	f000 fafc 	bl	800c090 <_Balloc>
 800ba98:	4604      	mov	r4, r0
 800ba9a:	b940      	cbnz	r0, 800baae <__gethex+0x152>
 800ba9c:	4b5c      	ldr	r3, [pc, #368]	@ (800bc10 <__gethex+0x2b4>)
 800ba9e:	4602      	mov	r2, r0
 800baa0:	21e4      	movs	r1, #228	@ 0xe4
 800baa2:	485c      	ldr	r0, [pc, #368]	@ (800bc14 <__gethex+0x2b8>)
 800baa4:	f001 f9e0 	bl	800ce68 <__assert_func>
 800baa8:	3101      	adds	r1, #1
 800baaa:	105b      	asrs	r3, r3, #1
 800baac:	e7ef      	b.n	800ba8e <__gethex+0x132>
 800baae:	f100 0a14 	add.w	sl, r0, #20
 800bab2:	2300      	movs	r3, #0
 800bab4:	4655      	mov	r5, sl
 800bab6:	469b      	mov	fp, r3
 800bab8:	45b1      	cmp	r9, r6
 800baba:	d337      	bcc.n	800bb2c <__gethex+0x1d0>
 800babc:	f845 bb04 	str.w	fp, [r5], #4
 800bac0:	eba5 050a 	sub.w	r5, r5, sl
 800bac4:	10ad      	asrs	r5, r5, #2
 800bac6:	6125      	str	r5, [r4, #16]
 800bac8:	4658      	mov	r0, fp
 800baca:	f000 fbd3 	bl	800c274 <__hi0bits>
 800bace:	016d      	lsls	r5, r5, #5
 800bad0:	f8d8 6000 	ldr.w	r6, [r8]
 800bad4:	1a2d      	subs	r5, r5, r0
 800bad6:	42b5      	cmp	r5, r6
 800bad8:	dd54      	ble.n	800bb84 <__gethex+0x228>
 800bada:	1bad      	subs	r5, r5, r6
 800badc:	4629      	mov	r1, r5
 800bade:	4620      	mov	r0, r4
 800bae0:	f000 ff67 	bl	800c9b2 <__any_on>
 800bae4:	4681      	mov	r9, r0
 800bae6:	b178      	cbz	r0, 800bb08 <__gethex+0x1ac>
 800bae8:	1e6b      	subs	r3, r5, #1
 800baea:	1159      	asrs	r1, r3, #5
 800baec:	f003 021f 	and.w	r2, r3, #31
 800baf0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800baf4:	f04f 0901 	mov.w	r9, #1
 800baf8:	fa09 f202 	lsl.w	r2, r9, r2
 800bafc:	420a      	tst	r2, r1
 800bafe:	d003      	beq.n	800bb08 <__gethex+0x1ac>
 800bb00:	454b      	cmp	r3, r9
 800bb02:	dc36      	bgt.n	800bb72 <__gethex+0x216>
 800bb04:	f04f 0902 	mov.w	r9, #2
 800bb08:	4629      	mov	r1, r5
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f7ff febe 	bl	800b88c <rshift>
 800bb10:	442f      	add	r7, r5
 800bb12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb16:	42bb      	cmp	r3, r7
 800bb18:	da42      	bge.n	800bba0 <__gethex+0x244>
 800bb1a:	9801      	ldr	r0, [sp, #4]
 800bb1c:	4621      	mov	r1, r4
 800bb1e:	f000 faf7 	bl	800c110 <_Bfree>
 800bb22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb24:	2300      	movs	r3, #0
 800bb26:	6013      	str	r3, [r2, #0]
 800bb28:	25a3      	movs	r5, #163	@ 0xa3
 800bb2a:	e793      	b.n	800ba54 <__gethex+0xf8>
 800bb2c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bb30:	2a2e      	cmp	r2, #46	@ 0x2e
 800bb32:	d012      	beq.n	800bb5a <__gethex+0x1fe>
 800bb34:	2b20      	cmp	r3, #32
 800bb36:	d104      	bne.n	800bb42 <__gethex+0x1e6>
 800bb38:	f845 bb04 	str.w	fp, [r5], #4
 800bb3c:	f04f 0b00 	mov.w	fp, #0
 800bb40:	465b      	mov	r3, fp
 800bb42:	7830      	ldrb	r0, [r6, #0]
 800bb44:	9303      	str	r3, [sp, #12]
 800bb46:	f7ff fef3 	bl	800b930 <__hexdig_fun>
 800bb4a:	9b03      	ldr	r3, [sp, #12]
 800bb4c:	f000 000f 	and.w	r0, r0, #15
 800bb50:	4098      	lsls	r0, r3
 800bb52:	ea4b 0b00 	orr.w	fp, fp, r0
 800bb56:	3304      	adds	r3, #4
 800bb58:	e7ae      	b.n	800bab8 <__gethex+0x15c>
 800bb5a:	45b1      	cmp	r9, r6
 800bb5c:	d8ea      	bhi.n	800bb34 <__gethex+0x1d8>
 800bb5e:	492b      	ldr	r1, [pc, #172]	@ (800bc0c <__gethex+0x2b0>)
 800bb60:	9303      	str	r3, [sp, #12]
 800bb62:	2201      	movs	r2, #1
 800bb64:	4630      	mov	r0, r6
 800bb66:	f7fe ff59 	bl	800aa1c <strncmp>
 800bb6a:	9b03      	ldr	r3, [sp, #12]
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d1e1      	bne.n	800bb34 <__gethex+0x1d8>
 800bb70:	e7a2      	b.n	800bab8 <__gethex+0x15c>
 800bb72:	1ea9      	subs	r1, r5, #2
 800bb74:	4620      	mov	r0, r4
 800bb76:	f000 ff1c 	bl	800c9b2 <__any_on>
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	d0c2      	beq.n	800bb04 <__gethex+0x1a8>
 800bb7e:	f04f 0903 	mov.w	r9, #3
 800bb82:	e7c1      	b.n	800bb08 <__gethex+0x1ac>
 800bb84:	da09      	bge.n	800bb9a <__gethex+0x23e>
 800bb86:	1b75      	subs	r5, r6, r5
 800bb88:	4621      	mov	r1, r4
 800bb8a:	9801      	ldr	r0, [sp, #4]
 800bb8c:	462a      	mov	r2, r5
 800bb8e:	f000 fcd7 	bl	800c540 <__lshift>
 800bb92:	1b7f      	subs	r7, r7, r5
 800bb94:	4604      	mov	r4, r0
 800bb96:	f100 0a14 	add.w	sl, r0, #20
 800bb9a:	f04f 0900 	mov.w	r9, #0
 800bb9e:	e7b8      	b.n	800bb12 <__gethex+0x1b6>
 800bba0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bba4:	42bd      	cmp	r5, r7
 800bba6:	dd6f      	ble.n	800bc88 <__gethex+0x32c>
 800bba8:	1bed      	subs	r5, r5, r7
 800bbaa:	42ae      	cmp	r6, r5
 800bbac:	dc34      	bgt.n	800bc18 <__gethex+0x2bc>
 800bbae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bbb2:	2b02      	cmp	r3, #2
 800bbb4:	d022      	beq.n	800bbfc <__gethex+0x2a0>
 800bbb6:	2b03      	cmp	r3, #3
 800bbb8:	d024      	beq.n	800bc04 <__gethex+0x2a8>
 800bbba:	2b01      	cmp	r3, #1
 800bbbc:	d115      	bne.n	800bbea <__gethex+0x28e>
 800bbbe:	42ae      	cmp	r6, r5
 800bbc0:	d113      	bne.n	800bbea <__gethex+0x28e>
 800bbc2:	2e01      	cmp	r6, #1
 800bbc4:	d10b      	bne.n	800bbde <__gethex+0x282>
 800bbc6:	9a02      	ldr	r2, [sp, #8]
 800bbc8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bbcc:	6013      	str	r3, [r2, #0]
 800bbce:	2301      	movs	r3, #1
 800bbd0:	6123      	str	r3, [r4, #16]
 800bbd2:	f8ca 3000 	str.w	r3, [sl]
 800bbd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bbd8:	2562      	movs	r5, #98	@ 0x62
 800bbda:	601c      	str	r4, [r3, #0]
 800bbdc:	e73a      	b.n	800ba54 <__gethex+0xf8>
 800bbde:	1e71      	subs	r1, r6, #1
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f000 fee6 	bl	800c9b2 <__any_on>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d1ed      	bne.n	800bbc6 <__gethex+0x26a>
 800bbea:	9801      	ldr	r0, [sp, #4]
 800bbec:	4621      	mov	r1, r4
 800bbee:	f000 fa8f 	bl	800c110 <_Bfree>
 800bbf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	6013      	str	r3, [r2, #0]
 800bbf8:	2550      	movs	r5, #80	@ 0x50
 800bbfa:	e72b      	b.n	800ba54 <__gethex+0xf8>
 800bbfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d1f3      	bne.n	800bbea <__gethex+0x28e>
 800bc02:	e7e0      	b.n	800bbc6 <__gethex+0x26a>
 800bc04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d1dd      	bne.n	800bbc6 <__gethex+0x26a>
 800bc0a:	e7ee      	b.n	800bbea <__gethex+0x28e>
 800bc0c:	0800d6b8 	.word	0x0800d6b8
 800bc10:	0800d8c9 	.word	0x0800d8c9
 800bc14:	0800d8da 	.word	0x0800d8da
 800bc18:	1e6f      	subs	r7, r5, #1
 800bc1a:	f1b9 0f00 	cmp.w	r9, #0
 800bc1e:	d130      	bne.n	800bc82 <__gethex+0x326>
 800bc20:	b127      	cbz	r7, 800bc2c <__gethex+0x2d0>
 800bc22:	4639      	mov	r1, r7
 800bc24:	4620      	mov	r0, r4
 800bc26:	f000 fec4 	bl	800c9b2 <__any_on>
 800bc2a:	4681      	mov	r9, r0
 800bc2c:	117a      	asrs	r2, r7, #5
 800bc2e:	2301      	movs	r3, #1
 800bc30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bc34:	f007 071f 	and.w	r7, r7, #31
 800bc38:	40bb      	lsls	r3, r7
 800bc3a:	4213      	tst	r3, r2
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	4620      	mov	r0, r4
 800bc40:	bf18      	it	ne
 800bc42:	f049 0902 	orrne.w	r9, r9, #2
 800bc46:	f7ff fe21 	bl	800b88c <rshift>
 800bc4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bc4e:	1b76      	subs	r6, r6, r5
 800bc50:	2502      	movs	r5, #2
 800bc52:	f1b9 0f00 	cmp.w	r9, #0
 800bc56:	d047      	beq.n	800bce8 <__gethex+0x38c>
 800bc58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d015      	beq.n	800bc8c <__gethex+0x330>
 800bc60:	2b03      	cmp	r3, #3
 800bc62:	d017      	beq.n	800bc94 <__gethex+0x338>
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d109      	bne.n	800bc7c <__gethex+0x320>
 800bc68:	f019 0f02 	tst.w	r9, #2
 800bc6c:	d006      	beq.n	800bc7c <__gethex+0x320>
 800bc6e:	f8da 3000 	ldr.w	r3, [sl]
 800bc72:	ea49 0903 	orr.w	r9, r9, r3
 800bc76:	f019 0f01 	tst.w	r9, #1
 800bc7a:	d10e      	bne.n	800bc9a <__gethex+0x33e>
 800bc7c:	f045 0510 	orr.w	r5, r5, #16
 800bc80:	e032      	b.n	800bce8 <__gethex+0x38c>
 800bc82:	f04f 0901 	mov.w	r9, #1
 800bc86:	e7d1      	b.n	800bc2c <__gethex+0x2d0>
 800bc88:	2501      	movs	r5, #1
 800bc8a:	e7e2      	b.n	800bc52 <__gethex+0x2f6>
 800bc8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc8e:	f1c3 0301 	rsb	r3, r3, #1
 800bc92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bc94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d0f0      	beq.n	800bc7c <__gethex+0x320>
 800bc9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bc9e:	f104 0314 	add.w	r3, r4, #20
 800bca2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bca6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bcaa:	f04f 0c00 	mov.w	ip, #0
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcb4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bcb8:	d01b      	beq.n	800bcf2 <__gethex+0x396>
 800bcba:	3201      	adds	r2, #1
 800bcbc:	6002      	str	r2, [r0, #0]
 800bcbe:	2d02      	cmp	r5, #2
 800bcc0:	f104 0314 	add.w	r3, r4, #20
 800bcc4:	d13c      	bne.n	800bd40 <__gethex+0x3e4>
 800bcc6:	f8d8 2000 	ldr.w	r2, [r8]
 800bcca:	3a01      	subs	r2, #1
 800bccc:	42b2      	cmp	r2, r6
 800bcce:	d109      	bne.n	800bce4 <__gethex+0x388>
 800bcd0:	1171      	asrs	r1, r6, #5
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bcd8:	f006 061f 	and.w	r6, r6, #31
 800bcdc:	fa02 f606 	lsl.w	r6, r2, r6
 800bce0:	421e      	tst	r6, r3
 800bce2:	d13a      	bne.n	800bd5a <__gethex+0x3fe>
 800bce4:	f045 0520 	orr.w	r5, r5, #32
 800bce8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcea:	601c      	str	r4, [r3, #0]
 800bcec:	9b02      	ldr	r3, [sp, #8]
 800bcee:	601f      	str	r7, [r3, #0]
 800bcf0:	e6b0      	b.n	800ba54 <__gethex+0xf8>
 800bcf2:	4299      	cmp	r1, r3
 800bcf4:	f843 cc04 	str.w	ip, [r3, #-4]
 800bcf8:	d8d9      	bhi.n	800bcae <__gethex+0x352>
 800bcfa:	68a3      	ldr	r3, [r4, #8]
 800bcfc:	459b      	cmp	fp, r3
 800bcfe:	db17      	blt.n	800bd30 <__gethex+0x3d4>
 800bd00:	6861      	ldr	r1, [r4, #4]
 800bd02:	9801      	ldr	r0, [sp, #4]
 800bd04:	3101      	adds	r1, #1
 800bd06:	f000 f9c3 	bl	800c090 <_Balloc>
 800bd0a:	4681      	mov	r9, r0
 800bd0c:	b918      	cbnz	r0, 800bd16 <__gethex+0x3ba>
 800bd0e:	4b1a      	ldr	r3, [pc, #104]	@ (800bd78 <__gethex+0x41c>)
 800bd10:	4602      	mov	r2, r0
 800bd12:	2184      	movs	r1, #132	@ 0x84
 800bd14:	e6c5      	b.n	800baa2 <__gethex+0x146>
 800bd16:	6922      	ldr	r2, [r4, #16]
 800bd18:	3202      	adds	r2, #2
 800bd1a:	f104 010c 	add.w	r1, r4, #12
 800bd1e:	0092      	lsls	r2, r2, #2
 800bd20:	300c      	adds	r0, #12
 800bd22:	f7fe ff04 	bl	800ab2e <memcpy>
 800bd26:	4621      	mov	r1, r4
 800bd28:	9801      	ldr	r0, [sp, #4]
 800bd2a:	f000 f9f1 	bl	800c110 <_Bfree>
 800bd2e:	464c      	mov	r4, r9
 800bd30:	6923      	ldr	r3, [r4, #16]
 800bd32:	1c5a      	adds	r2, r3, #1
 800bd34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd38:	6122      	str	r2, [r4, #16]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	615a      	str	r2, [r3, #20]
 800bd3e:	e7be      	b.n	800bcbe <__gethex+0x362>
 800bd40:	6922      	ldr	r2, [r4, #16]
 800bd42:	455a      	cmp	r2, fp
 800bd44:	dd0b      	ble.n	800bd5e <__gethex+0x402>
 800bd46:	2101      	movs	r1, #1
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f7ff fd9f 	bl	800b88c <rshift>
 800bd4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd52:	3701      	adds	r7, #1
 800bd54:	42bb      	cmp	r3, r7
 800bd56:	f6ff aee0 	blt.w	800bb1a <__gethex+0x1be>
 800bd5a:	2501      	movs	r5, #1
 800bd5c:	e7c2      	b.n	800bce4 <__gethex+0x388>
 800bd5e:	f016 061f 	ands.w	r6, r6, #31
 800bd62:	d0fa      	beq.n	800bd5a <__gethex+0x3fe>
 800bd64:	4453      	add	r3, sl
 800bd66:	f1c6 0620 	rsb	r6, r6, #32
 800bd6a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bd6e:	f000 fa81 	bl	800c274 <__hi0bits>
 800bd72:	42b0      	cmp	r0, r6
 800bd74:	dbe7      	blt.n	800bd46 <__gethex+0x3ea>
 800bd76:	e7f0      	b.n	800bd5a <__gethex+0x3fe>
 800bd78:	0800d8c9 	.word	0x0800d8c9

0800bd7c <L_shift>:
 800bd7c:	f1c2 0208 	rsb	r2, r2, #8
 800bd80:	0092      	lsls	r2, r2, #2
 800bd82:	b570      	push	{r4, r5, r6, lr}
 800bd84:	f1c2 0620 	rsb	r6, r2, #32
 800bd88:	6843      	ldr	r3, [r0, #4]
 800bd8a:	6804      	ldr	r4, [r0, #0]
 800bd8c:	fa03 f506 	lsl.w	r5, r3, r6
 800bd90:	432c      	orrs	r4, r5
 800bd92:	40d3      	lsrs	r3, r2
 800bd94:	6004      	str	r4, [r0, #0]
 800bd96:	f840 3f04 	str.w	r3, [r0, #4]!
 800bd9a:	4288      	cmp	r0, r1
 800bd9c:	d3f4      	bcc.n	800bd88 <L_shift+0xc>
 800bd9e:	bd70      	pop	{r4, r5, r6, pc}

0800bda0 <__match>:
 800bda0:	b530      	push	{r4, r5, lr}
 800bda2:	6803      	ldr	r3, [r0, #0]
 800bda4:	3301      	adds	r3, #1
 800bda6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdaa:	b914      	cbnz	r4, 800bdb2 <__match+0x12>
 800bdac:	6003      	str	r3, [r0, #0]
 800bdae:	2001      	movs	r0, #1
 800bdb0:	bd30      	pop	{r4, r5, pc}
 800bdb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdb6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bdba:	2d19      	cmp	r5, #25
 800bdbc:	bf98      	it	ls
 800bdbe:	3220      	addls	r2, #32
 800bdc0:	42a2      	cmp	r2, r4
 800bdc2:	d0f0      	beq.n	800bda6 <__match+0x6>
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	e7f3      	b.n	800bdb0 <__match+0x10>

0800bdc8 <__hexnan>:
 800bdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdcc:	680b      	ldr	r3, [r1, #0]
 800bdce:	6801      	ldr	r1, [r0, #0]
 800bdd0:	115e      	asrs	r6, r3, #5
 800bdd2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bdd6:	f013 031f 	ands.w	r3, r3, #31
 800bdda:	b087      	sub	sp, #28
 800bddc:	bf18      	it	ne
 800bdde:	3604      	addne	r6, #4
 800bde0:	2500      	movs	r5, #0
 800bde2:	1f37      	subs	r7, r6, #4
 800bde4:	4682      	mov	sl, r0
 800bde6:	4690      	mov	r8, r2
 800bde8:	9301      	str	r3, [sp, #4]
 800bdea:	f846 5c04 	str.w	r5, [r6, #-4]
 800bdee:	46b9      	mov	r9, r7
 800bdf0:	463c      	mov	r4, r7
 800bdf2:	9502      	str	r5, [sp, #8]
 800bdf4:	46ab      	mov	fp, r5
 800bdf6:	784a      	ldrb	r2, [r1, #1]
 800bdf8:	1c4b      	adds	r3, r1, #1
 800bdfa:	9303      	str	r3, [sp, #12]
 800bdfc:	b342      	cbz	r2, 800be50 <__hexnan+0x88>
 800bdfe:	4610      	mov	r0, r2
 800be00:	9105      	str	r1, [sp, #20]
 800be02:	9204      	str	r2, [sp, #16]
 800be04:	f7ff fd94 	bl	800b930 <__hexdig_fun>
 800be08:	2800      	cmp	r0, #0
 800be0a:	d151      	bne.n	800beb0 <__hexnan+0xe8>
 800be0c:	9a04      	ldr	r2, [sp, #16]
 800be0e:	9905      	ldr	r1, [sp, #20]
 800be10:	2a20      	cmp	r2, #32
 800be12:	d818      	bhi.n	800be46 <__hexnan+0x7e>
 800be14:	9b02      	ldr	r3, [sp, #8]
 800be16:	459b      	cmp	fp, r3
 800be18:	dd13      	ble.n	800be42 <__hexnan+0x7a>
 800be1a:	454c      	cmp	r4, r9
 800be1c:	d206      	bcs.n	800be2c <__hexnan+0x64>
 800be1e:	2d07      	cmp	r5, #7
 800be20:	dc04      	bgt.n	800be2c <__hexnan+0x64>
 800be22:	462a      	mov	r2, r5
 800be24:	4649      	mov	r1, r9
 800be26:	4620      	mov	r0, r4
 800be28:	f7ff ffa8 	bl	800bd7c <L_shift>
 800be2c:	4544      	cmp	r4, r8
 800be2e:	d952      	bls.n	800bed6 <__hexnan+0x10e>
 800be30:	2300      	movs	r3, #0
 800be32:	f1a4 0904 	sub.w	r9, r4, #4
 800be36:	f844 3c04 	str.w	r3, [r4, #-4]
 800be3a:	f8cd b008 	str.w	fp, [sp, #8]
 800be3e:	464c      	mov	r4, r9
 800be40:	461d      	mov	r5, r3
 800be42:	9903      	ldr	r1, [sp, #12]
 800be44:	e7d7      	b.n	800bdf6 <__hexnan+0x2e>
 800be46:	2a29      	cmp	r2, #41	@ 0x29
 800be48:	d157      	bne.n	800befa <__hexnan+0x132>
 800be4a:	3102      	adds	r1, #2
 800be4c:	f8ca 1000 	str.w	r1, [sl]
 800be50:	f1bb 0f00 	cmp.w	fp, #0
 800be54:	d051      	beq.n	800befa <__hexnan+0x132>
 800be56:	454c      	cmp	r4, r9
 800be58:	d206      	bcs.n	800be68 <__hexnan+0xa0>
 800be5a:	2d07      	cmp	r5, #7
 800be5c:	dc04      	bgt.n	800be68 <__hexnan+0xa0>
 800be5e:	462a      	mov	r2, r5
 800be60:	4649      	mov	r1, r9
 800be62:	4620      	mov	r0, r4
 800be64:	f7ff ff8a 	bl	800bd7c <L_shift>
 800be68:	4544      	cmp	r4, r8
 800be6a:	d936      	bls.n	800beda <__hexnan+0x112>
 800be6c:	f1a8 0204 	sub.w	r2, r8, #4
 800be70:	4623      	mov	r3, r4
 800be72:	f853 1b04 	ldr.w	r1, [r3], #4
 800be76:	f842 1f04 	str.w	r1, [r2, #4]!
 800be7a:	429f      	cmp	r7, r3
 800be7c:	d2f9      	bcs.n	800be72 <__hexnan+0xaa>
 800be7e:	1b3b      	subs	r3, r7, r4
 800be80:	f023 0303 	bic.w	r3, r3, #3
 800be84:	3304      	adds	r3, #4
 800be86:	3401      	adds	r4, #1
 800be88:	3e03      	subs	r6, #3
 800be8a:	42b4      	cmp	r4, r6
 800be8c:	bf88      	it	hi
 800be8e:	2304      	movhi	r3, #4
 800be90:	4443      	add	r3, r8
 800be92:	2200      	movs	r2, #0
 800be94:	f843 2b04 	str.w	r2, [r3], #4
 800be98:	429f      	cmp	r7, r3
 800be9a:	d2fb      	bcs.n	800be94 <__hexnan+0xcc>
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	b91b      	cbnz	r3, 800bea8 <__hexnan+0xe0>
 800bea0:	4547      	cmp	r7, r8
 800bea2:	d128      	bne.n	800bef6 <__hexnan+0x12e>
 800bea4:	2301      	movs	r3, #1
 800bea6:	603b      	str	r3, [r7, #0]
 800bea8:	2005      	movs	r0, #5
 800beaa:	b007      	add	sp, #28
 800beac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb0:	3501      	adds	r5, #1
 800beb2:	2d08      	cmp	r5, #8
 800beb4:	f10b 0b01 	add.w	fp, fp, #1
 800beb8:	dd06      	ble.n	800bec8 <__hexnan+0x100>
 800beba:	4544      	cmp	r4, r8
 800bebc:	d9c1      	bls.n	800be42 <__hexnan+0x7a>
 800bebe:	2300      	movs	r3, #0
 800bec0:	f844 3c04 	str.w	r3, [r4, #-4]
 800bec4:	2501      	movs	r5, #1
 800bec6:	3c04      	subs	r4, #4
 800bec8:	6822      	ldr	r2, [r4, #0]
 800beca:	f000 000f 	and.w	r0, r0, #15
 800bece:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bed2:	6020      	str	r0, [r4, #0]
 800bed4:	e7b5      	b.n	800be42 <__hexnan+0x7a>
 800bed6:	2508      	movs	r5, #8
 800bed8:	e7b3      	b.n	800be42 <__hexnan+0x7a>
 800beda:	9b01      	ldr	r3, [sp, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d0dd      	beq.n	800be9c <__hexnan+0xd4>
 800bee0:	f1c3 0320 	rsb	r3, r3, #32
 800bee4:	f04f 32ff 	mov.w	r2, #4294967295
 800bee8:	40da      	lsrs	r2, r3
 800beea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800beee:	4013      	ands	r3, r2
 800bef0:	f846 3c04 	str.w	r3, [r6, #-4]
 800bef4:	e7d2      	b.n	800be9c <__hexnan+0xd4>
 800bef6:	3f04      	subs	r7, #4
 800bef8:	e7d0      	b.n	800be9c <__hexnan+0xd4>
 800befa:	2004      	movs	r0, #4
 800befc:	e7d5      	b.n	800beaa <__hexnan+0xe2>
	...

0800bf00 <malloc>:
 800bf00:	4b02      	ldr	r3, [pc, #8]	@ (800bf0c <malloc+0xc>)
 800bf02:	4601      	mov	r1, r0
 800bf04:	6818      	ldr	r0, [r3, #0]
 800bf06:	f000 b825 	b.w	800bf54 <_malloc_r>
 800bf0a:	bf00      	nop
 800bf0c:	200001a4 	.word	0x200001a4

0800bf10 <sbrk_aligned>:
 800bf10:	b570      	push	{r4, r5, r6, lr}
 800bf12:	4e0f      	ldr	r6, [pc, #60]	@ (800bf50 <sbrk_aligned+0x40>)
 800bf14:	460c      	mov	r4, r1
 800bf16:	6831      	ldr	r1, [r6, #0]
 800bf18:	4605      	mov	r5, r0
 800bf1a:	b911      	cbnz	r1, 800bf22 <sbrk_aligned+0x12>
 800bf1c:	f000 ff94 	bl	800ce48 <_sbrk_r>
 800bf20:	6030      	str	r0, [r6, #0]
 800bf22:	4621      	mov	r1, r4
 800bf24:	4628      	mov	r0, r5
 800bf26:	f000 ff8f 	bl	800ce48 <_sbrk_r>
 800bf2a:	1c43      	adds	r3, r0, #1
 800bf2c:	d103      	bne.n	800bf36 <sbrk_aligned+0x26>
 800bf2e:	f04f 34ff 	mov.w	r4, #4294967295
 800bf32:	4620      	mov	r0, r4
 800bf34:	bd70      	pop	{r4, r5, r6, pc}
 800bf36:	1cc4      	adds	r4, r0, #3
 800bf38:	f024 0403 	bic.w	r4, r4, #3
 800bf3c:	42a0      	cmp	r0, r4
 800bf3e:	d0f8      	beq.n	800bf32 <sbrk_aligned+0x22>
 800bf40:	1a21      	subs	r1, r4, r0
 800bf42:	4628      	mov	r0, r5
 800bf44:	f000 ff80 	bl	800ce48 <_sbrk_r>
 800bf48:	3001      	adds	r0, #1
 800bf4a:	d1f2      	bne.n	800bf32 <sbrk_aligned+0x22>
 800bf4c:	e7ef      	b.n	800bf2e <sbrk_aligned+0x1e>
 800bf4e:	bf00      	nop
 800bf50:	20000aa8 	.word	0x20000aa8

0800bf54 <_malloc_r>:
 800bf54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf58:	1ccd      	adds	r5, r1, #3
 800bf5a:	f025 0503 	bic.w	r5, r5, #3
 800bf5e:	3508      	adds	r5, #8
 800bf60:	2d0c      	cmp	r5, #12
 800bf62:	bf38      	it	cc
 800bf64:	250c      	movcc	r5, #12
 800bf66:	2d00      	cmp	r5, #0
 800bf68:	4606      	mov	r6, r0
 800bf6a:	db01      	blt.n	800bf70 <_malloc_r+0x1c>
 800bf6c:	42a9      	cmp	r1, r5
 800bf6e:	d904      	bls.n	800bf7a <_malloc_r+0x26>
 800bf70:	230c      	movs	r3, #12
 800bf72:	6033      	str	r3, [r6, #0]
 800bf74:	2000      	movs	r0, #0
 800bf76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c050 <_malloc_r+0xfc>
 800bf7e:	f000 f87b 	bl	800c078 <__malloc_lock>
 800bf82:	f8d8 3000 	ldr.w	r3, [r8]
 800bf86:	461c      	mov	r4, r3
 800bf88:	bb44      	cbnz	r4, 800bfdc <_malloc_r+0x88>
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f7ff ffbf 	bl	800bf10 <sbrk_aligned>
 800bf92:	1c43      	adds	r3, r0, #1
 800bf94:	4604      	mov	r4, r0
 800bf96:	d158      	bne.n	800c04a <_malloc_r+0xf6>
 800bf98:	f8d8 4000 	ldr.w	r4, [r8]
 800bf9c:	4627      	mov	r7, r4
 800bf9e:	2f00      	cmp	r7, #0
 800bfa0:	d143      	bne.n	800c02a <_malloc_r+0xd6>
 800bfa2:	2c00      	cmp	r4, #0
 800bfa4:	d04b      	beq.n	800c03e <_malloc_r+0xea>
 800bfa6:	6823      	ldr	r3, [r4, #0]
 800bfa8:	4639      	mov	r1, r7
 800bfaa:	4630      	mov	r0, r6
 800bfac:	eb04 0903 	add.w	r9, r4, r3
 800bfb0:	f000 ff4a 	bl	800ce48 <_sbrk_r>
 800bfb4:	4581      	cmp	r9, r0
 800bfb6:	d142      	bne.n	800c03e <_malloc_r+0xea>
 800bfb8:	6821      	ldr	r1, [r4, #0]
 800bfba:	1a6d      	subs	r5, r5, r1
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	f7ff ffa6 	bl	800bf10 <sbrk_aligned>
 800bfc4:	3001      	adds	r0, #1
 800bfc6:	d03a      	beq.n	800c03e <_malloc_r+0xea>
 800bfc8:	6823      	ldr	r3, [r4, #0]
 800bfca:	442b      	add	r3, r5
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	f8d8 3000 	ldr.w	r3, [r8]
 800bfd2:	685a      	ldr	r2, [r3, #4]
 800bfd4:	bb62      	cbnz	r2, 800c030 <_malloc_r+0xdc>
 800bfd6:	f8c8 7000 	str.w	r7, [r8]
 800bfda:	e00f      	b.n	800bffc <_malloc_r+0xa8>
 800bfdc:	6822      	ldr	r2, [r4, #0]
 800bfde:	1b52      	subs	r2, r2, r5
 800bfe0:	d420      	bmi.n	800c024 <_malloc_r+0xd0>
 800bfe2:	2a0b      	cmp	r2, #11
 800bfe4:	d917      	bls.n	800c016 <_malloc_r+0xc2>
 800bfe6:	1961      	adds	r1, r4, r5
 800bfe8:	42a3      	cmp	r3, r4
 800bfea:	6025      	str	r5, [r4, #0]
 800bfec:	bf18      	it	ne
 800bfee:	6059      	strne	r1, [r3, #4]
 800bff0:	6863      	ldr	r3, [r4, #4]
 800bff2:	bf08      	it	eq
 800bff4:	f8c8 1000 	streq.w	r1, [r8]
 800bff8:	5162      	str	r2, [r4, r5]
 800bffa:	604b      	str	r3, [r1, #4]
 800bffc:	4630      	mov	r0, r6
 800bffe:	f000 f841 	bl	800c084 <__malloc_unlock>
 800c002:	f104 000b 	add.w	r0, r4, #11
 800c006:	1d23      	adds	r3, r4, #4
 800c008:	f020 0007 	bic.w	r0, r0, #7
 800c00c:	1ac2      	subs	r2, r0, r3
 800c00e:	bf1c      	itt	ne
 800c010:	1a1b      	subne	r3, r3, r0
 800c012:	50a3      	strne	r3, [r4, r2]
 800c014:	e7af      	b.n	800bf76 <_malloc_r+0x22>
 800c016:	6862      	ldr	r2, [r4, #4]
 800c018:	42a3      	cmp	r3, r4
 800c01a:	bf0c      	ite	eq
 800c01c:	f8c8 2000 	streq.w	r2, [r8]
 800c020:	605a      	strne	r2, [r3, #4]
 800c022:	e7eb      	b.n	800bffc <_malloc_r+0xa8>
 800c024:	4623      	mov	r3, r4
 800c026:	6864      	ldr	r4, [r4, #4]
 800c028:	e7ae      	b.n	800bf88 <_malloc_r+0x34>
 800c02a:	463c      	mov	r4, r7
 800c02c:	687f      	ldr	r7, [r7, #4]
 800c02e:	e7b6      	b.n	800bf9e <_malloc_r+0x4a>
 800c030:	461a      	mov	r2, r3
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	42a3      	cmp	r3, r4
 800c036:	d1fb      	bne.n	800c030 <_malloc_r+0xdc>
 800c038:	2300      	movs	r3, #0
 800c03a:	6053      	str	r3, [r2, #4]
 800c03c:	e7de      	b.n	800bffc <_malloc_r+0xa8>
 800c03e:	230c      	movs	r3, #12
 800c040:	6033      	str	r3, [r6, #0]
 800c042:	4630      	mov	r0, r6
 800c044:	f000 f81e 	bl	800c084 <__malloc_unlock>
 800c048:	e794      	b.n	800bf74 <_malloc_r+0x20>
 800c04a:	6005      	str	r5, [r0, #0]
 800c04c:	e7d6      	b.n	800bffc <_malloc_r+0xa8>
 800c04e:	bf00      	nop
 800c050:	20000aac 	.word	0x20000aac

0800c054 <__ascii_mbtowc>:
 800c054:	b082      	sub	sp, #8
 800c056:	b901      	cbnz	r1, 800c05a <__ascii_mbtowc+0x6>
 800c058:	a901      	add	r1, sp, #4
 800c05a:	b142      	cbz	r2, 800c06e <__ascii_mbtowc+0x1a>
 800c05c:	b14b      	cbz	r3, 800c072 <__ascii_mbtowc+0x1e>
 800c05e:	7813      	ldrb	r3, [r2, #0]
 800c060:	600b      	str	r3, [r1, #0]
 800c062:	7812      	ldrb	r2, [r2, #0]
 800c064:	1e10      	subs	r0, r2, #0
 800c066:	bf18      	it	ne
 800c068:	2001      	movne	r0, #1
 800c06a:	b002      	add	sp, #8
 800c06c:	4770      	bx	lr
 800c06e:	4610      	mov	r0, r2
 800c070:	e7fb      	b.n	800c06a <__ascii_mbtowc+0x16>
 800c072:	f06f 0001 	mvn.w	r0, #1
 800c076:	e7f8      	b.n	800c06a <__ascii_mbtowc+0x16>

0800c078 <__malloc_lock>:
 800c078:	4801      	ldr	r0, [pc, #4]	@ (800c080 <__malloc_lock+0x8>)
 800c07a:	f7fe bd56 	b.w	800ab2a <__retarget_lock_acquire_recursive>
 800c07e:	bf00      	nop
 800c080:	20000aa4 	.word	0x20000aa4

0800c084 <__malloc_unlock>:
 800c084:	4801      	ldr	r0, [pc, #4]	@ (800c08c <__malloc_unlock+0x8>)
 800c086:	f7fe bd51 	b.w	800ab2c <__retarget_lock_release_recursive>
 800c08a:	bf00      	nop
 800c08c:	20000aa4 	.word	0x20000aa4

0800c090 <_Balloc>:
 800c090:	b570      	push	{r4, r5, r6, lr}
 800c092:	69c6      	ldr	r6, [r0, #28]
 800c094:	4604      	mov	r4, r0
 800c096:	460d      	mov	r5, r1
 800c098:	b976      	cbnz	r6, 800c0b8 <_Balloc+0x28>
 800c09a:	2010      	movs	r0, #16
 800c09c:	f7ff ff30 	bl	800bf00 <malloc>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	61e0      	str	r0, [r4, #28]
 800c0a4:	b920      	cbnz	r0, 800c0b0 <_Balloc+0x20>
 800c0a6:	4b18      	ldr	r3, [pc, #96]	@ (800c108 <_Balloc+0x78>)
 800c0a8:	4818      	ldr	r0, [pc, #96]	@ (800c10c <_Balloc+0x7c>)
 800c0aa:	216b      	movs	r1, #107	@ 0x6b
 800c0ac:	f000 fedc 	bl	800ce68 <__assert_func>
 800c0b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0b4:	6006      	str	r6, [r0, #0]
 800c0b6:	60c6      	str	r6, [r0, #12]
 800c0b8:	69e6      	ldr	r6, [r4, #28]
 800c0ba:	68f3      	ldr	r3, [r6, #12]
 800c0bc:	b183      	cbz	r3, 800c0e0 <_Balloc+0x50>
 800c0be:	69e3      	ldr	r3, [r4, #28]
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0c6:	b9b8      	cbnz	r0, 800c0f8 <_Balloc+0x68>
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	fa01 f605 	lsl.w	r6, r1, r5
 800c0ce:	1d72      	adds	r2, r6, #5
 800c0d0:	0092      	lsls	r2, r2, #2
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f000 fee6 	bl	800cea4 <_calloc_r>
 800c0d8:	b160      	cbz	r0, 800c0f4 <_Balloc+0x64>
 800c0da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0de:	e00e      	b.n	800c0fe <_Balloc+0x6e>
 800c0e0:	2221      	movs	r2, #33	@ 0x21
 800c0e2:	2104      	movs	r1, #4
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f000 fedd 	bl	800cea4 <_calloc_r>
 800c0ea:	69e3      	ldr	r3, [r4, #28]
 800c0ec:	60f0      	str	r0, [r6, #12]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d1e4      	bne.n	800c0be <_Balloc+0x2e>
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	bd70      	pop	{r4, r5, r6, pc}
 800c0f8:	6802      	ldr	r2, [r0, #0]
 800c0fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0fe:	2300      	movs	r3, #0
 800c100:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c104:	e7f7      	b.n	800c0f6 <_Balloc+0x66>
 800c106:	bf00      	nop
 800c108:	0800d85a 	.word	0x0800d85a
 800c10c:	0800d93a 	.word	0x0800d93a

0800c110 <_Bfree>:
 800c110:	b570      	push	{r4, r5, r6, lr}
 800c112:	69c6      	ldr	r6, [r0, #28]
 800c114:	4605      	mov	r5, r0
 800c116:	460c      	mov	r4, r1
 800c118:	b976      	cbnz	r6, 800c138 <_Bfree+0x28>
 800c11a:	2010      	movs	r0, #16
 800c11c:	f7ff fef0 	bl	800bf00 <malloc>
 800c120:	4602      	mov	r2, r0
 800c122:	61e8      	str	r0, [r5, #28]
 800c124:	b920      	cbnz	r0, 800c130 <_Bfree+0x20>
 800c126:	4b09      	ldr	r3, [pc, #36]	@ (800c14c <_Bfree+0x3c>)
 800c128:	4809      	ldr	r0, [pc, #36]	@ (800c150 <_Bfree+0x40>)
 800c12a:	218f      	movs	r1, #143	@ 0x8f
 800c12c:	f000 fe9c 	bl	800ce68 <__assert_func>
 800c130:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c134:	6006      	str	r6, [r0, #0]
 800c136:	60c6      	str	r6, [r0, #12]
 800c138:	b13c      	cbz	r4, 800c14a <_Bfree+0x3a>
 800c13a:	69eb      	ldr	r3, [r5, #28]
 800c13c:	6862      	ldr	r2, [r4, #4]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c144:	6021      	str	r1, [r4, #0]
 800c146:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c14a:	bd70      	pop	{r4, r5, r6, pc}
 800c14c:	0800d85a 	.word	0x0800d85a
 800c150:	0800d93a 	.word	0x0800d93a

0800c154 <__multadd>:
 800c154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c158:	690d      	ldr	r5, [r1, #16]
 800c15a:	4607      	mov	r7, r0
 800c15c:	460c      	mov	r4, r1
 800c15e:	461e      	mov	r6, r3
 800c160:	f101 0c14 	add.w	ip, r1, #20
 800c164:	2000      	movs	r0, #0
 800c166:	f8dc 3000 	ldr.w	r3, [ip]
 800c16a:	b299      	uxth	r1, r3
 800c16c:	fb02 6101 	mla	r1, r2, r1, r6
 800c170:	0c1e      	lsrs	r6, r3, #16
 800c172:	0c0b      	lsrs	r3, r1, #16
 800c174:	fb02 3306 	mla	r3, r2, r6, r3
 800c178:	b289      	uxth	r1, r1
 800c17a:	3001      	adds	r0, #1
 800c17c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c180:	4285      	cmp	r5, r0
 800c182:	f84c 1b04 	str.w	r1, [ip], #4
 800c186:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c18a:	dcec      	bgt.n	800c166 <__multadd+0x12>
 800c18c:	b30e      	cbz	r6, 800c1d2 <__multadd+0x7e>
 800c18e:	68a3      	ldr	r3, [r4, #8]
 800c190:	42ab      	cmp	r3, r5
 800c192:	dc19      	bgt.n	800c1c8 <__multadd+0x74>
 800c194:	6861      	ldr	r1, [r4, #4]
 800c196:	4638      	mov	r0, r7
 800c198:	3101      	adds	r1, #1
 800c19a:	f7ff ff79 	bl	800c090 <_Balloc>
 800c19e:	4680      	mov	r8, r0
 800c1a0:	b928      	cbnz	r0, 800c1ae <__multadd+0x5a>
 800c1a2:	4602      	mov	r2, r0
 800c1a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c1d8 <__multadd+0x84>)
 800c1a6:	480d      	ldr	r0, [pc, #52]	@ (800c1dc <__multadd+0x88>)
 800c1a8:	21ba      	movs	r1, #186	@ 0xba
 800c1aa:	f000 fe5d 	bl	800ce68 <__assert_func>
 800c1ae:	6922      	ldr	r2, [r4, #16]
 800c1b0:	3202      	adds	r2, #2
 800c1b2:	f104 010c 	add.w	r1, r4, #12
 800c1b6:	0092      	lsls	r2, r2, #2
 800c1b8:	300c      	adds	r0, #12
 800c1ba:	f7fe fcb8 	bl	800ab2e <memcpy>
 800c1be:	4621      	mov	r1, r4
 800c1c0:	4638      	mov	r0, r7
 800c1c2:	f7ff ffa5 	bl	800c110 <_Bfree>
 800c1c6:	4644      	mov	r4, r8
 800c1c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1cc:	3501      	adds	r5, #1
 800c1ce:	615e      	str	r6, [r3, #20]
 800c1d0:	6125      	str	r5, [r4, #16]
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d8:	0800d8c9 	.word	0x0800d8c9
 800c1dc:	0800d93a 	.word	0x0800d93a

0800c1e0 <__s2b>:
 800c1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1e4:	460c      	mov	r4, r1
 800c1e6:	4615      	mov	r5, r2
 800c1e8:	461f      	mov	r7, r3
 800c1ea:	2209      	movs	r2, #9
 800c1ec:	3308      	adds	r3, #8
 800c1ee:	4606      	mov	r6, r0
 800c1f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1f4:	2100      	movs	r1, #0
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	db09      	blt.n	800c210 <__s2b+0x30>
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	f7ff ff47 	bl	800c090 <_Balloc>
 800c202:	b940      	cbnz	r0, 800c216 <__s2b+0x36>
 800c204:	4602      	mov	r2, r0
 800c206:	4b19      	ldr	r3, [pc, #100]	@ (800c26c <__s2b+0x8c>)
 800c208:	4819      	ldr	r0, [pc, #100]	@ (800c270 <__s2b+0x90>)
 800c20a:	21d3      	movs	r1, #211	@ 0xd3
 800c20c:	f000 fe2c 	bl	800ce68 <__assert_func>
 800c210:	0052      	lsls	r2, r2, #1
 800c212:	3101      	adds	r1, #1
 800c214:	e7f0      	b.n	800c1f8 <__s2b+0x18>
 800c216:	9b08      	ldr	r3, [sp, #32]
 800c218:	6143      	str	r3, [r0, #20]
 800c21a:	2d09      	cmp	r5, #9
 800c21c:	f04f 0301 	mov.w	r3, #1
 800c220:	6103      	str	r3, [r0, #16]
 800c222:	dd16      	ble.n	800c252 <__s2b+0x72>
 800c224:	f104 0909 	add.w	r9, r4, #9
 800c228:	46c8      	mov	r8, r9
 800c22a:	442c      	add	r4, r5
 800c22c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c230:	4601      	mov	r1, r0
 800c232:	3b30      	subs	r3, #48	@ 0x30
 800c234:	220a      	movs	r2, #10
 800c236:	4630      	mov	r0, r6
 800c238:	f7ff ff8c 	bl	800c154 <__multadd>
 800c23c:	45a0      	cmp	r8, r4
 800c23e:	d1f5      	bne.n	800c22c <__s2b+0x4c>
 800c240:	f1a5 0408 	sub.w	r4, r5, #8
 800c244:	444c      	add	r4, r9
 800c246:	1b2d      	subs	r5, r5, r4
 800c248:	1963      	adds	r3, r4, r5
 800c24a:	42bb      	cmp	r3, r7
 800c24c:	db04      	blt.n	800c258 <__s2b+0x78>
 800c24e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c252:	340a      	adds	r4, #10
 800c254:	2509      	movs	r5, #9
 800c256:	e7f6      	b.n	800c246 <__s2b+0x66>
 800c258:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c25c:	4601      	mov	r1, r0
 800c25e:	3b30      	subs	r3, #48	@ 0x30
 800c260:	220a      	movs	r2, #10
 800c262:	4630      	mov	r0, r6
 800c264:	f7ff ff76 	bl	800c154 <__multadd>
 800c268:	e7ee      	b.n	800c248 <__s2b+0x68>
 800c26a:	bf00      	nop
 800c26c:	0800d8c9 	.word	0x0800d8c9
 800c270:	0800d93a 	.word	0x0800d93a

0800c274 <__hi0bits>:
 800c274:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c278:	4603      	mov	r3, r0
 800c27a:	bf36      	itet	cc
 800c27c:	0403      	lslcc	r3, r0, #16
 800c27e:	2000      	movcs	r0, #0
 800c280:	2010      	movcc	r0, #16
 800c282:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c286:	bf3c      	itt	cc
 800c288:	021b      	lslcc	r3, r3, #8
 800c28a:	3008      	addcc	r0, #8
 800c28c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c290:	bf3c      	itt	cc
 800c292:	011b      	lslcc	r3, r3, #4
 800c294:	3004      	addcc	r0, #4
 800c296:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c29a:	bf3c      	itt	cc
 800c29c:	009b      	lslcc	r3, r3, #2
 800c29e:	3002      	addcc	r0, #2
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	db05      	blt.n	800c2b0 <__hi0bits+0x3c>
 800c2a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c2a8:	f100 0001 	add.w	r0, r0, #1
 800c2ac:	bf08      	it	eq
 800c2ae:	2020      	moveq	r0, #32
 800c2b0:	4770      	bx	lr

0800c2b2 <__lo0bits>:
 800c2b2:	6803      	ldr	r3, [r0, #0]
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	f013 0007 	ands.w	r0, r3, #7
 800c2ba:	d00b      	beq.n	800c2d4 <__lo0bits+0x22>
 800c2bc:	07d9      	lsls	r1, r3, #31
 800c2be:	d421      	bmi.n	800c304 <__lo0bits+0x52>
 800c2c0:	0798      	lsls	r0, r3, #30
 800c2c2:	bf49      	itett	mi
 800c2c4:	085b      	lsrmi	r3, r3, #1
 800c2c6:	089b      	lsrpl	r3, r3, #2
 800c2c8:	2001      	movmi	r0, #1
 800c2ca:	6013      	strmi	r3, [r2, #0]
 800c2cc:	bf5c      	itt	pl
 800c2ce:	6013      	strpl	r3, [r2, #0]
 800c2d0:	2002      	movpl	r0, #2
 800c2d2:	4770      	bx	lr
 800c2d4:	b299      	uxth	r1, r3
 800c2d6:	b909      	cbnz	r1, 800c2dc <__lo0bits+0x2a>
 800c2d8:	0c1b      	lsrs	r3, r3, #16
 800c2da:	2010      	movs	r0, #16
 800c2dc:	b2d9      	uxtb	r1, r3
 800c2de:	b909      	cbnz	r1, 800c2e4 <__lo0bits+0x32>
 800c2e0:	3008      	adds	r0, #8
 800c2e2:	0a1b      	lsrs	r3, r3, #8
 800c2e4:	0719      	lsls	r1, r3, #28
 800c2e6:	bf04      	itt	eq
 800c2e8:	091b      	lsreq	r3, r3, #4
 800c2ea:	3004      	addeq	r0, #4
 800c2ec:	0799      	lsls	r1, r3, #30
 800c2ee:	bf04      	itt	eq
 800c2f0:	089b      	lsreq	r3, r3, #2
 800c2f2:	3002      	addeq	r0, #2
 800c2f4:	07d9      	lsls	r1, r3, #31
 800c2f6:	d403      	bmi.n	800c300 <__lo0bits+0x4e>
 800c2f8:	085b      	lsrs	r3, r3, #1
 800c2fa:	f100 0001 	add.w	r0, r0, #1
 800c2fe:	d003      	beq.n	800c308 <__lo0bits+0x56>
 800c300:	6013      	str	r3, [r2, #0]
 800c302:	4770      	bx	lr
 800c304:	2000      	movs	r0, #0
 800c306:	4770      	bx	lr
 800c308:	2020      	movs	r0, #32
 800c30a:	4770      	bx	lr

0800c30c <__i2b>:
 800c30c:	b510      	push	{r4, lr}
 800c30e:	460c      	mov	r4, r1
 800c310:	2101      	movs	r1, #1
 800c312:	f7ff febd 	bl	800c090 <_Balloc>
 800c316:	4602      	mov	r2, r0
 800c318:	b928      	cbnz	r0, 800c326 <__i2b+0x1a>
 800c31a:	4b05      	ldr	r3, [pc, #20]	@ (800c330 <__i2b+0x24>)
 800c31c:	4805      	ldr	r0, [pc, #20]	@ (800c334 <__i2b+0x28>)
 800c31e:	f240 1145 	movw	r1, #325	@ 0x145
 800c322:	f000 fda1 	bl	800ce68 <__assert_func>
 800c326:	2301      	movs	r3, #1
 800c328:	6144      	str	r4, [r0, #20]
 800c32a:	6103      	str	r3, [r0, #16]
 800c32c:	bd10      	pop	{r4, pc}
 800c32e:	bf00      	nop
 800c330:	0800d8c9 	.word	0x0800d8c9
 800c334:	0800d93a 	.word	0x0800d93a

0800c338 <__multiply>:
 800c338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c33c:	4614      	mov	r4, r2
 800c33e:	690a      	ldr	r2, [r1, #16]
 800c340:	6923      	ldr	r3, [r4, #16]
 800c342:	429a      	cmp	r2, r3
 800c344:	bfa8      	it	ge
 800c346:	4623      	movge	r3, r4
 800c348:	460f      	mov	r7, r1
 800c34a:	bfa4      	itt	ge
 800c34c:	460c      	movge	r4, r1
 800c34e:	461f      	movge	r7, r3
 800c350:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c354:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c358:	68a3      	ldr	r3, [r4, #8]
 800c35a:	6861      	ldr	r1, [r4, #4]
 800c35c:	eb0a 0609 	add.w	r6, sl, r9
 800c360:	42b3      	cmp	r3, r6
 800c362:	b085      	sub	sp, #20
 800c364:	bfb8      	it	lt
 800c366:	3101      	addlt	r1, #1
 800c368:	f7ff fe92 	bl	800c090 <_Balloc>
 800c36c:	b930      	cbnz	r0, 800c37c <__multiply+0x44>
 800c36e:	4602      	mov	r2, r0
 800c370:	4b44      	ldr	r3, [pc, #272]	@ (800c484 <__multiply+0x14c>)
 800c372:	4845      	ldr	r0, [pc, #276]	@ (800c488 <__multiply+0x150>)
 800c374:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c378:	f000 fd76 	bl	800ce68 <__assert_func>
 800c37c:	f100 0514 	add.w	r5, r0, #20
 800c380:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c384:	462b      	mov	r3, r5
 800c386:	2200      	movs	r2, #0
 800c388:	4543      	cmp	r3, r8
 800c38a:	d321      	bcc.n	800c3d0 <__multiply+0x98>
 800c38c:	f107 0114 	add.w	r1, r7, #20
 800c390:	f104 0214 	add.w	r2, r4, #20
 800c394:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c398:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c39c:	9302      	str	r3, [sp, #8]
 800c39e:	1b13      	subs	r3, r2, r4
 800c3a0:	3b15      	subs	r3, #21
 800c3a2:	f023 0303 	bic.w	r3, r3, #3
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	f104 0715 	add.w	r7, r4, #21
 800c3ac:	42ba      	cmp	r2, r7
 800c3ae:	bf38      	it	cc
 800c3b0:	2304      	movcc	r3, #4
 800c3b2:	9301      	str	r3, [sp, #4]
 800c3b4:	9b02      	ldr	r3, [sp, #8]
 800c3b6:	9103      	str	r1, [sp, #12]
 800c3b8:	428b      	cmp	r3, r1
 800c3ba:	d80c      	bhi.n	800c3d6 <__multiply+0x9e>
 800c3bc:	2e00      	cmp	r6, #0
 800c3be:	dd03      	ble.n	800c3c8 <__multiply+0x90>
 800c3c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d05b      	beq.n	800c480 <__multiply+0x148>
 800c3c8:	6106      	str	r6, [r0, #16]
 800c3ca:	b005      	add	sp, #20
 800c3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d0:	f843 2b04 	str.w	r2, [r3], #4
 800c3d4:	e7d8      	b.n	800c388 <__multiply+0x50>
 800c3d6:	f8b1 a000 	ldrh.w	sl, [r1]
 800c3da:	f1ba 0f00 	cmp.w	sl, #0
 800c3de:	d024      	beq.n	800c42a <__multiply+0xf2>
 800c3e0:	f104 0e14 	add.w	lr, r4, #20
 800c3e4:	46a9      	mov	r9, r5
 800c3e6:	f04f 0c00 	mov.w	ip, #0
 800c3ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c3ee:	f8d9 3000 	ldr.w	r3, [r9]
 800c3f2:	fa1f fb87 	uxth.w	fp, r7
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	fb0a 330b 	mla	r3, sl, fp, r3
 800c3fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c400:	f8d9 7000 	ldr.w	r7, [r9]
 800c404:	4463      	add	r3, ip
 800c406:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c40a:	fb0a c70b 	mla	r7, sl, fp, ip
 800c40e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c412:	b29b      	uxth	r3, r3
 800c414:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c418:	4572      	cmp	r2, lr
 800c41a:	f849 3b04 	str.w	r3, [r9], #4
 800c41e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c422:	d8e2      	bhi.n	800c3ea <__multiply+0xb2>
 800c424:	9b01      	ldr	r3, [sp, #4]
 800c426:	f845 c003 	str.w	ip, [r5, r3]
 800c42a:	9b03      	ldr	r3, [sp, #12]
 800c42c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c430:	3104      	adds	r1, #4
 800c432:	f1b9 0f00 	cmp.w	r9, #0
 800c436:	d021      	beq.n	800c47c <__multiply+0x144>
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	f104 0c14 	add.w	ip, r4, #20
 800c43e:	46ae      	mov	lr, r5
 800c440:	f04f 0a00 	mov.w	sl, #0
 800c444:	f8bc b000 	ldrh.w	fp, [ip]
 800c448:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c44c:	fb09 770b 	mla	r7, r9, fp, r7
 800c450:	4457      	add	r7, sl
 800c452:	b29b      	uxth	r3, r3
 800c454:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c458:	f84e 3b04 	str.w	r3, [lr], #4
 800c45c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c460:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c464:	f8be 3000 	ldrh.w	r3, [lr]
 800c468:	fb09 330a 	mla	r3, r9, sl, r3
 800c46c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c470:	4562      	cmp	r2, ip
 800c472:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c476:	d8e5      	bhi.n	800c444 <__multiply+0x10c>
 800c478:	9f01      	ldr	r7, [sp, #4]
 800c47a:	51eb      	str	r3, [r5, r7]
 800c47c:	3504      	adds	r5, #4
 800c47e:	e799      	b.n	800c3b4 <__multiply+0x7c>
 800c480:	3e01      	subs	r6, #1
 800c482:	e79b      	b.n	800c3bc <__multiply+0x84>
 800c484:	0800d8c9 	.word	0x0800d8c9
 800c488:	0800d93a 	.word	0x0800d93a

0800c48c <__pow5mult>:
 800c48c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c490:	4615      	mov	r5, r2
 800c492:	f012 0203 	ands.w	r2, r2, #3
 800c496:	4607      	mov	r7, r0
 800c498:	460e      	mov	r6, r1
 800c49a:	d007      	beq.n	800c4ac <__pow5mult+0x20>
 800c49c:	4c25      	ldr	r4, [pc, #148]	@ (800c534 <__pow5mult+0xa8>)
 800c49e:	3a01      	subs	r2, #1
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c4a6:	f7ff fe55 	bl	800c154 <__multadd>
 800c4aa:	4606      	mov	r6, r0
 800c4ac:	10ad      	asrs	r5, r5, #2
 800c4ae:	d03d      	beq.n	800c52c <__pow5mult+0xa0>
 800c4b0:	69fc      	ldr	r4, [r7, #28]
 800c4b2:	b97c      	cbnz	r4, 800c4d4 <__pow5mult+0x48>
 800c4b4:	2010      	movs	r0, #16
 800c4b6:	f7ff fd23 	bl	800bf00 <malloc>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	61f8      	str	r0, [r7, #28]
 800c4be:	b928      	cbnz	r0, 800c4cc <__pow5mult+0x40>
 800c4c0:	4b1d      	ldr	r3, [pc, #116]	@ (800c538 <__pow5mult+0xac>)
 800c4c2:	481e      	ldr	r0, [pc, #120]	@ (800c53c <__pow5mult+0xb0>)
 800c4c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c4c8:	f000 fcce 	bl	800ce68 <__assert_func>
 800c4cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4d0:	6004      	str	r4, [r0, #0]
 800c4d2:	60c4      	str	r4, [r0, #12]
 800c4d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c4d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4dc:	b94c      	cbnz	r4, 800c4f2 <__pow5mult+0x66>
 800c4de:	f240 2171 	movw	r1, #625	@ 0x271
 800c4e2:	4638      	mov	r0, r7
 800c4e4:	f7ff ff12 	bl	800c30c <__i2b>
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4ee:	4604      	mov	r4, r0
 800c4f0:	6003      	str	r3, [r0, #0]
 800c4f2:	f04f 0900 	mov.w	r9, #0
 800c4f6:	07eb      	lsls	r3, r5, #31
 800c4f8:	d50a      	bpl.n	800c510 <__pow5mult+0x84>
 800c4fa:	4631      	mov	r1, r6
 800c4fc:	4622      	mov	r2, r4
 800c4fe:	4638      	mov	r0, r7
 800c500:	f7ff ff1a 	bl	800c338 <__multiply>
 800c504:	4631      	mov	r1, r6
 800c506:	4680      	mov	r8, r0
 800c508:	4638      	mov	r0, r7
 800c50a:	f7ff fe01 	bl	800c110 <_Bfree>
 800c50e:	4646      	mov	r6, r8
 800c510:	106d      	asrs	r5, r5, #1
 800c512:	d00b      	beq.n	800c52c <__pow5mult+0xa0>
 800c514:	6820      	ldr	r0, [r4, #0]
 800c516:	b938      	cbnz	r0, 800c528 <__pow5mult+0x9c>
 800c518:	4622      	mov	r2, r4
 800c51a:	4621      	mov	r1, r4
 800c51c:	4638      	mov	r0, r7
 800c51e:	f7ff ff0b 	bl	800c338 <__multiply>
 800c522:	6020      	str	r0, [r4, #0]
 800c524:	f8c0 9000 	str.w	r9, [r0]
 800c528:	4604      	mov	r4, r0
 800c52a:	e7e4      	b.n	800c4f6 <__pow5mult+0x6a>
 800c52c:	4630      	mov	r0, r6
 800c52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c532:	bf00      	nop
 800c534:	0800d994 	.word	0x0800d994
 800c538:	0800d85a 	.word	0x0800d85a
 800c53c:	0800d93a 	.word	0x0800d93a

0800c540 <__lshift>:
 800c540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c544:	460c      	mov	r4, r1
 800c546:	6849      	ldr	r1, [r1, #4]
 800c548:	6923      	ldr	r3, [r4, #16]
 800c54a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c54e:	68a3      	ldr	r3, [r4, #8]
 800c550:	4607      	mov	r7, r0
 800c552:	4691      	mov	r9, r2
 800c554:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c558:	f108 0601 	add.w	r6, r8, #1
 800c55c:	42b3      	cmp	r3, r6
 800c55e:	db0b      	blt.n	800c578 <__lshift+0x38>
 800c560:	4638      	mov	r0, r7
 800c562:	f7ff fd95 	bl	800c090 <_Balloc>
 800c566:	4605      	mov	r5, r0
 800c568:	b948      	cbnz	r0, 800c57e <__lshift+0x3e>
 800c56a:	4602      	mov	r2, r0
 800c56c:	4b28      	ldr	r3, [pc, #160]	@ (800c610 <__lshift+0xd0>)
 800c56e:	4829      	ldr	r0, [pc, #164]	@ (800c614 <__lshift+0xd4>)
 800c570:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c574:	f000 fc78 	bl	800ce68 <__assert_func>
 800c578:	3101      	adds	r1, #1
 800c57a:	005b      	lsls	r3, r3, #1
 800c57c:	e7ee      	b.n	800c55c <__lshift+0x1c>
 800c57e:	2300      	movs	r3, #0
 800c580:	f100 0114 	add.w	r1, r0, #20
 800c584:	f100 0210 	add.w	r2, r0, #16
 800c588:	4618      	mov	r0, r3
 800c58a:	4553      	cmp	r3, sl
 800c58c:	db33      	blt.n	800c5f6 <__lshift+0xb6>
 800c58e:	6920      	ldr	r0, [r4, #16]
 800c590:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c594:	f104 0314 	add.w	r3, r4, #20
 800c598:	f019 091f 	ands.w	r9, r9, #31
 800c59c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c5a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c5a4:	d02b      	beq.n	800c5fe <__lshift+0xbe>
 800c5a6:	f1c9 0e20 	rsb	lr, r9, #32
 800c5aa:	468a      	mov	sl, r1
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	6818      	ldr	r0, [r3, #0]
 800c5b0:	fa00 f009 	lsl.w	r0, r0, r9
 800c5b4:	4310      	orrs	r0, r2
 800c5b6:	f84a 0b04 	str.w	r0, [sl], #4
 800c5ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5be:	459c      	cmp	ip, r3
 800c5c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c5c4:	d8f3      	bhi.n	800c5ae <__lshift+0x6e>
 800c5c6:	ebac 0304 	sub.w	r3, ip, r4
 800c5ca:	3b15      	subs	r3, #21
 800c5cc:	f023 0303 	bic.w	r3, r3, #3
 800c5d0:	3304      	adds	r3, #4
 800c5d2:	f104 0015 	add.w	r0, r4, #21
 800c5d6:	4584      	cmp	ip, r0
 800c5d8:	bf38      	it	cc
 800c5da:	2304      	movcc	r3, #4
 800c5dc:	50ca      	str	r2, [r1, r3]
 800c5de:	b10a      	cbz	r2, 800c5e4 <__lshift+0xa4>
 800c5e0:	f108 0602 	add.w	r6, r8, #2
 800c5e4:	3e01      	subs	r6, #1
 800c5e6:	4638      	mov	r0, r7
 800c5e8:	612e      	str	r6, [r5, #16]
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	f7ff fd90 	bl	800c110 <_Bfree>
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	e7c5      	b.n	800c58a <__lshift+0x4a>
 800c5fe:	3904      	subs	r1, #4
 800c600:	f853 2b04 	ldr.w	r2, [r3], #4
 800c604:	f841 2f04 	str.w	r2, [r1, #4]!
 800c608:	459c      	cmp	ip, r3
 800c60a:	d8f9      	bhi.n	800c600 <__lshift+0xc0>
 800c60c:	e7ea      	b.n	800c5e4 <__lshift+0xa4>
 800c60e:	bf00      	nop
 800c610:	0800d8c9 	.word	0x0800d8c9
 800c614:	0800d93a 	.word	0x0800d93a

0800c618 <__mcmp>:
 800c618:	690a      	ldr	r2, [r1, #16]
 800c61a:	4603      	mov	r3, r0
 800c61c:	6900      	ldr	r0, [r0, #16]
 800c61e:	1a80      	subs	r0, r0, r2
 800c620:	b530      	push	{r4, r5, lr}
 800c622:	d10e      	bne.n	800c642 <__mcmp+0x2a>
 800c624:	3314      	adds	r3, #20
 800c626:	3114      	adds	r1, #20
 800c628:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c62c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c630:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c634:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c638:	4295      	cmp	r5, r2
 800c63a:	d003      	beq.n	800c644 <__mcmp+0x2c>
 800c63c:	d205      	bcs.n	800c64a <__mcmp+0x32>
 800c63e:	f04f 30ff 	mov.w	r0, #4294967295
 800c642:	bd30      	pop	{r4, r5, pc}
 800c644:	42a3      	cmp	r3, r4
 800c646:	d3f3      	bcc.n	800c630 <__mcmp+0x18>
 800c648:	e7fb      	b.n	800c642 <__mcmp+0x2a>
 800c64a:	2001      	movs	r0, #1
 800c64c:	e7f9      	b.n	800c642 <__mcmp+0x2a>
	...

0800c650 <__mdiff>:
 800c650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	4689      	mov	r9, r1
 800c656:	4606      	mov	r6, r0
 800c658:	4611      	mov	r1, r2
 800c65a:	4648      	mov	r0, r9
 800c65c:	4614      	mov	r4, r2
 800c65e:	f7ff ffdb 	bl	800c618 <__mcmp>
 800c662:	1e05      	subs	r5, r0, #0
 800c664:	d112      	bne.n	800c68c <__mdiff+0x3c>
 800c666:	4629      	mov	r1, r5
 800c668:	4630      	mov	r0, r6
 800c66a:	f7ff fd11 	bl	800c090 <_Balloc>
 800c66e:	4602      	mov	r2, r0
 800c670:	b928      	cbnz	r0, 800c67e <__mdiff+0x2e>
 800c672:	4b3f      	ldr	r3, [pc, #252]	@ (800c770 <__mdiff+0x120>)
 800c674:	f240 2137 	movw	r1, #567	@ 0x237
 800c678:	483e      	ldr	r0, [pc, #248]	@ (800c774 <__mdiff+0x124>)
 800c67a:	f000 fbf5 	bl	800ce68 <__assert_func>
 800c67e:	2301      	movs	r3, #1
 800c680:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c684:	4610      	mov	r0, r2
 800c686:	b003      	add	sp, #12
 800c688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68c:	bfbc      	itt	lt
 800c68e:	464b      	movlt	r3, r9
 800c690:	46a1      	movlt	r9, r4
 800c692:	4630      	mov	r0, r6
 800c694:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c698:	bfba      	itte	lt
 800c69a:	461c      	movlt	r4, r3
 800c69c:	2501      	movlt	r5, #1
 800c69e:	2500      	movge	r5, #0
 800c6a0:	f7ff fcf6 	bl	800c090 <_Balloc>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	b918      	cbnz	r0, 800c6b0 <__mdiff+0x60>
 800c6a8:	4b31      	ldr	r3, [pc, #196]	@ (800c770 <__mdiff+0x120>)
 800c6aa:	f240 2145 	movw	r1, #581	@ 0x245
 800c6ae:	e7e3      	b.n	800c678 <__mdiff+0x28>
 800c6b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c6b4:	6926      	ldr	r6, [r4, #16]
 800c6b6:	60c5      	str	r5, [r0, #12]
 800c6b8:	f109 0310 	add.w	r3, r9, #16
 800c6bc:	f109 0514 	add.w	r5, r9, #20
 800c6c0:	f104 0e14 	add.w	lr, r4, #20
 800c6c4:	f100 0b14 	add.w	fp, r0, #20
 800c6c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c6cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c6d0:	9301      	str	r3, [sp, #4]
 800c6d2:	46d9      	mov	r9, fp
 800c6d4:	f04f 0c00 	mov.w	ip, #0
 800c6d8:	9b01      	ldr	r3, [sp, #4]
 800c6da:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c6de:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c6e2:	9301      	str	r3, [sp, #4]
 800c6e4:	fa1f f38a 	uxth.w	r3, sl
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	b283      	uxth	r3, r0
 800c6ec:	1acb      	subs	r3, r1, r3
 800c6ee:	0c00      	lsrs	r0, r0, #16
 800c6f0:	4463      	add	r3, ip
 800c6f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c6f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c700:	4576      	cmp	r6, lr
 800c702:	f849 3b04 	str.w	r3, [r9], #4
 800c706:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c70a:	d8e5      	bhi.n	800c6d8 <__mdiff+0x88>
 800c70c:	1b33      	subs	r3, r6, r4
 800c70e:	3b15      	subs	r3, #21
 800c710:	f023 0303 	bic.w	r3, r3, #3
 800c714:	3415      	adds	r4, #21
 800c716:	3304      	adds	r3, #4
 800c718:	42a6      	cmp	r6, r4
 800c71a:	bf38      	it	cc
 800c71c:	2304      	movcc	r3, #4
 800c71e:	441d      	add	r5, r3
 800c720:	445b      	add	r3, fp
 800c722:	461e      	mov	r6, r3
 800c724:	462c      	mov	r4, r5
 800c726:	4544      	cmp	r4, r8
 800c728:	d30e      	bcc.n	800c748 <__mdiff+0xf8>
 800c72a:	f108 0103 	add.w	r1, r8, #3
 800c72e:	1b49      	subs	r1, r1, r5
 800c730:	f021 0103 	bic.w	r1, r1, #3
 800c734:	3d03      	subs	r5, #3
 800c736:	45a8      	cmp	r8, r5
 800c738:	bf38      	it	cc
 800c73a:	2100      	movcc	r1, #0
 800c73c:	440b      	add	r3, r1
 800c73e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c742:	b191      	cbz	r1, 800c76a <__mdiff+0x11a>
 800c744:	6117      	str	r7, [r2, #16]
 800c746:	e79d      	b.n	800c684 <__mdiff+0x34>
 800c748:	f854 1b04 	ldr.w	r1, [r4], #4
 800c74c:	46e6      	mov	lr, ip
 800c74e:	0c08      	lsrs	r0, r1, #16
 800c750:	fa1c fc81 	uxtah	ip, ip, r1
 800c754:	4471      	add	r1, lr
 800c756:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c75a:	b289      	uxth	r1, r1
 800c75c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c760:	f846 1b04 	str.w	r1, [r6], #4
 800c764:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c768:	e7dd      	b.n	800c726 <__mdiff+0xd6>
 800c76a:	3f01      	subs	r7, #1
 800c76c:	e7e7      	b.n	800c73e <__mdiff+0xee>
 800c76e:	bf00      	nop
 800c770:	0800d8c9 	.word	0x0800d8c9
 800c774:	0800d93a 	.word	0x0800d93a

0800c778 <__ulp>:
 800c778:	b082      	sub	sp, #8
 800c77a:	ed8d 0b00 	vstr	d0, [sp]
 800c77e:	9a01      	ldr	r2, [sp, #4]
 800c780:	4b0f      	ldr	r3, [pc, #60]	@ (800c7c0 <__ulp+0x48>)
 800c782:	4013      	ands	r3, r2
 800c784:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c788:	2b00      	cmp	r3, #0
 800c78a:	dc08      	bgt.n	800c79e <__ulp+0x26>
 800c78c:	425b      	negs	r3, r3
 800c78e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c792:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c796:	da04      	bge.n	800c7a2 <__ulp+0x2a>
 800c798:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c79c:	4113      	asrs	r3, r2
 800c79e:	2200      	movs	r2, #0
 800c7a0:	e008      	b.n	800c7b4 <__ulp+0x3c>
 800c7a2:	f1a2 0314 	sub.w	r3, r2, #20
 800c7a6:	2b1e      	cmp	r3, #30
 800c7a8:	bfda      	itte	le
 800c7aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c7ae:	40da      	lsrle	r2, r3
 800c7b0:	2201      	movgt	r2, #1
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	4610      	mov	r0, r2
 800c7b8:	ec41 0b10 	vmov	d0, r0, r1
 800c7bc:	b002      	add	sp, #8
 800c7be:	4770      	bx	lr
 800c7c0:	7ff00000 	.word	0x7ff00000

0800c7c4 <__b2d>:
 800c7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c8:	6906      	ldr	r6, [r0, #16]
 800c7ca:	f100 0814 	add.w	r8, r0, #20
 800c7ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c7d2:	1f37      	subs	r7, r6, #4
 800c7d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c7d8:	4610      	mov	r0, r2
 800c7da:	f7ff fd4b 	bl	800c274 <__hi0bits>
 800c7de:	f1c0 0320 	rsb	r3, r0, #32
 800c7e2:	280a      	cmp	r0, #10
 800c7e4:	600b      	str	r3, [r1, #0]
 800c7e6:	491b      	ldr	r1, [pc, #108]	@ (800c854 <__b2d+0x90>)
 800c7e8:	dc15      	bgt.n	800c816 <__b2d+0x52>
 800c7ea:	f1c0 0c0b 	rsb	ip, r0, #11
 800c7ee:	fa22 f30c 	lsr.w	r3, r2, ip
 800c7f2:	45b8      	cmp	r8, r7
 800c7f4:	ea43 0501 	orr.w	r5, r3, r1
 800c7f8:	bf34      	ite	cc
 800c7fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c7fe:	2300      	movcs	r3, #0
 800c800:	3015      	adds	r0, #21
 800c802:	fa02 f000 	lsl.w	r0, r2, r0
 800c806:	fa23 f30c 	lsr.w	r3, r3, ip
 800c80a:	4303      	orrs	r3, r0
 800c80c:	461c      	mov	r4, r3
 800c80e:	ec45 4b10 	vmov	d0, r4, r5
 800c812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c816:	45b8      	cmp	r8, r7
 800c818:	bf3a      	itte	cc
 800c81a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c81e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c822:	2300      	movcs	r3, #0
 800c824:	380b      	subs	r0, #11
 800c826:	d012      	beq.n	800c84e <__b2d+0x8a>
 800c828:	f1c0 0120 	rsb	r1, r0, #32
 800c82c:	fa23 f401 	lsr.w	r4, r3, r1
 800c830:	4082      	lsls	r2, r0
 800c832:	4322      	orrs	r2, r4
 800c834:	4547      	cmp	r7, r8
 800c836:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c83a:	bf8c      	ite	hi
 800c83c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c840:	2200      	movls	r2, #0
 800c842:	4083      	lsls	r3, r0
 800c844:	40ca      	lsrs	r2, r1
 800c846:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c84a:	4313      	orrs	r3, r2
 800c84c:	e7de      	b.n	800c80c <__b2d+0x48>
 800c84e:	ea42 0501 	orr.w	r5, r2, r1
 800c852:	e7db      	b.n	800c80c <__b2d+0x48>
 800c854:	3ff00000 	.word	0x3ff00000

0800c858 <__d2b>:
 800c858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c85c:	460f      	mov	r7, r1
 800c85e:	2101      	movs	r1, #1
 800c860:	ec59 8b10 	vmov	r8, r9, d0
 800c864:	4616      	mov	r6, r2
 800c866:	f7ff fc13 	bl	800c090 <_Balloc>
 800c86a:	4604      	mov	r4, r0
 800c86c:	b930      	cbnz	r0, 800c87c <__d2b+0x24>
 800c86e:	4602      	mov	r2, r0
 800c870:	4b23      	ldr	r3, [pc, #140]	@ (800c900 <__d2b+0xa8>)
 800c872:	4824      	ldr	r0, [pc, #144]	@ (800c904 <__d2b+0xac>)
 800c874:	f240 310f 	movw	r1, #783	@ 0x30f
 800c878:	f000 faf6 	bl	800ce68 <__assert_func>
 800c87c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c884:	b10d      	cbz	r5, 800c88a <__d2b+0x32>
 800c886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c88a:	9301      	str	r3, [sp, #4]
 800c88c:	f1b8 0300 	subs.w	r3, r8, #0
 800c890:	d023      	beq.n	800c8da <__d2b+0x82>
 800c892:	4668      	mov	r0, sp
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	f7ff fd0c 	bl	800c2b2 <__lo0bits>
 800c89a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c89e:	b1d0      	cbz	r0, 800c8d6 <__d2b+0x7e>
 800c8a0:	f1c0 0320 	rsb	r3, r0, #32
 800c8a4:	fa02 f303 	lsl.w	r3, r2, r3
 800c8a8:	430b      	orrs	r3, r1
 800c8aa:	40c2      	lsrs	r2, r0
 800c8ac:	6163      	str	r3, [r4, #20]
 800c8ae:	9201      	str	r2, [sp, #4]
 800c8b0:	9b01      	ldr	r3, [sp, #4]
 800c8b2:	61a3      	str	r3, [r4, #24]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	bf0c      	ite	eq
 800c8b8:	2201      	moveq	r2, #1
 800c8ba:	2202      	movne	r2, #2
 800c8bc:	6122      	str	r2, [r4, #16]
 800c8be:	b1a5      	cbz	r5, 800c8ea <__d2b+0x92>
 800c8c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c8c4:	4405      	add	r5, r0
 800c8c6:	603d      	str	r5, [r7, #0]
 800c8c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c8cc:	6030      	str	r0, [r6, #0]
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	b003      	add	sp, #12
 800c8d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8d6:	6161      	str	r1, [r4, #20]
 800c8d8:	e7ea      	b.n	800c8b0 <__d2b+0x58>
 800c8da:	a801      	add	r0, sp, #4
 800c8dc:	f7ff fce9 	bl	800c2b2 <__lo0bits>
 800c8e0:	9b01      	ldr	r3, [sp, #4]
 800c8e2:	6163      	str	r3, [r4, #20]
 800c8e4:	3020      	adds	r0, #32
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	e7e8      	b.n	800c8bc <__d2b+0x64>
 800c8ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c8f2:	6038      	str	r0, [r7, #0]
 800c8f4:	6918      	ldr	r0, [r3, #16]
 800c8f6:	f7ff fcbd 	bl	800c274 <__hi0bits>
 800c8fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8fe:	e7e5      	b.n	800c8cc <__d2b+0x74>
 800c900:	0800d8c9 	.word	0x0800d8c9
 800c904:	0800d93a 	.word	0x0800d93a

0800c908 <__ratio>:
 800c908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c90c:	b085      	sub	sp, #20
 800c90e:	e9cd 1000 	strd	r1, r0, [sp]
 800c912:	a902      	add	r1, sp, #8
 800c914:	f7ff ff56 	bl	800c7c4 <__b2d>
 800c918:	9800      	ldr	r0, [sp, #0]
 800c91a:	a903      	add	r1, sp, #12
 800c91c:	ec55 4b10 	vmov	r4, r5, d0
 800c920:	f7ff ff50 	bl	800c7c4 <__b2d>
 800c924:	9b01      	ldr	r3, [sp, #4]
 800c926:	6919      	ldr	r1, [r3, #16]
 800c928:	9b00      	ldr	r3, [sp, #0]
 800c92a:	691b      	ldr	r3, [r3, #16]
 800c92c:	1ac9      	subs	r1, r1, r3
 800c92e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c932:	1a9b      	subs	r3, r3, r2
 800c934:	ec5b ab10 	vmov	sl, fp, d0
 800c938:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	bfce      	itee	gt
 800c940:	462a      	movgt	r2, r5
 800c942:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c946:	465a      	movle	r2, fp
 800c948:	462f      	mov	r7, r5
 800c94a:	46d9      	mov	r9, fp
 800c94c:	bfcc      	ite	gt
 800c94e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c952:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c956:	464b      	mov	r3, r9
 800c958:	4652      	mov	r2, sl
 800c95a:	4620      	mov	r0, r4
 800c95c:	4639      	mov	r1, r7
 800c95e:	f7f3 ff95 	bl	800088c <__aeabi_ddiv>
 800c962:	ec41 0b10 	vmov	d0, r0, r1
 800c966:	b005      	add	sp, #20
 800c968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c96c <__copybits>:
 800c96c:	3901      	subs	r1, #1
 800c96e:	b570      	push	{r4, r5, r6, lr}
 800c970:	1149      	asrs	r1, r1, #5
 800c972:	6914      	ldr	r4, [r2, #16]
 800c974:	3101      	adds	r1, #1
 800c976:	f102 0314 	add.w	r3, r2, #20
 800c97a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c97e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c982:	1f05      	subs	r5, r0, #4
 800c984:	42a3      	cmp	r3, r4
 800c986:	d30c      	bcc.n	800c9a2 <__copybits+0x36>
 800c988:	1aa3      	subs	r3, r4, r2
 800c98a:	3b11      	subs	r3, #17
 800c98c:	f023 0303 	bic.w	r3, r3, #3
 800c990:	3211      	adds	r2, #17
 800c992:	42a2      	cmp	r2, r4
 800c994:	bf88      	it	hi
 800c996:	2300      	movhi	r3, #0
 800c998:	4418      	add	r0, r3
 800c99a:	2300      	movs	r3, #0
 800c99c:	4288      	cmp	r0, r1
 800c99e:	d305      	bcc.n	800c9ac <__copybits+0x40>
 800c9a0:	bd70      	pop	{r4, r5, r6, pc}
 800c9a2:	f853 6b04 	ldr.w	r6, [r3], #4
 800c9a6:	f845 6f04 	str.w	r6, [r5, #4]!
 800c9aa:	e7eb      	b.n	800c984 <__copybits+0x18>
 800c9ac:	f840 3b04 	str.w	r3, [r0], #4
 800c9b0:	e7f4      	b.n	800c99c <__copybits+0x30>

0800c9b2 <__any_on>:
 800c9b2:	f100 0214 	add.w	r2, r0, #20
 800c9b6:	6900      	ldr	r0, [r0, #16]
 800c9b8:	114b      	asrs	r3, r1, #5
 800c9ba:	4298      	cmp	r0, r3
 800c9bc:	b510      	push	{r4, lr}
 800c9be:	db11      	blt.n	800c9e4 <__any_on+0x32>
 800c9c0:	dd0a      	ble.n	800c9d8 <__any_on+0x26>
 800c9c2:	f011 011f 	ands.w	r1, r1, #31
 800c9c6:	d007      	beq.n	800c9d8 <__any_on+0x26>
 800c9c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9cc:	fa24 f001 	lsr.w	r0, r4, r1
 800c9d0:	fa00 f101 	lsl.w	r1, r0, r1
 800c9d4:	428c      	cmp	r4, r1
 800c9d6:	d10b      	bne.n	800c9f0 <__any_on+0x3e>
 800c9d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d803      	bhi.n	800c9e8 <__any_on+0x36>
 800c9e0:	2000      	movs	r0, #0
 800c9e2:	bd10      	pop	{r4, pc}
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	e7f7      	b.n	800c9d8 <__any_on+0x26>
 800c9e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9ec:	2900      	cmp	r1, #0
 800c9ee:	d0f5      	beq.n	800c9dc <__any_on+0x2a>
 800c9f0:	2001      	movs	r0, #1
 800c9f2:	e7f6      	b.n	800c9e2 <__any_on+0x30>

0800c9f4 <__ascii_wctomb>:
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	4608      	mov	r0, r1
 800c9f8:	b141      	cbz	r1, 800ca0c <__ascii_wctomb+0x18>
 800c9fa:	2aff      	cmp	r2, #255	@ 0xff
 800c9fc:	d904      	bls.n	800ca08 <__ascii_wctomb+0x14>
 800c9fe:	228a      	movs	r2, #138	@ 0x8a
 800ca00:	601a      	str	r2, [r3, #0]
 800ca02:	f04f 30ff 	mov.w	r0, #4294967295
 800ca06:	4770      	bx	lr
 800ca08:	700a      	strb	r2, [r1, #0]
 800ca0a:	2001      	movs	r0, #1
 800ca0c:	4770      	bx	lr

0800ca0e <__ssputs_r>:
 800ca0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca12:	688e      	ldr	r6, [r1, #8]
 800ca14:	461f      	mov	r7, r3
 800ca16:	42be      	cmp	r6, r7
 800ca18:	680b      	ldr	r3, [r1, #0]
 800ca1a:	4682      	mov	sl, r0
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	4690      	mov	r8, r2
 800ca20:	d82d      	bhi.n	800ca7e <__ssputs_r+0x70>
 800ca22:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca26:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ca2a:	d026      	beq.n	800ca7a <__ssputs_r+0x6c>
 800ca2c:	6965      	ldr	r5, [r4, #20]
 800ca2e:	6909      	ldr	r1, [r1, #16]
 800ca30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca34:	eba3 0901 	sub.w	r9, r3, r1
 800ca38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca3c:	1c7b      	adds	r3, r7, #1
 800ca3e:	444b      	add	r3, r9
 800ca40:	106d      	asrs	r5, r5, #1
 800ca42:	429d      	cmp	r5, r3
 800ca44:	bf38      	it	cc
 800ca46:	461d      	movcc	r5, r3
 800ca48:	0553      	lsls	r3, r2, #21
 800ca4a:	d527      	bpl.n	800ca9c <__ssputs_r+0x8e>
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	f7ff fa81 	bl	800bf54 <_malloc_r>
 800ca52:	4606      	mov	r6, r0
 800ca54:	b360      	cbz	r0, 800cab0 <__ssputs_r+0xa2>
 800ca56:	6921      	ldr	r1, [r4, #16]
 800ca58:	464a      	mov	r2, r9
 800ca5a:	f7fe f868 	bl	800ab2e <memcpy>
 800ca5e:	89a3      	ldrh	r3, [r4, #12]
 800ca60:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ca64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca68:	81a3      	strh	r3, [r4, #12]
 800ca6a:	6126      	str	r6, [r4, #16]
 800ca6c:	6165      	str	r5, [r4, #20]
 800ca6e:	444e      	add	r6, r9
 800ca70:	eba5 0509 	sub.w	r5, r5, r9
 800ca74:	6026      	str	r6, [r4, #0]
 800ca76:	60a5      	str	r5, [r4, #8]
 800ca78:	463e      	mov	r6, r7
 800ca7a:	42be      	cmp	r6, r7
 800ca7c:	d900      	bls.n	800ca80 <__ssputs_r+0x72>
 800ca7e:	463e      	mov	r6, r7
 800ca80:	6820      	ldr	r0, [r4, #0]
 800ca82:	4632      	mov	r2, r6
 800ca84:	4641      	mov	r1, r8
 800ca86:	f000 f9c5 	bl	800ce14 <memmove>
 800ca8a:	68a3      	ldr	r3, [r4, #8]
 800ca8c:	1b9b      	subs	r3, r3, r6
 800ca8e:	60a3      	str	r3, [r4, #8]
 800ca90:	6823      	ldr	r3, [r4, #0]
 800ca92:	4433      	add	r3, r6
 800ca94:	6023      	str	r3, [r4, #0]
 800ca96:	2000      	movs	r0, #0
 800ca98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca9c:	462a      	mov	r2, r5
 800ca9e:	f000 fa15 	bl	800cecc <_realloc_r>
 800caa2:	4606      	mov	r6, r0
 800caa4:	2800      	cmp	r0, #0
 800caa6:	d1e0      	bne.n	800ca6a <__ssputs_r+0x5c>
 800caa8:	6921      	ldr	r1, [r4, #16]
 800caaa:	4650      	mov	r0, sl
 800caac:	f7fe fea4 	bl	800b7f8 <_free_r>
 800cab0:	230c      	movs	r3, #12
 800cab2:	f8ca 3000 	str.w	r3, [sl]
 800cab6:	89a3      	ldrh	r3, [r4, #12]
 800cab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cabc:	81a3      	strh	r3, [r4, #12]
 800cabe:	f04f 30ff 	mov.w	r0, #4294967295
 800cac2:	e7e9      	b.n	800ca98 <__ssputs_r+0x8a>

0800cac4 <_svfiprintf_r>:
 800cac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac8:	4698      	mov	r8, r3
 800caca:	898b      	ldrh	r3, [r1, #12]
 800cacc:	061b      	lsls	r3, r3, #24
 800cace:	b09d      	sub	sp, #116	@ 0x74
 800cad0:	4607      	mov	r7, r0
 800cad2:	460d      	mov	r5, r1
 800cad4:	4614      	mov	r4, r2
 800cad6:	d510      	bpl.n	800cafa <_svfiprintf_r+0x36>
 800cad8:	690b      	ldr	r3, [r1, #16]
 800cada:	b973      	cbnz	r3, 800cafa <_svfiprintf_r+0x36>
 800cadc:	2140      	movs	r1, #64	@ 0x40
 800cade:	f7ff fa39 	bl	800bf54 <_malloc_r>
 800cae2:	6028      	str	r0, [r5, #0]
 800cae4:	6128      	str	r0, [r5, #16]
 800cae6:	b930      	cbnz	r0, 800caf6 <_svfiprintf_r+0x32>
 800cae8:	230c      	movs	r3, #12
 800caea:	603b      	str	r3, [r7, #0]
 800caec:	f04f 30ff 	mov.w	r0, #4294967295
 800caf0:	b01d      	add	sp, #116	@ 0x74
 800caf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caf6:	2340      	movs	r3, #64	@ 0x40
 800caf8:	616b      	str	r3, [r5, #20]
 800cafa:	2300      	movs	r3, #0
 800cafc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cafe:	2320      	movs	r3, #32
 800cb00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb04:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb08:	2330      	movs	r3, #48	@ 0x30
 800cb0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cca8 <_svfiprintf_r+0x1e4>
 800cb0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb12:	f04f 0901 	mov.w	r9, #1
 800cb16:	4623      	mov	r3, r4
 800cb18:	469a      	mov	sl, r3
 800cb1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb1e:	b10a      	cbz	r2, 800cb24 <_svfiprintf_r+0x60>
 800cb20:	2a25      	cmp	r2, #37	@ 0x25
 800cb22:	d1f9      	bne.n	800cb18 <_svfiprintf_r+0x54>
 800cb24:	ebba 0b04 	subs.w	fp, sl, r4
 800cb28:	d00b      	beq.n	800cb42 <_svfiprintf_r+0x7e>
 800cb2a:	465b      	mov	r3, fp
 800cb2c:	4622      	mov	r2, r4
 800cb2e:	4629      	mov	r1, r5
 800cb30:	4638      	mov	r0, r7
 800cb32:	f7ff ff6c 	bl	800ca0e <__ssputs_r>
 800cb36:	3001      	adds	r0, #1
 800cb38:	f000 80a7 	beq.w	800cc8a <_svfiprintf_r+0x1c6>
 800cb3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb3e:	445a      	add	r2, fp
 800cb40:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb42:	f89a 3000 	ldrb.w	r3, [sl]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	f000 809f 	beq.w	800cc8a <_svfiprintf_r+0x1c6>
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb56:	f10a 0a01 	add.w	sl, sl, #1
 800cb5a:	9304      	str	r3, [sp, #16]
 800cb5c:	9307      	str	r3, [sp, #28]
 800cb5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb62:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb64:	4654      	mov	r4, sl
 800cb66:	2205      	movs	r2, #5
 800cb68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb6c:	484e      	ldr	r0, [pc, #312]	@ (800cca8 <_svfiprintf_r+0x1e4>)
 800cb6e:	f7f3 fb4f 	bl	8000210 <memchr>
 800cb72:	9a04      	ldr	r2, [sp, #16]
 800cb74:	b9d8      	cbnz	r0, 800cbae <_svfiprintf_r+0xea>
 800cb76:	06d0      	lsls	r0, r2, #27
 800cb78:	bf44      	itt	mi
 800cb7a:	2320      	movmi	r3, #32
 800cb7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb80:	0711      	lsls	r1, r2, #28
 800cb82:	bf44      	itt	mi
 800cb84:	232b      	movmi	r3, #43	@ 0x2b
 800cb86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb8a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb90:	d015      	beq.n	800cbbe <_svfiprintf_r+0xfa>
 800cb92:	9a07      	ldr	r2, [sp, #28]
 800cb94:	4654      	mov	r4, sl
 800cb96:	2000      	movs	r0, #0
 800cb98:	f04f 0c0a 	mov.w	ip, #10
 800cb9c:	4621      	mov	r1, r4
 800cb9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cba2:	3b30      	subs	r3, #48	@ 0x30
 800cba4:	2b09      	cmp	r3, #9
 800cba6:	d94b      	bls.n	800cc40 <_svfiprintf_r+0x17c>
 800cba8:	b1b0      	cbz	r0, 800cbd8 <_svfiprintf_r+0x114>
 800cbaa:	9207      	str	r2, [sp, #28]
 800cbac:	e014      	b.n	800cbd8 <_svfiprintf_r+0x114>
 800cbae:	eba0 0308 	sub.w	r3, r0, r8
 800cbb2:	fa09 f303 	lsl.w	r3, r9, r3
 800cbb6:	4313      	orrs	r3, r2
 800cbb8:	9304      	str	r3, [sp, #16]
 800cbba:	46a2      	mov	sl, r4
 800cbbc:	e7d2      	b.n	800cb64 <_svfiprintf_r+0xa0>
 800cbbe:	9b03      	ldr	r3, [sp, #12]
 800cbc0:	1d19      	adds	r1, r3, #4
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	9103      	str	r1, [sp, #12]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	bfbb      	ittet	lt
 800cbca:	425b      	neglt	r3, r3
 800cbcc:	f042 0202 	orrlt.w	r2, r2, #2
 800cbd0:	9307      	strge	r3, [sp, #28]
 800cbd2:	9307      	strlt	r3, [sp, #28]
 800cbd4:	bfb8      	it	lt
 800cbd6:	9204      	strlt	r2, [sp, #16]
 800cbd8:	7823      	ldrb	r3, [r4, #0]
 800cbda:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbdc:	d10a      	bne.n	800cbf4 <_svfiprintf_r+0x130>
 800cbde:	7863      	ldrb	r3, [r4, #1]
 800cbe0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbe2:	d132      	bne.n	800cc4a <_svfiprintf_r+0x186>
 800cbe4:	9b03      	ldr	r3, [sp, #12]
 800cbe6:	1d1a      	adds	r2, r3, #4
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	9203      	str	r2, [sp, #12]
 800cbec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cbf0:	3402      	adds	r4, #2
 800cbf2:	9305      	str	r3, [sp, #20]
 800cbf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ccb8 <_svfiprintf_r+0x1f4>
 800cbf8:	7821      	ldrb	r1, [r4, #0]
 800cbfa:	2203      	movs	r2, #3
 800cbfc:	4650      	mov	r0, sl
 800cbfe:	f7f3 fb07 	bl	8000210 <memchr>
 800cc02:	b138      	cbz	r0, 800cc14 <_svfiprintf_r+0x150>
 800cc04:	9b04      	ldr	r3, [sp, #16]
 800cc06:	eba0 000a 	sub.w	r0, r0, sl
 800cc0a:	2240      	movs	r2, #64	@ 0x40
 800cc0c:	4082      	lsls	r2, r0
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	3401      	adds	r4, #1
 800cc12:	9304      	str	r3, [sp, #16]
 800cc14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc18:	4824      	ldr	r0, [pc, #144]	@ (800ccac <_svfiprintf_r+0x1e8>)
 800cc1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc1e:	2206      	movs	r2, #6
 800cc20:	f7f3 faf6 	bl	8000210 <memchr>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	d036      	beq.n	800cc96 <_svfiprintf_r+0x1d2>
 800cc28:	4b21      	ldr	r3, [pc, #132]	@ (800ccb0 <_svfiprintf_r+0x1ec>)
 800cc2a:	bb1b      	cbnz	r3, 800cc74 <_svfiprintf_r+0x1b0>
 800cc2c:	9b03      	ldr	r3, [sp, #12]
 800cc2e:	3307      	adds	r3, #7
 800cc30:	f023 0307 	bic.w	r3, r3, #7
 800cc34:	3308      	adds	r3, #8
 800cc36:	9303      	str	r3, [sp, #12]
 800cc38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc3a:	4433      	add	r3, r6
 800cc3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc3e:	e76a      	b.n	800cb16 <_svfiprintf_r+0x52>
 800cc40:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc44:	460c      	mov	r4, r1
 800cc46:	2001      	movs	r0, #1
 800cc48:	e7a8      	b.n	800cb9c <_svfiprintf_r+0xd8>
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	3401      	adds	r4, #1
 800cc4e:	9305      	str	r3, [sp, #20]
 800cc50:	4619      	mov	r1, r3
 800cc52:	f04f 0c0a 	mov.w	ip, #10
 800cc56:	4620      	mov	r0, r4
 800cc58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc5c:	3a30      	subs	r2, #48	@ 0x30
 800cc5e:	2a09      	cmp	r2, #9
 800cc60:	d903      	bls.n	800cc6a <_svfiprintf_r+0x1a6>
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d0c6      	beq.n	800cbf4 <_svfiprintf_r+0x130>
 800cc66:	9105      	str	r1, [sp, #20]
 800cc68:	e7c4      	b.n	800cbf4 <_svfiprintf_r+0x130>
 800cc6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc6e:	4604      	mov	r4, r0
 800cc70:	2301      	movs	r3, #1
 800cc72:	e7f0      	b.n	800cc56 <_svfiprintf_r+0x192>
 800cc74:	ab03      	add	r3, sp, #12
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	462a      	mov	r2, r5
 800cc7a:	4b0e      	ldr	r3, [pc, #56]	@ (800ccb4 <_svfiprintf_r+0x1f0>)
 800cc7c:	a904      	add	r1, sp, #16
 800cc7e:	4638      	mov	r0, r7
 800cc80:	f7fd f992 	bl	8009fa8 <_printf_float>
 800cc84:	1c42      	adds	r2, r0, #1
 800cc86:	4606      	mov	r6, r0
 800cc88:	d1d6      	bne.n	800cc38 <_svfiprintf_r+0x174>
 800cc8a:	89ab      	ldrh	r3, [r5, #12]
 800cc8c:	065b      	lsls	r3, r3, #25
 800cc8e:	f53f af2d 	bmi.w	800caec <_svfiprintf_r+0x28>
 800cc92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc94:	e72c      	b.n	800caf0 <_svfiprintf_r+0x2c>
 800cc96:	ab03      	add	r3, sp, #12
 800cc98:	9300      	str	r3, [sp, #0]
 800cc9a:	462a      	mov	r2, r5
 800cc9c:	4b05      	ldr	r3, [pc, #20]	@ (800ccb4 <_svfiprintf_r+0x1f0>)
 800cc9e:	a904      	add	r1, sp, #16
 800cca0:	4638      	mov	r0, r7
 800cca2:	f7fd fc19 	bl	800a4d8 <_printf_i>
 800cca6:	e7ed      	b.n	800cc84 <_svfiprintf_r+0x1c0>
 800cca8:	0800da90 	.word	0x0800da90
 800ccac:	0800da9a 	.word	0x0800da9a
 800ccb0:	08009fa9 	.word	0x08009fa9
 800ccb4:	0800ca0f 	.word	0x0800ca0f
 800ccb8:	0800da96 	.word	0x0800da96

0800ccbc <__sflush_r>:
 800ccbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ccc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccc4:	0716      	lsls	r6, r2, #28
 800ccc6:	4605      	mov	r5, r0
 800ccc8:	460c      	mov	r4, r1
 800ccca:	d454      	bmi.n	800cd76 <__sflush_r+0xba>
 800cccc:	684b      	ldr	r3, [r1, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	dc02      	bgt.n	800ccd8 <__sflush_r+0x1c>
 800ccd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	dd48      	ble.n	800cd6a <__sflush_r+0xae>
 800ccd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ccda:	2e00      	cmp	r6, #0
 800ccdc:	d045      	beq.n	800cd6a <__sflush_r+0xae>
 800ccde:	2300      	movs	r3, #0
 800cce0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cce4:	682f      	ldr	r7, [r5, #0]
 800cce6:	6a21      	ldr	r1, [r4, #32]
 800cce8:	602b      	str	r3, [r5, #0]
 800ccea:	d030      	beq.n	800cd4e <__sflush_r+0x92>
 800ccec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ccee:	89a3      	ldrh	r3, [r4, #12]
 800ccf0:	0759      	lsls	r1, r3, #29
 800ccf2:	d505      	bpl.n	800cd00 <__sflush_r+0x44>
 800ccf4:	6863      	ldr	r3, [r4, #4]
 800ccf6:	1ad2      	subs	r2, r2, r3
 800ccf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ccfa:	b10b      	cbz	r3, 800cd00 <__sflush_r+0x44>
 800ccfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ccfe:	1ad2      	subs	r2, r2, r3
 800cd00:	2300      	movs	r3, #0
 800cd02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd04:	6a21      	ldr	r1, [r4, #32]
 800cd06:	4628      	mov	r0, r5
 800cd08:	47b0      	blx	r6
 800cd0a:	1c43      	adds	r3, r0, #1
 800cd0c:	89a3      	ldrh	r3, [r4, #12]
 800cd0e:	d106      	bne.n	800cd1e <__sflush_r+0x62>
 800cd10:	6829      	ldr	r1, [r5, #0]
 800cd12:	291d      	cmp	r1, #29
 800cd14:	d82b      	bhi.n	800cd6e <__sflush_r+0xb2>
 800cd16:	4a2a      	ldr	r2, [pc, #168]	@ (800cdc0 <__sflush_r+0x104>)
 800cd18:	410a      	asrs	r2, r1
 800cd1a:	07d6      	lsls	r6, r2, #31
 800cd1c:	d427      	bmi.n	800cd6e <__sflush_r+0xb2>
 800cd1e:	2200      	movs	r2, #0
 800cd20:	6062      	str	r2, [r4, #4]
 800cd22:	04d9      	lsls	r1, r3, #19
 800cd24:	6922      	ldr	r2, [r4, #16]
 800cd26:	6022      	str	r2, [r4, #0]
 800cd28:	d504      	bpl.n	800cd34 <__sflush_r+0x78>
 800cd2a:	1c42      	adds	r2, r0, #1
 800cd2c:	d101      	bne.n	800cd32 <__sflush_r+0x76>
 800cd2e:	682b      	ldr	r3, [r5, #0]
 800cd30:	b903      	cbnz	r3, 800cd34 <__sflush_r+0x78>
 800cd32:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd36:	602f      	str	r7, [r5, #0]
 800cd38:	b1b9      	cbz	r1, 800cd6a <__sflush_r+0xae>
 800cd3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd3e:	4299      	cmp	r1, r3
 800cd40:	d002      	beq.n	800cd48 <__sflush_r+0x8c>
 800cd42:	4628      	mov	r0, r5
 800cd44:	f7fe fd58 	bl	800b7f8 <_free_r>
 800cd48:	2300      	movs	r3, #0
 800cd4a:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd4c:	e00d      	b.n	800cd6a <__sflush_r+0xae>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	4628      	mov	r0, r5
 800cd52:	47b0      	blx	r6
 800cd54:	4602      	mov	r2, r0
 800cd56:	1c50      	adds	r0, r2, #1
 800cd58:	d1c9      	bne.n	800ccee <__sflush_r+0x32>
 800cd5a:	682b      	ldr	r3, [r5, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d0c6      	beq.n	800ccee <__sflush_r+0x32>
 800cd60:	2b1d      	cmp	r3, #29
 800cd62:	d001      	beq.n	800cd68 <__sflush_r+0xac>
 800cd64:	2b16      	cmp	r3, #22
 800cd66:	d11e      	bne.n	800cda6 <__sflush_r+0xea>
 800cd68:	602f      	str	r7, [r5, #0]
 800cd6a:	2000      	movs	r0, #0
 800cd6c:	e022      	b.n	800cdb4 <__sflush_r+0xf8>
 800cd6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd72:	b21b      	sxth	r3, r3
 800cd74:	e01b      	b.n	800cdae <__sflush_r+0xf2>
 800cd76:	690f      	ldr	r7, [r1, #16]
 800cd78:	2f00      	cmp	r7, #0
 800cd7a:	d0f6      	beq.n	800cd6a <__sflush_r+0xae>
 800cd7c:	0793      	lsls	r3, r2, #30
 800cd7e:	680e      	ldr	r6, [r1, #0]
 800cd80:	bf08      	it	eq
 800cd82:	694b      	ldreq	r3, [r1, #20]
 800cd84:	600f      	str	r7, [r1, #0]
 800cd86:	bf18      	it	ne
 800cd88:	2300      	movne	r3, #0
 800cd8a:	eba6 0807 	sub.w	r8, r6, r7
 800cd8e:	608b      	str	r3, [r1, #8]
 800cd90:	f1b8 0f00 	cmp.w	r8, #0
 800cd94:	dde9      	ble.n	800cd6a <__sflush_r+0xae>
 800cd96:	6a21      	ldr	r1, [r4, #32]
 800cd98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cd9a:	4643      	mov	r3, r8
 800cd9c:	463a      	mov	r2, r7
 800cd9e:	4628      	mov	r0, r5
 800cda0:	47b0      	blx	r6
 800cda2:	2800      	cmp	r0, #0
 800cda4:	dc08      	bgt.n	800cdb8 <__sflush_r+0xfc>
 800cda6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdae:	81a3      	strh	r3, [r4, #12]
 800cdb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb8:	4407      	add	r7, r0
 800cdba:	eba8 0800 	sub.w	r8, r8, r0
 800cdbe:	e7e7      	b.n	800cd90 <__sflush_r+0xd4>
 800cdc0:	dfbffffe 	.word	0xdfbffffe

0800cdc4 <_fflush_r>:
 800cdc4:	b538      	push	{r3, r4, r5, lr}
 800cdc6:	690b      	ldr	r3, [r1, #16]
 800cdc8:	4605      	mov	r5, r0
 800cdca:	460c      	mov	r4, r1
 800cdcc:	b913      	cbnz	r3, 800cdd4 <_fflush_r+0x10>
 800cdce:	2500      	movs	r5, #0
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	bd38      	pop	{r3, r4, r5, pc}
 800cdd4:	b118      	cbz	r0, 800cdde <_fflush_r+0x1a>
 800cdd6:	6a03      	ldr	r3, [r0, #32]
 800cdd8:	b90b      	cbnz	r3, 800cdde <_fflush_r+0x1a>
 800cdda:	f7fd fd29 	bl	800a830 <__sinit>
 800cdde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d0f3      	beq.n	800cdce <_fflush_r+0xa>
 800cde6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cde8:	07d0      	lsls	r0, r2, #31
 800cdea:	d404      	bmi.n	800cdf6 <_fflush_r+0x32>
 800cdec:	0599      	lsls	r1, r3, #22
 800cdee:	d402      	bmi.n	800cdf6 <_fflush_r+0x32>
 800cdf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cdf2:	f7fd fe9a 	bl	800ab2a <__retarget_lock_acquire_recursive>
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	4621      	mov	r1, r4
 800cdfa:	f7ff ff5f 	bl	800ccbc <__sflush_r>
 800cdfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce00:	07da      	lsls	r2, r3, #31
 800ce02:	4605      	mov	r5, r0
 800ce04:	d4e4      	bmi.n	800cdd0 <_fflush_r+0xc>
 800ce06:	89a3      	ldrh	r3, [r4, #12]
 800ce08:	059b      	lsls	r3, r3, #22
 800ce0a:	d4e1      	bmi.n	800cdd0 <_fflush_r+0xc>
 800ce0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce0e:	f7fd fe8d 	bl	800ab2c <__retarget_lock_release_recursive>
 800ce12:	e7dd      	b.n	800cdd0 <_fflush_r+0xc>

0800ce14 <memmove>:
 800ce14:	4288      	cmp	r0, r1
 800ce16:	b510      	push	{r4, lr}
 800ce18:	eb01 0402 	add.w	r4, r1, r2
 800ce1c:	d902      	bls.n	800ce24 <memmove+0x10>
 800ce1e:	4284      	cmp	r4, r0
 800ce20:	4623      	mov	r3, r4
 800ce22:	d807      	bhi.n	800ce34 <memmove+0x20>
 800ce24:	1e43      	subs	r3, r0, #1
 800ce26:	42a1      	cmp	r1, r4
 800ce28:	d008      	beq.n	800ce3c <memmove+0x28>
 800ce2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce32:	e7f8      	b.n	800ce26 <memmove+0x12>
 800ce34:	4402      	add	r2, r0
 800ce36:	4601      	mov	r1, r0
 800ce38:	428a      	cmp	r2, r1
 800ce3a:	d100      	bne.n	800ce3e <memmove+0x2a>
 800ce3c:	bd10      	pop	{r4, pc}
 800ce3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce46:	e7f7      	b.n	800ce38 <memmove+0x24>

0800ce48 <_sbrk_r>:
 800ce48:	b538      	push	{r3, r4, r5, lr}
 800ce4a:	4d06      	ldr	r5, [pc, #24]	@ (800ce64 <_sbrk_r+0x1c>)
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	4604      	mov	r4, r0
 800ce50:	4608      	mov	r0, r1
 800ce52:	602b      	str	r3, [r5, #0]
 800ce54:	f7f5 fda2 	bl	800299c <_sbrk>
 800ce58:	1c43      	adds	r3, r0, #1
 800ce5a:	d102      	bne.n	800ce62 <_sbrk_r+0x1a>
 800ce5c:	682b      	ldr	r3, [r5, #0]
 800ce5e:	b103      	cbz	r3, 800ce62 <_sbrk_r+0x1a>
 800ce60:	6023      	str	r3, [r4, #0]
 800ce62:	bd38      	pop	{r3, r4, r5, pc}
 800ce64:	20000aa0 	.word	0x20000aa0

0800ce68 <__assert_func>:
 800ce68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce6a:	4614      	mov	r4, r2
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	4b09      	ldr	r3, [pc, #36]	@ (800ce94 <__assert_func+0x2c>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4605      	mov	r5, r0
 800ce74:	68d8      	ldr	r0, [r3, #12]
 800ce76:	b954      	cbnz	r4, 800ce8e <__assert_func+0x26>
 800ce78:	4b07      	ldr	r3, [pc, #28]	@ (800ce98 <__assert_func+0x30>)
 800ce7a:	461c      	mov	r4, r3
 800ce7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce80:	9100      	str	r1, [sp, #0]
 800ce82:	462b      	mov	r3, r5
 800ce84:	4905      	ldr	r1, [pc, #20]	@ (800ce9c <__assert_func+0x34>)
 800ce86:	f000 f84f 	bl	800cf28 <fiprintf>
 800ce8a:	f000 f85f 	bl	800cf4c <abort>
 800ce8e:	4b04      	ldr	r3, [pc, #16]	@ (800cea0 <__assert_func+0x38>)
 800ce90:	e7f4      	b.n	800ce7c <__assert_func+0x14>
 800ce92:	bf00      	nop
 800ce94:	200001a4 	.word	0x200001a4
 800ce98:	0800dadc 	.word	0x0800dadc
 800ce9c:	0800daae 	.word	0x0800daae
 800cea0:	0800daa1 	.word	0x0800daa1

0800cea4 <_calloc_r>:
 800cea4:	b570      	push	{r4, r5, r6, lr}
 800cea6:	fba1 5402 	umull	r5, r4, r1, r2
 800ceaa:	b93c      	cbnz	r4, 800cebc <_calloc_r+0x18>
 800ceac:	4629      	mov	r1, r5
 800ceae:	f7ff f851 	bl	800bf54 <_malloc_r>
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	b928      	cbnz	r0, 800cec2 <_calloc_r+0x1e>
 800ceb6:	2600      	movs	r6, #0
 800ceb8:	4630      	mov	r0, r6
 800ceba:	bd70      	pop	{r4, r5, r6, pc}
 800cebc:	220c      	movs	r2, #12
 800cebe:	6002      	str	r2, [r0, #0]
 800cec0:	e7f9      	b.n	800ceb6 <_calloc_r+0x12>
 800cec2:	462a      	mov	r2, r5
 800cec4:	4621      	mov	r1, r4
 800cec6:	f7fd fda1 	bl	800aa0c <memset>
 800ceca:	e7f5      	b.n	800ceb8 <_calloc_r+0x14>

0800cecc <_realloc_r>:
 800cecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ced0:	4680      	mov	r8, r0
 800ced2:	4615      	mov	r5, r2
 800ced4:	460c      	mov	r4, r1
 800ced6:	b921      	cbnz	r1, 800cee2 <_realloc_r+0x16>
 800ced8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cedc:	4611      	mov	r1, r2
 800cede:	f7ff b839 	b.w	800bf54 <_malloc_r>
 800cee2:	b92a      	cbnz	r2, 800cef0 <_realloc_r+0x24>
 800cee4:	f7fe fc88 	bl	800b7f8 <_free_r>
 800cee8:	2400      	movs	r4, #0
 800ceea:	4620      	mov	r0, r4
 800ceec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cef0:	f000 f833 	bl	800cf5a <_malloc_usable_size_r>
 800cef4:	4285      	cmp	r5, r0
 800cef6:	4606      	mov	r6, r0
 800cef8:	d802      	bhi.n	800cf00 <_realloc_r+0x34>
 800cefa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cefe:	d8f4      	bhi.n	800ceea <_realloc_r+0x1e>
 800cf00:	4629      	mov	r1, r5
 800cf02:	4640      	mov	r0, r8
 800cf04:	f7ff f826 	bl	800bf54 <_malloc_r>
 800cf08:	4607      	mov	r7, r0
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d0ec      	beq.n	800cee8 <_realloc_r+0x1c>
 800cf0e:	42b5      	cmp	r5, r6
 800cf10:	462a      	mov	r2, r5
 800cf12:	4621      	mov	r1, r4
 800cf14:	bf28      	it	cs
 800cf16:	4632      	movcs	r2, r6
 800cf18:	f7fd fe09 	bl	800ab2e <memcpy>
 800cf1c:	4621      	mov	r1, r4
 800cf1e:	4640      	mov	r0, r8
 800cf20:	f7fe fc6a 	bl	800b7f8 <_free_r>
 800cf24:	463c      	mov	r4, r7
 800cf26:	e7e0      	b.n	800ceea <_realloc_r+0x1e>

0800cf28 <fiprintf>:
 800cf28:	b40e      	push	{r1, r2, r3}
 800cf2a:	b503      	push	{r0, r1, lr}
 800cf2c:	4601      	mov	r1, r0
 800cf2e:	ab03      	add	r3, sp, #12
 800cf30:	4805      	ldr	r0, [pc, #20]	@ (800cf48 <fiprintf+0x20>)
 800cf32:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf36:	6800      	ldr	r0, [r0, #0]
 800cf38:	9301      	str	r3, [sp, #4]
 800cf3a:	f000 f83f 	bl	800cfbc <_vfiprintf_r>
 800cf3e:	b002      	add	sp, #8
 800cf40:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf44:	b003      	add	sp, #12
 800cf46:	4770      	bx	lr
 800cf48:	200001a4 	.word	0x200001a4

0800cf4c <abort>:
 800cf4c:	b508      	push	{r3, lr}
 800cf4e:	2006      	movs	r0, #6
 800cf50:	f000 fa08 	bl	800d364 <raise>
 800cf54:	2001      	movs	r0, #1
 800cf56:	f7f5 fca9 	bl	80028ac <_exit>

0800cf5a <_malloc_usable_size_r>:
 800cf5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf5e:	1f18      	subs	r0, r3, #4
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	bfbc      	itt	lt
 800cf64:	580b      	ldrlt	r3, [r1, r0]
 800cf66:	18c0      	addlt	r0, r0, r3
 800cf68:	4770      	bx	lr

0800cf6a <__sfputc_r>:
 800cf6a:	6893      	ldr	r3, [r2, #8]
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	b410      	push	{r4}
 800cf72:	6093      	str	r3, [r2, #8]
 800cf74:	da08      	bge.n	800cf88 <__sfputc_r+0x1e>
 800cf76:	6994      	ldr	r4, [r2, #24]
 800cf78:	42a3      	cmp	r3, r4
 800cf7a:	db01      	blt.n	800cf80 <__sfputc_r+0x16>
 800cf7c:	290a      	cmp	r1, #10
 800cf7e:	d103      	bne.n	800cf88 <__sfputc_r+0x1e>
 800cf80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf84:	f000 b932 	b.w	800d1ec <__swbuf_r>
 800cf88:	6813      	ldr	r3, [r2, #0]
 800cf8a:	1c58      	adds	r0, r3, #1
 800cf8c:	6010      	str	r0, [r2, #0]
 800cf8e:	7019      	strb	r1, [r3, #0]
 800cf90:	4608      	mov	r0, r1
 800cf92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf96:	4770      	bx	lr

0800cf98 <__sfputs_r>:
 800cf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9a:	4606      	mov	r6, r0
 800cf9c:	460f      	mov	r7, r1
 800cf9e:	4614      	mov	r4, r2
 800cfa0:	18d5      	adds	r5, r2, r3
 800cfa2:	42ac      	cmp	r4, r5
 800cfa4:	d101      	bne.n	800cfaa <__sfputs_r+0x12>
 800cfa6:	2000      	movs	r0, #0
 800cfa8:	e007      	b.n	800cfba <__sfputs_r+0x22>
 800cfaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfae:	463a      	mov	r2, r7
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	f7ff ffda 	bl	800cf6a <__sfputc_r>
 800cfb6:	1c43      	adds	r3, r0, #1
 800cfb8:	d1f3      	bne.n	800cfa2 <__sfputs_r+0xa>
 800cfba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cfbc <_vfiprintf_r>:
 800cfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc0:	460d      	mov	r5, r1
 800cfc2:	b09d      	sub	sp, #116	@ 0x74
 800cfc4:	4614      	mov	r4, r2
 800cfc6:	4698      	mov	r8, r3
 800cfc8:	4606      	mov	r6, r0
 800cfca:	b118      	cbz	r0, 800cfd4 <_vfiprintf_r+0x18>
 800cfcc:	6a03      	ldr	r3, [r0, #32]
 800cfce:	b90b      	cbnz	r3, 800cfd4 <_vfiprintf_r+0x18>
 800cfd0:	f7fd fc2e 	bl	800a830 <__sinit>
 800cfd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfd6:	07d9      	lsls	r1, r3, #31
 800cfd8:	d405      	bmi.n	800cfe6 <_vfiprintf_r+0x2a>
 800cfda:	89ab      	ldrh	r3, [r5, #12]
 800cfdc:	059a      	lsls	r2, r3, #22
 800cfde:	d402      	bmi.n	800cfe6 <_vfiprintf_r+0x2a>
 800cfe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfe2:	f7fd fda2 	bl	800ab2a <__retarget_lock_acquire_recursive>
 800cfe6:	89ab      	ldrh	r3, [r5, #12]
 800cfe8:	071b      	lsls	r3, r3, #28
 800cfea:	d501      	bpl.n	800cff0 <_vfiprintf_r+0x34>
 800cfec:	692b      	ldr	r3, [r5, #16]
 800cfee:	b99b      	cbnz	r3, 800d018 <_vfiprintf_r+0x5c>
 800cff0:	4629      	mov	r1, r5
 800cff2:	4630      	mov	r0, r6
 800cff4:	f000 f938 	bl	800d268 <__swsetup_r>
 800cff8:	b170      	cbz	r0, 800d018 <_vfiprintf_r+0x5c>
 800cffa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cffc:	07dc      	lsls	r4, r3, #31
 800cffe:	d504      	bpl.n	800d00a <_vfiprintf_r+0x4e>
 800d000:	f04f 30ff 	mov.w	r0, #4294967295
 800d004:	b01d      	add	sp, #116	@ 0x74
 800d006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00a:	89ab      	ldrh	r3, [r5, #12]
 800d00c:	0598      	lsls	r0, r3, #22
 800d00e:	d4f7      	bmi.n	800d000 <_vfiprintf_r+0x44>
 800d010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d012:	f7fd fd8b 	bl	800ab2c <__retarget_lock_release_recursive>
 800d016:	e7f3      	b.n	800d000 <_vfiprintf_r+0x44>
 800d018:	2300      	movs	r3, #0
 800d01a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d01c:	2320      	movs	r3, #32
 800d01e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d022:	f8cd 800c 	str.w	r8, [sp, #12]
 800d026:	2330      	movs	r3, #48	@ 0x30
 800d028:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d1d8 <_vfiprintf_r+0x21c>
 800d02c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d030:	f04f 0901 	mov.w	r9, #1
 800d034:	4623      	mov	r3, r4
 800d036:	469a      	mov	sl, r3
 800d038:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d03c:	b10a      	cbz	r2, 800d042 <_vfiprintf_r+0x86>
 800d03e:	2a25      	cmp	r2, #37	@ 0x25
 800d040:	d1f9      	bne.n	800d036 <_vfiprintf_r+0x7a>
 800d042:	ebba 0b04 	subs.w	fp, sl, r4
 800d046:	d00b      	beq.n	800d060 <_vfiprintf_r+0xa4>
 800d048:	465b      	mov	r3, fp
 800d04a:	4622      	mov	r2, r4
 800d04c:	4629      	mov	r1, r5
 800d04e:	4630      	mov	r0, r6
 800d050:	f7ff ffa2 	bl	800cf98 <__sfputs_r>
 800d054:	3001      	adds	r0, #1
 800d056:	f000 80a7 	beq.w	800d1a8 <_vfiprintf_r+0x1ec>
 800d05a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d05c:	445a      	add	r2, fp
 800d05e:	9209      	str	r2, [sp, #36]	@ 0x24
 800d060:	f89a 3000 	ldrb.w	r3, [sl]
 800d064:	2b00      	cmp	r3, #0
 800d066:	f000 809f 	beq.w	800d1a8 <_vfiprintf_r+0x1ec>
 800d06a:	2300      	movs	r3, #0
 800d06c:	f04f 32ff 	mov.w	r2, #4294967295
 800d070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d074:	f10a 0a01 	add.w	sl, sl, #1
 800d078:	9304      	str	r3, [sp, #16]
 800d07a:	9307      	str	r3, [sp, #28]
 800d07c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d080:	931a      	str	r3, [sp, #104]	@ 0x68
 800d082:	4654      	mov	r4, sl
 800d084:	2205      	movs	r2, #5
 800d086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d08a:	4853      	ldr	r0, [pc, #332]	@ (800d1d8 <_vfiprintf_r+0x21c>)
 800d08c:	f7f3 f8c0 	bl	8000210 <memchr>
 800d090:	9a04      	ldr	r2, [sp, #16]
 800d092:	b9d8      	cbnz	r0, 800d0cc <_vfiprintf_r+0x110>
 800d094:	06d1      	lsls	r1, r2, #27
 800d096:	bf44      	itt	mi
 800d098:	2320      	movmi	r3, #32
 800d09a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d09e:	0713      	lsls	r3, r2, #28
 800d0a0:	bf44      	itt	mi
 800d0a2:	232b      	movmi	r3, #43	@ 0x2b
 800d0a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d0a8:	f89a 3000 	ldrb.w	r3, [sl]
 800d0ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800d0ae:	d015      	beq.n	800d0dc <_vfiprintf_r+0x120>
 800d0b0:	9a07      	ldr	r2, [sp, #28]
 800d0b2:	4654      	mov	r4, sl
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	f04f 0c0a 	mov.w	ip, #10
 800d0ba:	4621      	mov	r1, r4
 800d0bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0c0:	3b30      	subs	r3, #48	@ 0x30
 800d0c2:	2b09      	cmp	r3, #9
 800d0c4:	d94b      	bls.n	800d15e <_vfiprintf_r+0x1a2>
 800d0c6:	b1b0      	cbz	r0, 800d0f6 <_vfiprintf_r+0x13a>
 800d0c8:	9207      	str	r2, [sp, #28]
 800d0ca:	e014      	b.n	800d0f6 <_vfiprintf_r+0x13a>
 800d0cc:	eba0 0308 	sub.w	r3, r0, r8
 800d0d0:	fa09 f303 	lsl.w	r3, r9, r3
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	9304      	str	r3, [sp, #16]
 800d0d8:	46a2      	mov	sl, r4
 800d0da:	e7d2      	b.n	800d082 <_vfiprintf_r+0xc6>
 800d0dc:	9b03      	ldr	r3, [sp, #12]
 800d0de:	1d19      	adds	r1, r3, #4
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	9103      	str	r1, [sp, #12]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	bfbb      	ittet	lt
 800d0e8:	425b      	neglt	r3, r3
 800d0ea:	f042 0202 	orrlt.w	r2, r2, #2
 800d0ee:	9307      	strge	r3, [sp, #28]
 800d0f0:	9307      	strlt	r3, [sp, #28]
 800d0f2:	bfb8      	it	lt
 800d0f4:	9204      	strlt	r2, [sp, #16]
 800d0f6:	7823      	ldrb	r3, [r4, #0]
 800d0f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0fa:	d10a      	bne.n	800d112 <_vfiprintf_r+0x156>
 800d0fc:	7863      	ldrb	r3, [r4, #1]
 800d0fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800d100:	d132      	bne.n	800d168 <_vfiprintf_r+0x1ac>
 800d102:	9b03      	ldr	r3, [sp, #12]
 800d104:	1d1a      	adds	r2, r3, #4
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	9203      	str	r2, [sp, #12]
 800d10a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d10e:	3402      	adds	r4, #2
 800d110:	9305      	str	r3, [sp, #20]
 800d112:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d1e8 <_vfiprintf_r+0x22c>
 800d116:	7821      	ldrb	r1, [r4, #0]
 800d118:	2203      	movs	r2, #3
 800d11a:	4650      	mov	r0, sl
 800d11c:	f7f3 f878 	bl	8000210 <memchr>
 800d120:	b138      	cbz	r0, 800d132 <_vfiprintf_r+0x176>
 800d122:	9b04      	ldr	r3, [sp, #16]
 800d124:	eba0 000a 	sub.w	r0, r0, sl
 800d128:	2240      	movs	r2, #64	@ 0x40
 800d12a:	4082      	lsls	r2, r0
 800d12c:	4313      	orrs	r3, r2
 800d12e:	3401      	adds	r4, #1
 800d130:	9304      	str	r3, [sp, #16]
 800d132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d136:	4829      	ldr	r0, [pc, #164]	@ (800d1dc <_vfiprintf_r+0x220>)
 800d138:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d13c:	2206      	movs	r2, #6
 800d13e:	f7f3 f867 	bl	8000210 <memchr>
 800d142:	2800      	cmp	r0, #0
 800d144:	d03f      	beq.n	800d1c6 <_vfiprintf_r+0x20a>
 800d146:	4b26      	ldr	r3, [pc, #152]	@ (800d1e0 <_vfiprintf_r+0x224>)
 800d148:	bb1b      	cbnz	r3, 800d192 <_vfiprintf_r+0x1d6>
 800d14a:	9b03      	ldr	r3, [sp, #12]
 800d14c:	3307      	adds	r3, #7
 800d14e:	f023 0307 	bic.w	r3, r3, #7
 800d152:	3308      	adds	r3, #8
 800d154:	9303      	str	r3, [sp, #12]
 800d156:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d158:	443b      	add	r3, r7
 800d15a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d15c:	e76a      	b.n	800d034 <_vfiprintf_r+0x78>
 800d15e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d162:	460c      	mov	r4, r1
 800d164:	2001      	movs	r0, #1
 800d166:	e7a8      	b.n	800d0ba <_vfiprintf_r+0xfe>
 800d168:	2300      	movs	r3, #0
 800d16a:	3401      	adds	r4, #1
 800d16c:	9305      	str	r3, [sp, #20]
 800d16e:	4619      	mov	r1, r3
 800d170:	f04f 0c0a 	mov.w	ip, #10
 800d174:	4620      	mov	r0, r4
 800d176:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d17a:	3a30      	subs	r2, #48	@ 0x30
 800d17c:	2a09      	cmp	r2, #9
 800d17e:	d903      	bls.n	800d188 <_vfiprintf_r+0x1cc>
 800d180:	2b00      	cmp	r3, #0
 800d182:	d0c6      	beq.n	800d112 <_vfiprintf_r+0x156>
 800d184:	9105      	str	r1, [sp, #20]
 800d186:	e7c4      	b.n	800d112 <_vfiprintf_r+0x156>
 800d188:	fb0c 2101 	mla	r1, ip, r1, r2
 800d18c:	4604      	mov	r4, r0
 800d18e:	2301      	movs	r3, #1
 800d190:	e7f0      	b.n	800d174 <_vfiprintf_r+0x1b8>
 800d192:	ab03      	add	r3, sp, #12
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	462a      	mov	r2, r5
 800d198:	4b12      	ldr	r3, [pc, #72]	@ (800d1e4 <_vfiprintf_r+0x228>)
 800d19a:	a904      	add	r1, sp, #16
 800d19c:	4630      	mov	r0, r6
 800d19e:	f7fc ff03 	bl	8009fa8 <_printf_float>
 800d1a2:	4607      	mov	r7, r0
 800d1a4:	1c78      	adds	r0, r7, #1
 800d1a6:	d1d6      	bne.n	800d156 <_vfiprintf_r+0x19a>
 800d1a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1aa:	07d9      	lsls	r1, r3, #31
 800d1ac:	d405      	bmi.n	800d1ba <_vfiprintf_r+0x1fe>
 800d1ae:	89ab      	ldrh	r3, [r5, #12]
 800d1b0:	059a      	lsls	r2, r3, #22
 800d1b2:	d402      	bmi.n	800d1ba <_vfiprintf_r+0x1fe>
 800d1b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1b6:	f7fd fcb9 	bl	800ab2c <__retarget_lock_release_recursive>
 800d1ba:	89ab      	ldrh	r3, [r5, #12]
 800d1bc:	065b      	lsls	r3, r3, #25
 800d1be:	f53f af1f 	bmi.w	800d000 <_vfiprintf_r+0x44>
 800d1c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d1c4:	e71e      	b.n	800d004 <_vfiprintf_r+0x48>
 800d1c6:	ab03      	add	r3, sp, #12
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	462a      	mov	r2, r5
 800d1cc:	4b05      	ldr	r3, [pc, #20]	@ (800d1e4 <_vfiprintf_r+0x228>)
 800d1ce:	a904      	add	r1, sp, #16
 800d1d0:	4630      	mov	r0, r6
 800d1d2:	f7fd f981 	bl	800a4d8 <_printf_i>
 800d1d6:	e7e4      	b.n	800d1a2 <_vfiprintf_r+0x1e6>
 800d1d8:	0800da90 	.word	0x0800da90
 800d1dc:	0800da9a 	.word	0x0800da9a
 800d1e0:	08009fa9 	.word	0x08009fa9
 800d1e4:	0800cf99 	.word	0x0800cf99
 800d1e8:	0800da96 	.word	0x0800da96

0800d1ec <__swbuf_r>:
 800d1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ee:	460e      	mov	r6, r1
 800d1f0:	4614      	mov	r4, r2
 800d1f2:	4605      	mov	r5, r0
 800d1f4:	b118      	cbz	r0, 800d1fe <__swbuf_r+0x12>
 800d1f6:	6a03      	ldr	r3, [r0, #32]
 800d1f8:	b90b      	cbnz	r3, 800d1fe <__swbuf_r+0x12>
 800d1fa:	f7fd fb19 	bl	800a830 <__sinit>
 800d1fe:	69a3      	ldr	r3, [r4, #24]
 800d200:	60a3      	str	r3, [r4, #8]
 800d202:	89a3      	ldrh	r3, [r4, #12]
 800d204:	071a      	lsls	r2, r3, #28
 800d206:	d501      	bpl.n	800d20c <__swbuf_r+0x20>
 800d208:	6923      	ldr	r3, [r4, #16]
 800d20a:	b943      	cbnz	r3, 800d21e <__swbuf_r+0x32>
 800d20c:	4621      	mov	r1, r4
 800d20e:	4628      	mov	r0, r5
 800d210:	f000 f82a 	bl	800d268 <__swsetup_r>
 800d214:	b118      	cbz	r0, 800d21e <__swbuf_r+0x32>
 800d216:	f04f 37ff 	mov.w	r7, #4294967295
 800d21a:	4638      	mov	r0, r7
 800d21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d21e:	6823      	ldr	r3, [r4, #0]
 800d220:	6922      	ldr	r2, [r4, #16]
 800d222:	1a98      	subs	r0, r3, r2
 800d224:	6963      	ldr	r3, [r4, #20]
 800d226:	b2f6      	uxtb	r6, r6
 800d228:	4283      	cmp	r3, r0
 800d22a:	4637      	mov	r7, r6
 800d22c:	dc05      	bgt.n	800d23a <__swbuf_r+0x4e>
 800d22e:	4621      	mov	r1, r4
 800d230:	4628      	mov	r0, r5
 800d232:	f7ff fdc7 	bl	800cdc4 <_fflush_r>
 800d236:	2800      	cmp	r0, #0
 800d238:	d1ed      	bne.n	800d216 <__swbuf_r+0x2a>
 800d23a:	68a3      	ldr	r3, [r4, #8]
 800d23c:	3b01      	subs	r3, #1
 800d23e:	60a3      	str	r3, [r4, #8]
 800d240:	6823      	ldr	r3, [r4, #0]
 800d242:	1c5a      	adds	r2, r3, #1
 800d244:	6022      	str	r2, [r4, #0]
 800d246:	701e      	strb	r6, [r3, #0]
 800d248:	6962      	ldr	r2, [r4, #20]
 800d24a:	1c43      	adds	r3, r0, #1
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d004      	beq.n	800d25a <__swbuf_r+0x6e>
 800d250:	89a3      	ldrh	r3, [r4, #12]
 800d252:	07db      	lsls	r3, r3, #31
 800d254:	d5e1      	bpl.n	800d21a <__swbuf_r+0x2e>
 800d256:	2e0a      	cmp	r6, #10
 800d258:	d1df      	bne.n	800d21a <__swbuf_r+0x2e>
 800d25a:	4621      	mov	r1, r4
 800d25c:	4628      	mov	r0, r5
 800d25e:	f7ff fdb1 	bl	800cdc4 <_fflush_r>
 800d262:	2800      	cmp	r0, #0
 800d264:	d0d9      	beq.n	800d21a <__swbuf_r+0x2e>
 800d266:	e7d6      	b.n	800d216 <__swbuf_r+0x2a>

0800d268 <__swsetup_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4b29      	ldr	r3, [pc, #164]	@ (800d310 <__swsetup_r+0xa8>)
 800d26c:	4605      	mov	r5, r0
 800d26e:	6818      	ldr	r0, [r3, #0]
 800d270:	460c      	mov	r4, r1
 800d272:	b118      	cbz	r0, 800d27c <__swsetup_r+0x14>
 800d274:	6a03      	ldr	r3, [r0, #32]
 800d276:	b90b      	cbnz	r3, 800d27c <__swsetup_r+0x14>
 800d278:	f7fd fada 	bl	800a830 <__sinit>
 800d27c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d280:	0719      	lsls	r1, r3, #28
 800d282:	d422      	bmi.n	800d2ca <__swsetup_r+0x62>
 800d284:	06da      	lsls	r2, r3, #27
 800d286:	d407      	bmi.n	800d298 <__swsetup_r+0x30>
 800d288:	2209      	movs	r2, #9
 800d28a:	602a      	str	r2, [r5, #0]
 800d28c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d290:	81a3      	strh	r3, [r4, #12]
 800d292:	f04f 30ff 	mov.w	r0, #4294967295
 800d296:	e033      	b.n	800d300 <__swsetup_r+0x98>
 800d298:	0758      	lsls	r0, r3, #29
 800d29a:	d512      	bpl.n	800d2c2 <__swsetup_r+0x5a>
 800d29c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d29e:	b141      	cbz	r1, 800d2b2 <__swsetup_r+0x4a>
 800d2a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2a4:	4299      	cmp	r1, r3
 800d2a6:	d002      	beq.n	800d2ae <__swsetup_r+0x46>
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	f7fe faa5 	bl	800b7f8 <_free_r>
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2b2:	89a3      	ldrh	r3, [r4, #12]
 800d2b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d2b8:	81a3      	strh	r3, [r4, #12]
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	6063      	str	r3, [r4, #4]
 800d2be:	6923      	ldr	r3, [r4, #16]
 800d2c0:	6023      	str	r3, [r4, #0]
 800d2c2:	89a3      	ldrh	r3, [r4, #12]
 800d2c4:	f043 0308 	orr.w	r3, r3, #8
 800d2c8:	81a3      	strh	r3, [r4, #12]
 800d2ca:	6923      	ldr	r3, [r4, #16]
 800d2cc:	b94b      	cbnz	r3, 800d2e2 <__swsetup_r+0x7a>
 800d2ce:	89a3      	ldrh	r3, [r4, #12]
 800d2d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d2d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2d8:	d003      	beq.n	800d2e2 <__swsetup_r+0x7a>
 800d2da:	4621      	mov	r1, r4
 800d2dc:	4628      	mov	r0, r5
 800d2de:	f000 f883 	bl	800d3e8 <__smakebuf_r>
 800d2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2e6:	f013 0201 	ands.w	r2, r3, #1
 800d2ea:	d00a      	beq.n	800d302 <__swsetup_r+0x9a>
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	60a2      	str	r2, [r4, #8]
 800d2f0:	6962      	ldr	r2, [r4, #20]
 800d2f2:	4252      	negs	r2, r2
 800d2f4:	61a2      	str	r2, [r4, #24]
 800d2f6:	6922      	ldr	r2, [r4, #16]
 800d2f8:	b942      	cbnz	r2, 800d30c <__swsetup_r+0xa4>
 800d2fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d2fe:	d1c5      	bne.n	800d28c <__swsetup_r+0x24>
 800d300:	bd38      	pop	{r3, r4, r5, pc}
 800d302:	0799      	lsls	r1, r3, #30
 800d304:	bf58      	it	pl
 800d306:	6962      	ldrpl	r2, [r4, #20]
 800d308:	60a2      	str	r2, [r4, #8]
 800d30a:	e7f4      	b.n	800d2f6 <__swsetup_r+0x8e>
 800d30c:	2000      	movs	r0, #0
 800d30e:	e7f7      	b.n	800d300 <__swsetup_r+0x98>
 800d310:	200001a4 	.word	0x200001a4

0800d314 <_raise_r>:
 800d314:	291f      	cmp	r1, #31
 800d316:	b538      	push	{r3, r4, r5, lr}
 800d318:	4605      	mov	r5, r0
 800d31a:	460c      	mov	r4, r1
 800d31c:	d904      	bls.n	800d328 <_raise_r+0x14>
 800d31e:	2316      	movs	r3, #22
 800d320:	6003      	str	r3, [r0, #0]
 800d322:	f04f 30ff 	mov.w	r0, #4294967295
 800d326:	bd38      	pop	{r3, r4, r5, pc}
 800d328:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d32a:	b112      	cbz	r2, 800d332 <_raise_r+0x1e>
 800d32c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d330:	b94b      	cbnz	r3, 800d346 <_raise_r+0x32>
 800d332:	4628      	mov	r0, r5
 800d334:	f000 f830 	bl	800d398 <_getpid_r>
 800d338:	4622      	mov	r2, r4
 800d33a:	4601      	mov	r1, r0
 800d33c:	4628      	mov	r0, r5
 800d33e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d342:	f000 b817 	b.w	800d374 <_kill_r>
 800d346:	2b01      	cmp	r3, #1
 800d348:	d00a      	beq.n	800d360 <_raise_r+0x4c>
 800d34a:	1c59      	adds	r1, r3, #1
 800d34c:	d103      	bne.n	800d356 <_raise_r+0x42>
 800d34e:	2316      	movs	r3, #22
 800d350:	6003      	str	r3, [r0, #0]
 800d352:	2001      	movs	r0, #1
 800d354:	e7e7      	b.n	800d326 <_raise_r+0x12>
 800d356:	2100      	movs	r1, #0
 800d358:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d35c:	4620      	mov	r0, r4
 800d35e:	4798      	blx	r3
 800d360:	2000      	movs	r0, #0
 800d362:	e7e0      	b.n	800d326 <_raise_r+0x12>

0800d364 <raise>:
 800d364:	4b02      	ldr	r3, [pc, #8]	@ (800d370 <raise+0xc>)
 800d366:	4601      	mov	r1, r0
 800d368:	6818      	ldr	r0, [r3, #0]
 800d36a:	f7ff bfd3 	b.w	800d314 <_raise_r>
 800d36e:	bf00      	nop
 800d370:	200001a4 	.word	0x200001a4

0800d374 <_kill_r>:
 800d374:	b538      	push	{r3, r4, r5, lr}
 800d376:	4d07      	ldr	r5, [pc, #28]	@ (800d394 <_kill_r+0x20>)
 800d378:	2300      	movs	r3, #0
 800d37a:	4604      	mov	r4, r0
 800d37c:	4608      	mov	r0, r1
 800d37e:	4611      	mov	r1, r2
 800d380:	602b      	str	r3, [r5, #0]
 800d382:	f7f5 fa83 	bl	800288c <_kill>
 800d386:	1c43      	adds	r3, r0, #1
 800d388:	d102      	bne.n	800d390 <_kill_r+0x1c>
 800d38a:	682b      	ldr	r3, [r5, #0]
 800d38c:	b103      	cbz	r3, 800d390 <_kill_r+0x1c>
 800d38e:	6023      	str	r3, [r4, #0]
 800d390:	bd38      	pop	{r3, r4, r5, pc}
 800d392:	bf00      	nop
 800d394:	20000aa0 	.word	0x20000aa0

0800d398 <_getpid_r>:
 800d398:	f7f5 ba70 	b.w	800287c <_getpid>

0800d39c <__swhatbuf_r>:
 800d39c:	b570      	push	{r4, r5, r6, lr}
 800d39e:	460c      	mov	r4, r1
 800d3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3a4:	2900      	cmp	r1, #0
 800d3a6:	b096      	sub	sp, #88	@ 0x58
 800d3a8:	4615      	mov	r5, r2
 800d3aa:	461e      	mov	r6, r3
 800d3ac:	da0d      	bge.n	800d3ca <__swhatbuf_r+0x2e>
 800d3ae:	89a3      	ldrh	r3, [r4, #12]
 800d3b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d3b4:	f04f 0100 	mov.w	r1, #0
 800d3b8:	bf14      	ite	ne
 800d3ba:	2340      	movne	r3, #64	@ 0x40
 800d3bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	6031      	str	r1, [r6, #0]
 800d3c4:	602b      	str	r3, [r5, #0]
 800d3c6:	b016      	add	sp, #88	@ 0x58
 800d3c8:	bd70      	pop	{r4, r5, r6, pc}
 800d3ca:	466a      	mov	r2, sp
 800d3cc:	f000 f848 	bl	800d460 <_fstat_r>
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	dbec      	blt.n	800d3ae <__swhatbuf_r+0x12>
 800d3d4:	9901      	ldr	r1, [sp, #4]
 800d3d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d3da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d3de:	4259      	negs	r1, r3
 800d3e0:	4159      	adcs	r1, r3
 800d3e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3e6:	e7eb      	b.n	800d3c0 <__swhatbuf_r+0x24>

0800d3e8 <__smakebuf_r>:
 800d3e8:	898b      	ldrh	r3, [r1, #12]
 800d3ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3ec:	079d      	lsls	r5, r3, #30
 800d3ee:	4606      	mov	r6, r0
 800d3f0:	460c      	mov	r4, r1
 800d3f2:	d507      	bpl.n	800d404 <__smakebuf_r+0x1c>
 800d3f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	6123      	str	r3, [r4, #16]
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	6163      	str	r3, [r4, #20]
 800d400:	b003      	add	sp, #12
 800d402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d404:	ab01      	add	r3, sp, #4
 800d406:	466a      	mov	r2, sp
 800d408:	f7ff ffc8 	bl	800d39c <__swhatbuf_r>
 800d40c:	9f00      	ldr	r7, [sp, #0]
 800d40e:	4605      	mov	r5, r0
 800d410:	4639      	mov	r1, r7
 800d412:	4630      	mov	r0, r6
 800d414:	f7fe fd9e 	bl	800bf54 <_malloc_r>
 800d418:	b948      	cbnz	r0, 800d42e <__smakebuf_r+0x46>
 800d41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d41e:	059a      	lsls	r2, r3, #22
 800d420:	d4ee      	bmi.n	800d400 <__smakebuf_r+0x18>
 800d422:	f023 0303 	bic.w	r3, r3, #3
 800d426:	f043 0302 	orr.w	r3, r3, #2
 800d42a:	81a3      	strh	r3, [r4, #12]
 800d42c:	e7e2      	b.n	800d3f4 <__smakebuf_r+0xc>
 800d42e:	89a3      	ldrh	r3, [r4, #12]
 800d430:	6020      	str	r0, [r4, #0]
 800d432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d436:	81a3      	strh	r3, [r4, #12]
 800d438:	9b01      	ldr	r3, [sp, #4]
 800d43a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d43e:	b15b      	cbz	r3, 800d458 <__smakebuf_r+0x70>
 800d440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d444:	4630      	mov	r0, r6
 800d446:	f000 f81d 	bl	800d484 <_isatty_r>
 800d44a:	b128      	cbz	r0, 800d458 <__smakebuf_r+0x70>
 800d44c:	89a3      	ldrh	r3, [r4, #12]
 800d44e:	f023 0303 	bic.w	r3, r3, #3
 800d452:	f043 0301 	orr.w	r3, r3, #1
 800d456:	81a3      	strh	r3, [r4, #12]
 800d458:	89a3      	ldrh	r3, [r4, #12]
 800d45a:	431d      	orrs	r5, r3
 800d45c:	81a5      	strh	r5, [r4, #12]
 800d45e:	e7cf      	b.n	800d400 <__smakebuf_r+0x18>

0800d460 <_fstat_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	4d07      	ldr	r5, [pc, #28]	@ (800d480 <_fstat_r+0x20>)
 800d464:	2300      	movs	r3, #0
 800d466:	4604      	mov	r4, r0
 800d468:	4608      	mov	r0, r1
 800d46a:	4611      	mov	r1, r2
 800d46c:	602b      	str	r3, [r5, #0]
 800d46e:	f7f5 fa6d 	bl	800294c <_fstat>
 800d472:	1c43      	adds	r3, r0, #1
 800d474:	d102      	bne.n	800d47c <_fstat_r+0x1c>
 800d476:	682b      	ldr	r3, [r5, #0]
 800d478:	b103      	cbz	r3, 800d47c <_fstat_r+0x1c>
 800d47a:	6023      	str	r3, [r4, #0]
 800d47c:	bd38      	pop	{r3, r4, r5, pc}
 800d47e:	bf00      	nop
 800d480:	20000aa0 	.word	0x20000aa0

0800d484 <_isatty_r>:
 800d484:	b538      	push	{r3, r4, r5, lr}
 800d486:	4d06      	ldr	r5, [pc, #24]	@ (800d4a0 <_isatty_r+0x1c>)
 800d488:	2300      	movs	r3, #0
 800d48a:	4604      	mov	r4, r0
 800d48c:	4608      	mov	r0, r1
 800d48e:	602b      	str	r3, [r5, #0]
 800d490:	f7f5 fa6c 	bl	800296c <_isatty>
 800d494:	1c43      	adds	r3, r0, #1
 800d496:	d102      	bne.n	800d49e <_isatty_r+0x1a>
 800d498:	682b      	ldr	r3, [r5, #0]
 800d49a:	b103      	cbz	r3, 800d49e <_isatty_r+0x1a>
 800d49c:	6023      	str	r3, [r4, #0]
 800d49e:	bd38      	pop	{r3, r4, r5, pc}
 800d4a0:	20000aa0 	.word	0x20000aa0

0800d4a4 <_init>:
 800d4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4a6:	bf00      	nop
 800d4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4aa:	bc08      	pop	{r3}
 800d4ac:	469e      	mov	lr, r3
 800d4ae:	4770      	bx	lr

0800d4b0 <_fini>:
 800d4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4b2:	bf00      	nop
 800d4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4b6:	bc08      	pop	{r3}
 800d4b8:	469e      	mov	lr, r3
 800d4ba:	4770      	bx	lr
